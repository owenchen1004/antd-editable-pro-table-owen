const path = require('path');
const fs = require('fs-extra');
const { spawn } = require('child_process');
const glob = require('glob');
const babel = require('@babel/core');
const baseConfig = require('./configs/react/base');
const buildConfig = require('./configs/react/build');
const babelCompiler = require('./compiler/babel-react');
const getUMDWebpack = require('./utils/getUMDWebpack');
const getCompileBabel = require('./utils/getCompileBabel');
const defaultUserConfig = require('./configs/userConfig');
const reactUserConfig = require('./configs/react/userConfig');
const cwd = process.cwd();

/**
 *
- build-scripts start --component anchor      运行单个组件的开发调试环境
- build-scripts start                         运行所有组件的开发调试环境
- build-scripts start --type=preview                        运行所有组件的预览环境
- build-scripts start --type=preview --component anchor     运行单个组件的预览环境
- build-scripts build        生成 lib es dist build/materials.json
 */
module.exports = (
  { context, registerTask, registerCliOption, registerUserConfig, onGetWebpackConfig, onHook, log, onGetJestConfig },
  plugionOptions,
) => {
  const { command, rootDir, pkg, commandArgs, userConfig } = context;
  const { component: componentName, type: cmdType } = commandArgs;
  const { plugins, ...compileOptions } = userConfig;
  const { library, basicComponents = [] } = compileOptions;
  const configPath = path.resolve(__dirname, '../.storybook');
  const buildPath = path.resolve(cwd, './build/docs');

  // const parseStorybook = () => {
  //   const babelConfig = getCompileBabel({}, {});
  //   const toBabelList = glob.sync(`${configPath}/**/*.[tj]sx`);

  //   toBabelList.forEach(p => {
  //     let newPath = '';
  //     p.replace(/.*\.storybook\/(.*).(t|j)sx/ig, (s, s1, s2) => {
  //       newPath = s1;
  //     });
  //     const code = babel.transformFileSync(p, babelConfig).code;
  //     fs.outputFileSync(path.join(configPath, `${newPath}.js`), code);
  //   });
  // }
  // parseStorybook();

  /**
   * 运行命令
   *
   * @param {string} command 命令
   * @param {object} options 参数，默认值
   */
  const runCmd = function (command, options = { cwd, stdio: 'inherit', shell: true }) {
    return spawn(`npx ${command}`, options);
  };

  // register cli options
  const cliOptions = ['component', 'type'];

  registerCliOption(
    cliOptions.map((name) => ({
      name,
      commands: ['start', 'build', 'materials'],
    })),
  );
  registerUserConfig(defaultUserConfig.concat(reactUserConfig));

  if (command === 'build') {
    if (!library) {
      log.error('缺少 library 信息，无法构建');
      return false;
    }
    log.info('start docs');

    runCmd(`build-storybook --config-dir ${configPath} --output-dir ${buildPath}`);

    const taskName = 'component-lib-es';
    const params = {
      rootDir,
      pkg,
      entry: { index: path.join(cwd, 'src/index') },
    };
    onGetWebpackConfig(taskName, (config) => {
      baseConfig(config, params);
      buildConfig(config, params);
    });

    log.info(`========== generagt build/materials.json ==========`);
    let materialContent;
    const materialPath = path.join(rootDir, 'build/materials.json');
    const componentsArray = glob.sync(`${path.join(rootDir, 'docs/')}**/README.json`);
    let comJson = [];
    componentsArray.forEach((p) => {
      let content = {};
      try {
        content = JSON.parse(fs.readFileSync(p, 'utf8'));
      } catch (error) {
        log.error(`Content of ${p} is not a valid json!`);
      }

      const { name, title, description, category, ...others } = content;
      comJson.push({
        name,
        title,
        description,
        category,
        homepage: `./docs/iframe.html?id=${name}--page&args=&viewMode=story`,
        ...others,
      });
    });

    const { name, version, title, description, homepage, screenshot, logo, repository, owners } = pkg;
    materialContent = {
      meta: {
        npm: pkg.name,
        version,
        name,
        title,
        description,
        homepage,
        screenshot,
        logo,
        jsLibrary: 1,
        componentLibrary: 1,
        platform: 1,
        repository,
        owners,
      },
      components: comJson,
    };
    fs.outputFileSync(materialPath, JSON.stringify(materialContent, null, 2));

    log.info(`========== generate build/materials.json successfully! ==========`);

    babelCompiler(context, log, basicComponents, compileOptions, 'react');
    registerTask('component-dist', getUMDWebpack({ context, compileOptions }));
  } else if (command === 'start' && cmdType === 'preview') {
    if (componentName) {
      log.info(`========== start preview one: [${componentName}] ==========`);
      // run dev for one
      runCmd(
        `start-storybook --config-dir ${configPath} -p 9001 --docs --no-manager-cache "component=${componentName}"`,
      );
    } else {
      log.info(`========== start preview all ==========`);
      // run dev for all
      runCmd(`start-storybook --config-dir ${configPath} -p 9001 --docs --no-manager-cache`);
    }
  } else if (command === 'start') {
    if (componentName) {
      log.info(`========== start dev one: [${componentName}] ==========`);
      // run dev for one
      runCmd(`start-storybook --config-dir ${configPath} -p 9001 "component=${componentName}"`);
    } else {
      log.info(`========== start dev all ==========`);
      // run dev for all
      runCmd(`start-storybook --config-dir ${configPath} -p 9001`);
    }
  }
};
