const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { merge } = require('webpack-merge');
const _flatten = require('lodash/flatten');
const setCSSRule = require('../../../utils/css/setCSSRule');
const generateDemoEntry = require('../../../utils/generators/generateDemoEntry');
const extractImport = require('../../../utils/extractImport');

module.exports = (config, context, options = {}) => {
  const { rootDir, pkg } = context;
  const { components, multiple, extractModule } = options;

  const allDemos = components.map((component) => {
    if (component.meta.visible !== false) {
      return component.demos;
    }
    return null;
  });

  const { entries } = generateDemoEntry(_flatten(allDemos), rootDir);

  Object.keys(entries).forEach((entryKey) => {
    const [componentName, demoName] = entryKey.split('$$');
    const filePath = entries[entryKey];

    config.entry(entryKey).add(filePath);

    config.plugin(`HtmlWebpackPlugin_${entryKey}`).use(HtmlWebpackPlugin, [
      {
        inject: true,
        title: `${componentName}/${demoName}`,
        filename: `${componentName}/${demoName}.html`,
        chunks: [entryKey],
        template: path.resolve(__dirname, '../../../template/demo.html'),
      },
    ]);
  });

  config.mode('production');

  config.externals([
    function (ctx, request, callback) {
      if (request.indexOf('@weex-module') !== -1) {
        return callback(null, `commonjs ${request}`);
      }
      // Built-in modules in QuickApp
      if (request.indexOf('@system') !== -1) {
        return callback(null, `commonjs ${request}`);
        extractImport;
      }
      callback();
    },
  ]);

  config.optimization
    .namedChunks(true)
    .splitChunks({
      name: 'demo-vendor',
      chunks: 'all',
    })
    .end();

  config.output.path(path.resolve(rootDir, 'build'));
  config.output.filename((pathData) => {
    const [componentName, demoName] = pathData.chunk.name.split('$$');
    return `${componentName}/${demoName}.js`;
  });

  setCSSRule(config, true);

  if (multiple && extractModule) {
    extractImport(config, pkg.name, rootDir);
  }

  config.optimization.sideEffects(false);

  return config;
};
