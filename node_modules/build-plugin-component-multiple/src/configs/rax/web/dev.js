const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { hmrClient } = require('rax-compile-config');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const setCSSRule = require('../../../utils/css/setCSSRule');
const generateDemoEntry = require('../../../utils/generators/generateDemoEntry');
const extractImport = require('../../../utils/extractImport');

module.exports = (config, context, options = {}) => {
  const { rootDir, pkg } = context;
  const { multiple, extractModule, demos } = options;
  const { entries } = generateDemoEntry(demos, rootDir);

  Object.keys(entries).forEach((entryKey) => {
    const [componentName, demoName] = entryKey.split('$$');
    const filePath = entries[entryKey];

    config.entry(entryKey).add(hmrClient).add(filePath);

    config.plugin(`HtmlWebpackPlugin_${entryKey}`).use(HtmlWebpackPlugin, [
      {
        inject: true,
        title: (multiple ? `${componentName}/${demoName}` : demoName) + ` - ${pkg.name}`,
        filename: multiple ? `${componentName}/${demoName}` : demoName,
        chunks: [entryKey],
        template: path.resolve(__dirname, '../../../template/demo.html'),
      },
    ]);
  });

  config.output.filename('[name].js');
  setCSSRule(config, true);

  // Extract css for SSR dev server
  config.plugin('minicss').use(MiniCssExtractPlugin, [
    {
      filename: '[name].css',
    },
  ]);

  // rewrite a request that matches the /\/index/ pattern to /index.html.
  config.devServer.set('historyApiFallback', true);

  if (multiple && extractModule) {
    extractImport(config, pkg.name, rootDir);
  }

  return config;
};
