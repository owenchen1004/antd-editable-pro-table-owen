const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const { platformMap } = require('miniapp-builder-shared');
const getBaseWebpack = require('./getBaseWebpack');
const miniappFunctionWrapper = require('../../webpackPlugins/miniappFunctionWrapper');
const setCSSRule = require('../../utils/css/setCSSRule');
const getDirs = require('../../utils/getDirs');

module.exports = (context, options = {}) => {
  const { target, demos } = options;
  const config = getBaseWebpack(
    { ...context, command: 'build', commandArgs: {} },
    {
      ...options,
      minify: false,
    },
  );
  const { rootDir } = context;
  const { TMP_FILE_DIR, MINIAPP_DIR } = getDirs(rootDir);
  const { entryName = 'index', targetDir = path.join(MINIAPP_DIR, target) } = options;
  const entryPath = path.resolve(TMP_FILE_DIR, 'bundle.jsx');

  config.entry(entryName).add(entryPath);

  config.devServer.inline(false);

  config.output.path(targetDir);
  config.output.filename('bundle.js');

  setCSSRule(config, false);

  config.plugin('minicss').use(MiniCssExtractPlugin, [
    {
      filename: `bundle.css${platformMap[target].extension.css}`,
    },
  ]);

  config.plugin('runtimeMiniappWrapper').use(miniappFunctionWrapper, [
    {
      rootDir,
      targetDir,
      demos,
      target,
    },
  ]);
  config.mode('production');
  return config;
};
