const fse = require('fs-extra');
const path = require('path');
const { platformMap } = require('miniapp-builder-shared');
const generateRuntimeMiniappPages = require('../utils/generators/generateMiniappPages');
const generateAppJson = require('../utils/generators/generateAppJson');
const adjustCSS = require('../utils/css/adjustCSS');
const copyMiniappFiles = require('../utils/copyMiniappFiles');

const prefix = `Function = function(){ return function() { return Symbol; } }; if (typeof
Function.prototype.call === 'undefined') { Function.prototype.call = function
(context) { context = context || window; context.fn = this; const args =
[...arguments].slice(1); const result = context.fn(...args); delete context.fn;
return result; }; } if (typeof Function.prototype.apply === 'undefined') {
Function.prototype.apply = function (context) { context = context || window;
context.fn = this; let result; if (arguments[1]) { result =
context.fn(...arguments[1]); } else { result = context.fn(); } delete
context.fn; return result; }; }

module.exports = function(window, document) {
  const HTMLElement = window["HTMLElement"];

`;
const suffix = '}';

class BuildWrapper {
  constructor(options) {
    this.options = options;
  }

  apply(compiler) {
    const { targetDir, demos, target } = this.options;

    if (compiler.hooks && compiler.hooks.done && compiler.hooks.done.tap) {
      compiler.hooks.afterEmit.tap('runtime-function-wrapper-plugin', (compilation) => {
        const miniappOutputPath = targetDir;

        // 创建 createDemoDir(path, demoName);
        if (Array.isArray(demos)) {
          // clear pages dir
          fse.removeSync(path.resolve(miniappOutputPath, 'pages'));

          // regenerate miniapp pages
          const demoNames = demos.map((demo) => {
            const { demoPascalName, componentPascalName } = demo;
            const fullDemoName = componentPascalName + demoPascalName;

            generateRuntimeMiniappPages(
              path.resolve(miniappOutputPath, `pages/${fullDemoName}/`),
              fullDemoName,
              target,
            );
            return fullDemoName;
          });

          // regenerate app.json
          generateAppJson(path.resolve(miniappOutputPath, 'app.json'), demoNames);
        }

        const bundleJS = compilation.assets['bundle.js'];
        const bundleCss = compilation.assets[`bundle.css${platformMap[target].extension.css}`];

        if (bundleJS) {
          const { existsAt, _cachedSource } = bundleJS;

          if (existsAt) {
            fse.outputFileSync(existsAt, `${prefix} ${_cachedSource} \n ${suffix}`);
          }
        }

        // otherwise you need to write to disk explicitly
        if (bundleCss) {
          const { existsAt, _cachedSource } = bundleCss;
          // Notice: 所有小程序， 都进行 :root->page 操作
          const resultCSS = adjustCSS(_cachedSource, true);

          if (existsAt) {
            fse.outputFileSync(existsAt, resultCSS);
          }
        }

        copyMiniappFiles(targetDir, target);
      });
    }
  }
}

module.exports = BuildWrapper;
