const path = require('path');
const fse = require('fs-extra');
const camelCase = require('camelcase');
const getDemos = require('./getDemos');
const getReadMe = require('./getReadMe');
const getCoverage = require('./getCoverageInfo');

function getComponentInfo(context, options, componentName) {
  const { rootDir, command } = context;
  const { multiple } = options;
  const { content: readmeContent = '', meta = {} } = getReadMe(rootDir, componentName);

  // 过滤无 readme 或 加了隐藏标记 的组件，视为无效组件
  if (!readmeContent || meta.visible === false) {
    return undefined;
  }

  const demos = getDemos(rootDir, componentName, null, multiple);

  return {
    componentName,
    componentPascalName: camelCase(componentName, { pascalCase: true }),
    title: meta.title || componentName,
    meta,
    multiple,
    command,
    readmeContent,
    demos,
  };
}

/**
 * 获取所有组件的信息
 * @param context
 * @param options
 */
module.exports = function (context, options) {
  const { rootDir } = context;
  const docDir = path.join(rootDir, 'docs');
  const { component } = options;
  let dirs = component ? [component] : fse.readdirSync(docDir);
  const coverage = getCoverage(rootDir);

  dirs = dirs.filter((fileName) => {
    return fse.statSync(path.join(docDir, fileName)).isDirectory();
  });

  return dirs
    .map((dir) => {
      return getComponentInfo(context, options, dir);
    })
    .map((component) => {
      return {
        ...component,
        coverage: coverage[component.componentName] || 0,
      };
    })
    .filter((c) => !!c);
};
