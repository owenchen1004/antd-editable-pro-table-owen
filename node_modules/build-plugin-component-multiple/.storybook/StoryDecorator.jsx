import * as React from 'react';
import { Message } from '@alifd/next';
import { getParameters } from 'codesandbox/lib/api/define';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';
const Marked = require("marked");

export default ({ meta, children }) => {
  const {
    name: title,
    originalStoryFn: { desc },
  } = meta;

  const codeRef = React.useRef();
  const [codeVisible, setCodeVisible] = React.useState(true);

  // console.log(window.storyCodes, '=======', meta)
  const source = window.storyCodes && window.storyCodes[meta.id] || meta?.parameters?.storySource?.source || '';
  const handleClickCodeBtn = () => {
    setCodeVisible(!codeVisible);
  };
  // React.useEffect(() => {
  //   if (codeVisible) {
  //     codeRef.current.scrollIntoView({ behavior: 'smooth' });
  //   }
  // }, [codeVisible]);

  const copyCode = () => {
    let input = document.getElementById(`${title}-code-text`);
    input.select();
    document.execCommand("copy"); // 执行浏览器复制命令
    Message.show('Copied!');
  }

  let currentFunc = 'Basic';
  source.replace(/.*\nexport const (.*) = \(.*/ig, (s, s1, s2) => {
    currentFunc = s1;
  });
  console.log('Demo Name:', currentFunc);

  const pkgInfo = window.pkgInfo || {};
  const pkgName = pkgInfo.name;
  const pkgVersion = pkgInfo.version || 'latest';
  const pkgDependencies = pkgInfo.dependencies || {};

  const codeSandboxPkg = {
    "name": title,
    "version": "1.0.0",
    "description": "",
    "keywords": [],
    "main": "src/index.js",
    "dependencies": {
      "@alifd/next": "latest",
      "moment": "2.23.0",
      "react": "16.x",
      "react-dom": "16.x",
      "react-scripts": "2.0.3"
    },
    "devDependencies": {},
    "scripts": {
      "start": "react-scripts start",
      "build": "react-scripts build",
      "test": "react-scripts test --env=jsdom",
      "eject": "react-scripts eject"
    },
    "browserslist": [
      ">0.2%",
      "not dead",
      "not ie <= 11",
      "not op_mini all"
    ]
  };

  codeSandboxPkg.dependencies[pkgName] = pkgVersion;
  codeSandboxPkg.dependencies = {
    ...codeSandboxPkg.dependencies,
    ...pkgDependencies
  };

  const parameters = getParameters({
    files: {
      'public/index.html': {
        content: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <meta name="theme-color" content="#000000" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />
    <title>${title}</title>
  </head>

  <body>
    <div id="mountNode"></div>
  </body>
</html>`
      },
      'src/index.js': {
        content: `import React from 'react';
import ReactDOM from 'react-dom';
import { Demo } from './main';
import './styles.scss';

const mountNode = document.getElementById("mountNode");
ReactDOM.render(<Demo />, mountNode);
`,
      },
      'src/main.js': {
        content: `${source}
export const Demo = ${currentFunc};`,
      },
      'src/styles.scss': {
        content: `/* style here */
@import '@alifd/next/dist/next.min.css';`
      },
      'package.json': {
        content: codeSandboxPkg,
      },
    },
  });

  return <div className="next-demo-item">
    <div className="demo-item-desc markdown">
      <h3 className="demo-item-desc-title">
        {title}
        <a className="header-anchor" href="#type-container">
          #
        </a>
      </h3>
      <div
        className="demo-item-desc-body markdown"
        dangerouslySetInnerHTML={{ __html: Marked(desc) }}
      ></div>
    </div>
    <div className="next-demo-mount">{children}</div>
    <div className="demo-item-operations">
      <textarea id={`${title}-code-text`} style={{opacity: 0, cursor: 'default', userSelect: 'none'}}>{source}
      </textarea>
      <form className="code-box-code-action" action={`https://codesandbox.io/api/v1/sandboxes/define`} method="POST" target="_blank">
        <input type="hidden" name="parameters" value={parameters}/>
        <button type="submit" className="preview-btn">
          <span role="img" className="op-icon">
            <svg style={{width: 18, height: 18, marginTop: 4}} viewBox="0 0 1024 1024" fill="currentColor"><path d="M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"></path></svg>
          </span>
        </button>
    </form>
      <div id="basic-copy" onClick={copyCode}>
        <button className="preview-btn" id="basic-copy-btn"><span className="code-box-code-action" aria-haspopup="true" aria-expanded="false"><svg viewBox="0 0 20 20" focusable="false" data-icon="snippets" width="20px" height="20px" fill="currentColor" aria-hidden="true"><path d="M15,5 L15,18 L2,18 L2,5 L15,5 Z M14,6 L3,6 L3,17 L14,17 L14,6 Z M18,2 L18,15 L16,15 L16,13.999 L17,14 L17,3 L6,3 L6,4 L5,4 L5,2 L18,2 Z M9,8 L9,11 L12,11 L12,12 L9,12 L9,15 L8,15 L8,12 L5,12 L5,11 L8,11 L8,8 L9,8 Z"></path></svg></span></button>
      </div>
      <div id="basic-fold-code" onClick={handleClickCodeBtn}>
        <span className="code-box-code-action"><svg alt="expand code" width="20px" height="20px" viewBox="0 0 20 20" fill={ codeVisible ? 'rgb(59, 154, 255)' : 'currentColor'}><path d="M14.4307124,13.5667899 L15.1349452,14.276759 L10.7473676,18.6288871 L6.42783259,14.2738791 L7.13782502,13.5696698 L10.7530744,17.2147744 L14.4307124,13.5667899 Z M4.79130753,8.067524 L16.3824174,11.1733525 L16.1235984,12.1392784 L4.53248848,9.03344983 L4.79130753,8.067524 Z M10.8154102,1.57503552 L15.1349452,5.93004351 L14.4249528,6.63425282 L10.809949,2.98914817 L7.13206544,6.6371327 L6.42783259,5.92716363 L10.8154102,1.57503552 Z" transform="translate(10.457453, 10.101961) rotate(90.000000) translate(-10.457453, -10.101961) "></path></svg>
        </span>
      </div>
    </div>
    <div style={{ display: codeVisible ? 'block' : 'none' }} ref={codeRef}>
      {source && (
        <SyntaxHighlighter
          language="javascript"
          style={vscDarkPlus}
          customStyle={{ marginBottom: 0 }}
          showLineNumbers
        >
          {source}
        </SyntaxHighlighter>
      )}
     </div>
  </div>;
};
