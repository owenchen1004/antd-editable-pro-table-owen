import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { ConfigProvider } from '@alifd/next';
import enUS from '@alifd/next/lib/locale/en-us';
import zhCN from '@alifd/next/lib/locale/zh-cn';
import BaseContext, { IContext } from './BaseContext';

const Provider: React.FC<IContext> = ({ theme: userTheme, lang: userLang, children }) => {
  const [theme, setTheme] = useState(userTheme);
  const [lang, setLang] = useState(userLang);

  // 主题切换
  useEffect(() => {
    if (theme === 'dark') {
      document.body.classList.add('dark');
      // `to-string-loader` `@alifd/theme-1` 这两个插件要安装
      // @ts-ignore
      import('!!to-string-loader!css-loader!@alifd/theme-1/variables.css').then(
        (cssString) => {
          const tokenVariables = cssString.default;
          const oStyle = document.createElement('style');
          oStyle.innerHTML = tokenVariables;
          oStyle.id = 'theme-style';
          document.head.appendChild(oStyle);
        },
      );
    } else {
      document.body.classList.remove('dark');
      const oDarkStyle = document.getElementById('theme-style');
      oDarkStyle && oDarkStyle.remove();
    }
  }, [theme]);
  return (
    <BaseContext.Provider value={{ theme, lang, setTheme, setLang }}>
      <ConfigProvider locale={lang === 'en' ? enUS : zhCN}>{children}</ConfigProvider>
    </BaseContext.Provider>
  );
};

Provider.defaultProps = {
  theme: 'light',
  lang: 'zh-CN',
};

Provider.propTypes = {
  theme: PropTypes.oneOf(['dark', 'light']),
  lang: PropTypes.oneOf(['zh-CN', 'en']),
};

export { Provider };
export { default as BaseContext, IContext } from './BaseContext';
export { default as useTheme } from './useTheme';
export { default as useLang } from './useLang';
