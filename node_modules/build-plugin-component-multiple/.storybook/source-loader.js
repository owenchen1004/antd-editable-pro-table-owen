const parser = require('@babel/parser');
const traverse = require("@babel/traverse");
const generate = require("@babel/generator");
const _ = require('lodash');
const prettier = require("prettier");

global.stories = {};
module.exports = (code) => {
  const stories = {};
  let category = '';

  const ast = parser.parse(code, {
    // parse in strict mode and allow module declarations
    sourceType: "module",

    plugins: [
      // enable jsx and flow syntax
      "jsx",
      "typescript",
    ],
  });
  // const importSpecFromWhaleUI = [];
  traverse.default(ast, {
    ExpressionStatement(path) {
      if (_.get(path, 'node.expression.left.property.name') === 'desc') {
        path.remove();
      }

      if (_.get(path, 'node.expression.left.property.name') === 'storyName') {
        path.remove();
      }
    },
    ImportDeclaration(path) {
      // const pkgName =  _.get(path, 'node.source.value');
      // if (pkgName === 'react') {
      //   path.remove();
      // }
      // else if (pkgName.startsWith('@/') || pkgName === '@fusion') {
      //   path.node.specifiers.forEach(spec => {
      //     importSpecFromWhaleUI.push(spec);
      //   })
      //   path.remove();
      // }
    },
    ExportDefaultDeclaration(path) {
      category = _.get(path, 'node.declaration.properties').find(item => item.key.name === 'title').value.value;
      path.remove();
    }
  });
  traverse.default(ast, {
    ExportNamedDeclaration(path) {
      const copyAst = JSON.parse(JSON.stringify(ast));
      const storyName = _.get(path, 'node.declaration.declarations[0].id.name');
      // copyAst.program.body = copyAst.program.body.filter(node => {
      //   if (node.type === 'ExportDefaultDeclaration') return false;
      //   if (node.type === 'ExportNamedDeclaration') {
      //     if (node.declaration.declarations[0].id.name === storyName) {
      //       _.set(node, 'declaration.declarations[0].id.name', 'App');
      //       return true;
      //     } else {
      //       return false;
      //     }
      //   }
      //   return true;
      // });
      // copyAst.program.body.unshift(
      //   t.importDeclaration(importSpecFromWhaleUI,
      //   t.stringLiteral('@alife/whale-ui'))
      // );
      stories[_.kebabCase(storyName)] = prettier.format(generate.default(copyAst).code, { printWidth: 100, parser: "babel-ts" });
    },
  });

  for (let name in stories) {
    stories[`${category.toLowerCase().replace(/\s/g, '-')}--${name.toLowerCase()}`] = stories[name];
    delete stories[name];
  }
  global.stories = {...global.stories, ...stories};
  return code;
}
