const argv = process.argv;
const path = require('path');
const fs = require('fs-extra');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const { set } = require('lodash');
const webpack = require('webpack');
const getCompileBabel = require('../src/utils/getCompileBabel');
const cwd = process.cwd();
const cpus = require('os').cpus().length;
const totalMem = require('os').totalmem() / 1024 / 1024;
const StoryCodePlugin = require('./story-code-plugin');
const { multipleProps } = require('./getMultiProps');
const pkgJSONPath = path.resolve(cwd, 'package.json');
const pkgJSON = fs.readJSONSync(pkgJSONPath);
const pkgName = pkgJSON.name;
const buildJSONPath = path.resolve(cwd, 'build.json');
const buildJson = fs.readJSONSync(buildJSONPath);
const alias = buildJson.alias || {};
const headContent = buildJson.headContent || [];
const paramObj = {};

(argv[argv.length - 1] || '').split('&').forEach((item) => {
  const arr = item.split('=');
  paramObj[arr[0]] = arr[1];
});

function wrapLoader(loader, options, defaultOptions) {
  if (options === false) {
    return [];
  }

  return [
    {
      loader,
      options: {
        ...defaultOptions,
        ...options,
      },
    },
  ];
}

const options = getCompileBabel(
  {},
  {
    rootDir: cwd,
    babelPlugins: [
      [
        'babel-plugin-module-resolver',
        {
          alias: {
            '@/': path.resolve(cwd, './src/'),
          },
        },
      ],
    ],
  },
);
const getThemeContent = (themeName) => {
  const themePkgPath = path.join(cwd, 'node_modules', themeName, `package.json`);
  const themeVarPath = path.join(cwd, 'node_modules', themeName, './dist/next.var.css');
  const cssVariablesPath = path.join(cwd, 'node_modules', themeName, './variables.css');
  const theme = {};
  theme.version = fs.readJSONSync(themePkgPath, 'utf-8').version;
  theme.vars = fs.readFileSync(themeVarPath, 'utf-8') + '\n' + fs.readFileSync(cssVariablesPath,'utf-8');
  return theme;
};
const getThemeVars = () => {
  const { themePackage } = multipleProps;
  if (Array.isArray(themePackage)) {
    const themeList = [];
    for (const theme of themePackage) {
      themeList.push({
        ...theme,
        ...getThemeContent(theme.value),
      });
    }
    return themeList;
  } else {
    const theme = getThemeContent(themePackage);
    theme.label = '默认主题';
    theme.value = themePackage;
    return [{ ...theme }];
  }
};

const getHeadContent = () =>{
  if(!headContent || headContent.length === 0) return;
  return headContent.join('\n');
}

module.exports = {
  stories: [
    path.resolve(cwd, `./docs/${paramObj.component || '**'}/demo/*.@(tsx|jsx|js)`),
    path.resolve(cwd, `./docs/${paramObj.component || '**'}/*.mdx`),
  ],
  typescript: {
    check: false,
    reactDocgenTypescriptOptions: {
      shouldExtractLiteralValuesFromEnum: true,
      propFilter: (prop) => {
        const fileName = prop.parent && prop.parent.fileName;
        if (!fileName) {
          return true;
        }
        return !['@types/react', 'typescript/lib'].some((vo) => fileName.includes(vo));
      },
      setDisplayName: true,
    },
  },
  addons: [
    {
      name: '@storybook/addon-essentials',
      options: {
        controls: false,
        actions: false,
        backgrounds: false,
        outline: false,
        docs: {
          sourceLoaderOptions: null,
        },
      },
    },
    {
      name: 'storybook-addon-fusion-theme',
    },
    multipleProps.addons || {}
  ],
  webpackFinal: async (config, {
    threadLoaderOptions,
    cacheLoaderOptions,
    cssLoaderOptions,
    sassLoaderOptions,
    lessLoaderOptions,
    cssRules = {},
    scssRules = {},
    lessRules = {},
  }) => {
    config.module.rules.push({
      test: /\.[tj]sx$/,
      use: {
        loader: require.resolve('babel-loader'),
        options,
      },
    });

    config.module.rules.push({
      test: /\.scss$/,
      ...scssRules,
      use: [
        MiniCssExtractPlugin.loader,
        ...wrapLoader(require.resolve('thread-loader'), threadLoaderOptions, {
          workers: cpus - 1,
          workerParallelJobs: 50,
          workerNodeArgs: [`--max-old-space-size=4096`],
          poolRespawn: false,
          poolTimeout: 2000,
          poolParallelJobs: 200,
          name: 'scss-pool',
        }),
        ...wrapLoader(require.resolve('css-loader'), cssLoaderOptions),
        ...wrapLoader(require.resolve('fast-sass-loader'), sassLoaderOptions),
      ],
    });

    config.module.rules.push({
      test: /\.less$/,
      ...lessRules,
      use: [
        MiniCssExtractPlugin.loader,
        ...wrapLoader(require.resolve('thread-loader'), threadLoaderOptions, {
          workers: cpus - 1,
          workerParallelJobs: 50,
          workerNodeArgs: [`--max-old-space-size=4096`],
          poolRespawn: false,
          poolTimeout: 2000,
          poolParallelJobs: 200,
          name: 'less-pool',
        }),
        ...wrapLoader(require.resolve('css-loader'), cssLoaderOptions),
        ...wrapLoader(require.resolve('less-loader'), lessLoaderOptions),
      ],
    });

    config.module.rules.push({
      test: /\/docs\/.*\/demo\/.*\.[tj]sx$/,
      use: require.resolve('./source-loader'),
      enforce: 'pre',
    });

    config.resolve.alias[pkgName] = path.resolve(cwd, './src');
    config.resolve.alias['@root'] = path.resolve(cwd, './');

    Object.keys(alias).forEach((item) => {
      config.resolve.alias[item] = path.resolve(cwd, alias[item]);
    });

    config.plugins.push(
      new webpack.NormalModuleReplacementPlugin(/@(alife|alifd)\/next\/(.*)/, function (resource) {
        resource.request = resource.request.replace(/(alife|alifd)\/next\/lib/, 'alifd/next/es');
      }),
    );

    config.plugins.push(
      new MiniCssExtractPlugin({
        filename: '[name].css',
        chunkFilename: '[id].css',
      }),
    );
    config.plugins.push(new StoryCodePlugin());

    set(config, 'externals.lodash', '_');
    set(config, 'externals.ramda', 'R');
    set(config, 'externals.moment', 'moment');
    set(config, 'externals.@alifd/next', 'Next');
    set(config, 'externals.@alife/next', 'Next');
    set(config, 'externals.react', 'React');
    set(config, 'externals.react-dom', 'ReactDOM');

    return config;
  },
  previewHead: (head) => {
    let files = `${head}
      <script src="https://g.alicdn.com/code/lib/react/16.9.0/umd/react.development.js"></script>
      <script src="https://g.alicdn.com/code/lib/react-dom/16.9.0/umd/react-dom.development.js"></script>
      <script src="https://g.alicdn.com/code/lib/lodash.js/4.17.21/lodash.min.js"></script>
      <script src="https://g.alicdn.com/code/lib/ramda/0.27.1/ramda.min.js"></script>
      <script src="https://g.alicdn.com/code/lib/moment.js/2.29.1/moment.min.js"></script>
      <script src="https://g.alicdn.com/code/lib/alifd__next/1.23.22/next.min.js"></script>
      <script>
        window.themeVars = ${JSON.stringify(getThemeVars())};
      </script>
      ${getHeadContent()}
    `;
    // if (multipleProps.themePackage) {
    //   files += `<link rel="stylesheet" type="text/css" href="https://unpkg.com/${multipleProps.themePackage}/dist/next.min.css"></link>`;
    // }

    return files;
  },
};
