export interface PropTypeDescriptor {
  name:
    | 'arrayOf'
    | 'custom'
    | 'enum'
    | 'array'
    | 'bool'
    | 'func'
    | 'number'
    | 'object'
    | 'string'
    | 'any'
    | 'element'
    | 'node'
    | 'symbol'
    | 'objectOf'
    | 'shape'
    | 'exact'
    | 'union'
    | 'elementType';
  value?: any;
  raw?: string;
  computed?: boolean;
  // These are only needed for shape/exact types.
  // Consider consolidating PropTypeDescriptor and PropDescriptor
  description?: string;
  required?: boolean;
}

export interface FlowBaseType {
  required?: boolean;
  nullable?: boolean;
  alias?: string;
}

export type FlowSimpleType = FlowBaseType & {
  name: string;
  raw?: string;
};

export type FlowLiteralType = FlowBaseType & {
  name: 'literal';
  value: string;
};

export type FlowElementsType = FlowBaseType & {
  name: string;
  raw: string;
  elements: FlowTypeDescriptor[];
};

export interface FlowFunctionArgumentType {
  name: string;
  type?: FlowTypeDescriptor;
  rest?: boolean;
}

export type FlowFunctionSignatureType = FlowBaseType & {
  name: 'signature';
  type: 'function';
  raw: string;
  signature: {
    arguments: FlowFunctionArgumentType[];
    return: FlowTypeDescriptor;
  };
};

export type TSFunctionSignatureType = FlowBaseType & {
  name: 'signature';
  type: 'function';
  raw: string;
  signature: {
    arguments: FlowFunctionArgumentType[];
    return: FlowTypeDescriptor;
    this?: FlowTypeDescriptor;
  };
};

export type FlowObjectSignatureType = FlowBaseType & {
  name: 'signature';
  type: 'object';
  raw: string;
  signature: {
    properties: Array<{
      key: string | FlowTypeDescriptor;
      value: FlowTypeDescriptor;
    }>;
    constructor?: FlowTypeDescriptor;
  };
};

export type FlowTypeDescriptor =
  | FlowSimpleType
  | FlowLiteralType
  | FlowElementsType
  | FlowFunctionSignatureType
  | FlowObjectSignatureType;

export interface PropDescriptor {
  type?: PropTypeDescriptor;
  flowType?: FlowTypeDescriptor;
  tsType?: FlowTypeDescriptor;
  required?: boolean;
  defaultValue?: any;
  description?: string;
}
export interface DocumentationObject {
  displayName: string;
  description: string;
  methods: { [key: string]: PropDescriptor };
  props: { [key: string]: PropDescriptor };
}
