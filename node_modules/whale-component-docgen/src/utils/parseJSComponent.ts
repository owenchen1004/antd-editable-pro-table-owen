import * as docgen from 'react-docgen';
import * as fs from 'fs-extra';
import { PropDescriptor, DocumentationObject } from './react-docgen';
import {
  WmPropItemType,
  WmUnionPropItemType,
  WmComponentDoc,
  WmProps,
  createWmPlainPropItemType,
} from 'whale-docgen-ts';

export const parseJSComponent = (componentPath: string) => {
  const re = docgen.parse(fs.readFileSync(componentPath));
  const docs = Array.isArray(re) ? re : [re];
  return docs.map((vo) => documentationObject2ComponentDoc(vo));
};

const generatePropType = (prop: PropDescriptor): WmPropItemType => {
  const type = prop.tsType || prop.flowType || prop.type;
  if (type && 'value' in type && Array.isArray(type.value)) {
    const typeDoc: WmUnionPropItemType = {
      name: 'union',
      raw:
        'raw' in type
          ? type.raw
          : type.value
              .map((typeValue) => typeValue.name || typeValue.value)
              .join(' | '),
      value: type.value.map((vo) => createWmPlainPropItemType(vo.value)),
    };
    return typeDoc;
  }
  return createWmPlainPropItemType(type?.name || 'unknown');
};

const documentationObject2ComponentDoc = ({
  props,
  displayName,
  description,
}: DocumentationObject): WmComponentDoc => ({
  meta: {
    exportName: displayName,
  },
  displayName,
  description,
  props: Object.keys(props).reduce<WmProps>((p, name) => {
    const prop = props[name];
    p[name] = {
      name,
      required: !!prop.required,
      type: generatePropType(prop),
      description: prop.description || '',
      defaultValue: prop.defaultValue || '',
    };
    return p;
  }, {}),
  methods: [],
});
