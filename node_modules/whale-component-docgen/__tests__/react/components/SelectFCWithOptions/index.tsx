import * as React from 'react';

interface Options {
  /**
   * 传入的数据源，可以动态渲染子项
   * @default []
   */
  dataSource: string[];
  /**
   * Select发生改变时触发的回调
   */
  onChange?: (item: string) => void;
  /**
   * 是否只读，只读模式下可以展开弹层但不能选
   * @default false
   */
  readOnly?: boolean;
  /**
   * 选择器尺寸
   */
  size?: 'small' | 'medium' | 'large';
}
export interface ISelectProps {
  /**
   * 传入的数据源，可以动态渲染子项
   *
   * 当前值，用于受控模式
   *
   * ```ts
   * const a = () => 1;
   * ```
   *
   * @example
   * 参考[表格示例](#container_table)
   */
  dataSource: string[];
  /**
   * Select发生改变时触发的回调
   */
  onChange?: (item: string) => void;
  /**
   * 是否只读，只读模式下可以展开弹层但不能选
   */
  readOnly?: boolean;
  /**
   * 选择器尺寸
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * 当前值，用于受控模式
   */
  value?: string | number | boolean;
  /**
   * 配置项
   *
   * @example
   *
   * ``` tsx
   * <Select options={{
   *   readOnly: false,
   * }} />
   * ```
   */
  options?: Options;

  /**
   * 多类型配置项
   * ``` tsx
   * <Select options={{
   *   readOnly: false,
   * }} />
   * ```
   */
  unionOptions?: 'Options1' | string[] | { a: string } | Options;
}

/**
 * 选择器
 */
const Select: React.FC<ISelectProps> = () => {
  return <div>Test</div>;
};

Select.defaultProps = {
  readOnly: false,
  size: 'medium',
  options: {
    dataSource: [],
    readOnly: false,
    size: 'large',
  },
};

interface ISelectGroupProps {
  /**
   * 是否只读，只读模式下可以展开弹层但不能选
   * @default false
   */
  readOnly?: boolean;
}
const SelectGroup: React.FC<ISelectGroupProps> = () => {
  return <div>SelectGroup</div>;
};

Object.assign(Select, {
  SelectGroup,
});

export default Select;
