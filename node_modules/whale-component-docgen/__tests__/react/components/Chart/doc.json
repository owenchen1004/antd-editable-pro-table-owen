[
  {
    "description": "",
    "displayName": "Chart",
    "methods": [],
    "props": {
      "event": {
        "description": "事件",
        "name": "event",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": true,
        "type": {
          "name": "object",
          "raw": "IEvent",
          "value": {
            "target": {
              "description": "触发的对象，图形或者 Canvas 对象",
              "name": "target",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IEvent"
              },
              "required": false,
              "type": {
                "name": "plain",
                "raw": "any"
              }
            },
            "view": {
              "description": "当前 target 所属的 view",
              "name": "view",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IEvent"
              },
              "required": false,
              "type": {
                "name": "plain",
                "raw": "\"View\""
              }
            },
            "gEvent": {
              "description": "从底层 G 的绘图层抛出来的事件，详情参考：G 的事件详解",
              "name": "gEvent",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IEvent"
              },
              "required": false,
              "type": {
                "name": "plain",
                "raw": "any"
              }
            },
            "event": {
              "description": "dom 层的事件",
              "name": "event",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IEvent"
              },
              "required": false,
              "type": {
                "name": "plain",
                "raw": "any"
              }
            },
            "x": {
              "description": "触发的位置 x，相对于画布左上角的位置",
              "name": "x",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IEvent"
              },
              "required": false,
              "type": {
                "name": "plain",
                "raw": "number"
              }
            },
            "y": {
              "description": "触发的位置 y，相对于画布左上角的位置",
              "name": "y",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IEvent"
              },
              "required": false,
              "type": {
                "name": "plain",
                "raw": "number"
              }
            },
            "clientX": {
              "description": "视窗的位置 x",
              "name": "clientX",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IEvent"
              },
              "required": false,
              "type": {
                "name": "plain",
                "raw": "number"
              }
            },
            "clientY": {
              "description": "视窗的位置 y",
              "name": "clientY",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IEvent"
              },
              "required": false,
              "type": {
                "name": "plain",
                "raw": "number"
              }
            },
            "type": {
              "description": "事件名",
              "name": "type",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IEvent"
              },
              "required": false,
              "type": {
                "name": "plain",
                "raw": "string"
              }
            }
          }
        }
      },
      "baseGemoProps": {
        "description": "注释描述",
        "name": "baseGemoProps",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": true,
        "type": {
          "name": "object",
          "raw": "IBaseGemoProps",
          "value": {
            "position": {
              "description": "图形数据坐标",
              "name": "position",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": true,
              "type": {
                "name": "plain",
                "raw": "string"
              }
            },
            "color": {
              "description": "@example ```typescript\n// data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n<Geomy color={{\n  fields: [ 'x' ],\n  values: [ '#1890ff', '#5AD8A6' ],\n}} />;\n\n// 使用 '#1890ff' 颜色渲染图形\n<Geom color=\"#1890ff\" />\n\n// 根据 x 字段的数据值进行颜色的映射，这时候会在内部调用默认的回调函数，读取默认提供的颜色进行数据值到颜色值的映射。\n<Geom color=\"x\" />\n\n// 将 'x' 字段的数据值映射至指定的颜色值 colors（可以是字符串也可以是数组），此时用于通常映射分类数据\n<Geom color={['x', [ '#1890ff', '#5AD8A6' ]]} />\n\n// 使用回调函数进行颜色值的自定义；可以使用多个字段使用、*号连接\n<Geom color={['x', (xVal) => {\n  if (xVal === 'a') {\n    return 'red';\n  }\n  return 'blue';\n}]} />\n\n// 指定颜色的渐变路径，用于映射连续的数据\n<Geom color={['x', '#BAE7FF-#1890FF-#0050B3']} />\n```\n@memberof IBaseGemo",
              "name": "color",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": false,
              "type": {
                "name": "union",
                "raw": "string | [string, string | string[]]",
                "value": [
                  {
                    "name": "plain",
                    "raw": "string"
                  },
                  {
                    "name": "array",
                    "raw": "[string, string | string[]]",
                    "value": [
                      {
                        "name": "plain",
                        "raw": "string"
                      },
                      {
                        "name": "union",
                        "raw": "string | string[]",
                        "value": [
                          {
                            "name": "plain",
                            "raw": "string"
                          },
                          {
                            "name": "array",
                            "raw": "string[]",
                            "value": [
                              {
                                "name": "plain",
                                "raw": "string"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            "shape": {
              "description": "@example ```typescript\n// data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n\n// 指定常量，将所有数据值映射到固定的 shape\n<Geom shape=\"circle\" />\n\n// 将指定的字段映射到内置的 shapes 数组中\n<Geom shape=\"x\" />\n\n// 将指定的字段映射到指定的 shapes 数组中\n<Geom shape={['x', [ 'circle', 'diamond', 'square' ]]} />\n\n// 使用回调函数获取 shape，用于个性化的 shape 定制，可以根据单个或者多个字段确定\n<Geom shape={[\n  'x',\n  (xVal) => {\n    if (xVal === 'a') {\n      return 'circle';\n    }\n    return 'diamond';\n  }\n]} />\n```\n@memberof IBaseGemo",
              "name": "shape",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": false,
              "type": {
                "name": "union",
                "raw": "string | [string, string[] | \"ShapeAttrCallback\"]",
                "value": [
                  {
                    "name": "plain",
                    "raw": "string"
                  },
                  {
                    "name": "array",
                    "raw": "[string, string[] | \"ShapeAttrCallback\"]",
                    "value": [
                      {
                        "name": "plain",
                        "raw": "string"
                      },
                      {
                        "name": "union",
                        "raw": "string[] | \"ShapeAttrCallback\"",
                        "value": [
                          {
                            "name": "array",
                            "raw": "string[]",
                            "value": [
                              {
                                "name": "plain",
                                "raw": "string"
                              }
                            ]
                          },
                          {
                            "name": "plain",
                            "raw": "\"ShapeAttrCallback\""
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            "size": {
              "description": "@example ```typescript\n// data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n\n// 直接指定像素大小\n<Geom size={10} />\n\n// 指定映射到 size 的字段，使用内置的默认大小范围为 [1, 10]\n<Geom size=\"x\" />\n\n// 指定映射到 size 字段外，还提供了 size 的最大值和最小值范围\n<Geom size={['x', [ 5, 30 ]]} />\n\n// 使用回调函数映射 size，用于个性化的 size 定制，可以使用多个字段进行映射\n<Geom size={['x', (xVal) => {\n  if (xVal === 'a') {\n    return 10;\n  }\n  return 5;\n}]} />\n```\n@memberof IBaseGemo",
              "name": "size",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": false,
              "type": {
                "name": "union",
                "raw": "string | number | [string, \"SizeAttrCallback\" | SizeRange]",
                "value": [
                  {
                    "name": "plain",
                    "raw": "string"
                  },
                  {
                    "name": "plain",
                    "raw": "number"
                  },
                  {
                    "name": "array",
                    "raw": "[string, \"SizeAttrCallback\" | SizeRange]",
                    "value": [
                      {
                        "name": "plain",
                        "raw": "string"
                      },
                      {
                        "name": "union",
                        "raw": "\"SizeAttrCallback\" | SizeRange",
                        "value": [
                          {
                            "name": "plain",
                            "raw": "\"SizeAttrCallback\""
                          },
                          {
                            "name": "array",
                            "raw": "SizeRange",
                            "value": [
                              {
                                "name": "plain",
                                "raw": "number"
                              },
                              {
                                "name": "plain",
                                "raw": "number"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            "adjust": {
              "description": "设置数据调整方式。G2 目前内置了四种类型：\n1. dodge\n2. stack\n3. symmetric\n4. jitter\n\n**Tip**\n+ 对于 'dodge' 类型，可以额外进行如下属性的配置:\n```typescript\n<Geom adjust={['dodge', {\n  marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\n  dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\n}]}\n```\n\n+ 对于 'stack' 类型，可以额外进行如下属性的配置:\n```typescript\n<Geom adjust={{\n  type: 'stack',\n  reverseOrder: false, // 用于控制是否对数据进行反序操作\n}} />\n```\n@example ```typescript\n<Geom adjust=\"stack\" />\n\n<Geom adjust={{\n  type: 'stack',\n  reverseOrder: false,\n}} />\n\n// 组合使用 adjust\n<Geom adjust={[\n  { type: 'stack' },\n  { type: 'dodge', dodgeBy: 'x' },\n]} />\n```\n@memberof IBaseGemo",
              "name": "adjust",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": false,
              "type": {
                "name": "union",
                "raw": "string | \"AdjustOption\"[]",
                "value": [
                  {
                    "name": "plain",
                    "raw": "string"
                  },
                  {
                    "name": "array",
                    "raw": "\"AdjustOption\"[]",
                    "value": [
                      {
                        "name": "plain",
                        "raw": "\"AdjustOption\""
                      }
                    ]
                  }
                ]
              }
            },
            "style": {
              "description": "图形样式配置。\n@example ```typescript\n// 配置图形样式\n<Geom style={{\n  lineWidth: 2,\n  stroke: '#1890ff',\n}} />\n\n// 根据具体的数据进行详细配置\n<Geom style={{\n  fields: [ 'x', 'y' ], // 数据字段\n  callback: (xVal, yVal) => {\n    const style = { lineWidth: 2, stroke: '#1890ff' };\n    if (xVal === 'a') {\n      style.lineDash = [ 2, 2 ];\n    }\n    return style;\n  },\n}} />\n```\n```typescript\n// 根据具体的数据进行详细配置 [FieldString, StyleCallback]\n<Geom style={['x*y', (xVal, yVal) => {\n  const style = { lineWidth: 2, stroke: '#1890ff' };\n  if (xVal === 'a') {\n    style.lineDash = [ 2, 2 ];\n  }\n  return style;\n}]} />\n```\n@memberof IBaseGemo",
              "name": "style",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": false,
              "type": {
                "name": "union",
                "raw": "\"StyleOption\" | \"LooseObject\" | [string, \"StyleCallback\"]",
                "value": [
                  {
                    "name": "plain",
                    "raw": "\"StyleOption\""
                  },
                  {
                    "name": "plain",
                    "raw": "\"LooseObject\""
                  },
                  {
                    "name": "array",
                    "raw": "[string, \"StyleCallback\"]",
                    "value": [
                      {
                        "name": "plain",
                        "raw": "string"
                      },
                      {
                        "name": "plain",
                        "raw": "\"StyleCallback\""
                      }
                    ]
                  }
                ]
              }
            },
            "tooltip": {
              "description": "配置 Geometry 显示的 tooltip 内容。\n\n`tooltip={false}` 代表关闭 tooltip。\n`tooltip={true}` 代表开启 tooltip。\n\nGeometry 默认允许 tooltip 展示，我们可以使用以下方法对 tooltip 的展示内容进行配置：\n@example ```typescript\n// data: [{x: 'a', y: 10}]\n<Geom tooltip=\"x\" />\n```\n\n```typescript\n<Geom tooltip={{\n  fields: [ 'x', 'y' ],\n}} />\n```\n方法同样支持数据映射及回调用法：\n@example ```typescript\n<Tooltip itemTpl=\"<li>{x}: {y}</li>\" />\n\n<Line tooltip={{\n    fields: [ 'x', 'y' ],\n    callback: (x, y) => {\n      return {\n        x,\n        y,\n      };\n    },\n  }} />\n// 等同于\n<Line tooltip={['x*y', (x, y) => {\n      return {\n        x,\n        y,\n      };\n    }]} />\n\n其返回的值必须为对象，该值中的属性同 Tooltip 的 itemTpl 模板相对应，返回的变量可用于 itemTpl 的字符串模板。\n@memberof IBaseGemo",
              "name": "tooltip",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": false,
              "type": {
                "name": "union",
                "raw": "string | boolean | [string, \"TooltipCallback\"]",
                "value": [
                  {
                    "name": "plain",
                    "raw": "string"
                  },
                  {
                    "name": "plain",
                    "raw": "false"
                  },
                  {
                    "name": "plain",
                    "raw": "true"
                  },
                  {
                    "name": "array",
                    "raw": "[string, \"TooltipCallback\"]",
                    "value": [
                      {
                        "name": "plain",
                        "raw": "string"
                      },
                      {
                        "name": "plain",
                        "raw": "\"TooltipCallback\""
                      }
                    ]
                  }
                ]
              }
            },
            "animate": {
              "description": "Geometry 动画配置。\n\n+ `<Geom animate={false} />` 关闭动画\n+ `<Geom animate />` 开启动画，默认开启。\n\n我们将动画分为四个场景：\n1. appear: 图表第一次加载时的入场动画；\n2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\n3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\n4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\n@example ```typescript\n<Geom animate={{\n  enter: {\n    duration: 1000, // enter 动画执行时间\n  },\n  leave: false, // 关闭 leave 销毁动画\n}} />;\n```\n@memberof IBaseGemo",
              "name": "animate",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": false,
              "type": {
                "name": "union",
                "raw": "boolean | \"AnimateOption\"",
                "value": [
                  {
                    "name": "plain",
                    "raw": "false"
                  },
                  {
                    "name": "plain",
                    "raw": "true"
                  },
                  {
                    "name": "plain",
                    "raw": "\"AnimateOption\""
                  }
                ]
              }
            },
            "label": {
              "description": "Geometry label 配置。\n@example ```ts\n// data: [ {x: 1, y: 2, z: 'a'}, {x: 2, y: 2, z: 'b'} ]\n// 在每个图形上显示 z 字段对应的数值\nlabel({\n  fields: [ 'z' ]\n});\n\nlabel(false); // 不展示 label\n\n// 在每个图形上显示 x 字段对应的数值，同时配置文本颜色为红色\nlabel('x', {\n  style: {\n    fill: 'red',\n  },\n})\n\n// 以 type 类型的 label 渲染每个图形上显示 x 字段对应的数值，同时格式化文本内容\nlabel('x', (xValue) => {\n  return {\n    content: xValue + '%',\n  };\n}, {\n  type: 'base' // 声明 label 类型\n})\n```\n@memberof IBaseGemo",
              "name": "label",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": false,
              "type": {
                "name": "union",
                "raw": "string | false | [string, \"GeometryLabelCfg\" | \"LabelCallback\"] | [string, \"LabelCallback\", \"GeometryLabelCfg\"]",
                "value": [
                  {
                    "name": "plain",
                    "raw": "string"
                  },
                  {
                    "name": "plain",
                    "raw": "false"
                  },
                  {
                    "name": "array",
                    "raw": "[string, \"GeometryLabelCfg\" | \"LabelCallback\"]",
                    "value": [
                      {
                        "name": "plain",
                        "raw": "string"
                      },
                      {
                        "name": "union",
                        "raw": "\"GeometryLabelCfg\" | \"LabelCallback\"",
                        "value": [
                          {
                            "name": "plain",
                            "raw": "\"GeometryLabelCfg\""
                          },
                          {
                            "name": "plain",
                            "raw": "\"LabelCallback\""
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": "array",
                    "raw": "[string, \"LabelCallback\", \"GeometryLabelCfg\"]",
                    "value": [
                      {
                        "name": "plain",
                        "raw": "string"
                      },
                      {
                        "name": "plain",
                        "raw": "\"LabelCallback\""
                      },
                      {
                        "name": "plain",
                        "raw": "\"GeometryLabelCfg\""
                      }
                    ]
                  }
                ]
              }
            },
            "state": {
              "description": "设置状态对应的样式。\n@example ```ts\n<Geom state={{\n  selected: {\n    animate: { duration: 100, easing: 'easeLinear' },\n    style: {\n      lineWidth: 2,\n      stroke: '#000',\n    },\n  },\n}} />\n```\n\n如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\n如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\n\n```ts\n<Geom state={{\n  selected: {\n    style: {\n      0: { lineWidth: 2 },\n      1: { fillOpacity: 1 },\n    }\n  }\n}} />\n```\n@memberof IBaseGemo",
              "name": "state",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": false,
              "type": {
                "name": "plain",
                "raw": "\"StateOption\""
              }
            },
            "setElements": {
              "description": "用来设置默认选中的图形元素，或者做条件样式。\n在图表绘制后执行。\n<Geom setElements={(elements) => {\n  elements.forEach(ele => {\n    const data = elements.data;\n    if (data.id = 'xx') {\n      ele.setState('selected', true); // 默认选中\n    }\n  })\n }} />\n@memberof IBaseGemoProps",
              "name": "setElements",
              "parent": {
                "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
                "name": "IBaseGemoProps"
              },
              "required": false,
              "type": {
                "name": "function",
                "raw": "(elements: Element[]) => void"
              }
            }
          }
        }
      },
      "padding": {
        "description": "设置图表的内边距，使用方式参考 CSS 盒模型。\n下图黄色区域即为 padding 的范围。\n![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*pYwiQrdXGJ8AAAAAAAAAAABkARQnAQ)\n@example 1. padding: 20\n2. padding: [ 10, 30, 30 ]",
        "name": "padding",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "plain",
          "raw": "\"ViewPadding\""
        }
      },
      "container": {
        "description": "指定 chart 绘制的 DOM，可以传入 DOM id，也可以直接传入 dom 实例。",
        "name": "container",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "object",
          "raw": "HTMLElement",
          "value": {}
        }
      },
      "width": {
        "description": "图表宽度。",
        "name": "width",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "plain",
          "raw": "number"
        }
      },
      "height": {
        "description": "图表高度。",
        "name": "height",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "plain",
          "raw": "number"
        }
      },
      "autoFit": {
        "description": "图表是否自适应容器宽高，默认为 false，用户需要手动设置 width 和 height。\n当 `autoFit: true` 时，会自动取图表容器的宽高，如果用户设置了 height，那么会以用户设置的 height 为准。",
        "name": "autoFit",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "plain",
          "raw": "boolean"
        }
      },
      "pixelRatio": {
        "description": "设置设备像素比，默认取浏览器的值 `window.devicePixelRatio`。",
        "name": "pixelRatio",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "plain",
          "raw": "number"
        }
      },
      "localRefresh": {
        "description": "是否开启局部刷新，默认开启。",
        "name": "localRefresh",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "plain",
          "raw": "boolean"
        }
      },
      "visible": {
        "description": "chart 是否可见，默认为 true，设置为 false 则会隐藏。",
        "name": "visible",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "plain",
          "raw": "boolean"
        }
      },
      "defaultInteractions": {
        "description": "配置图表默认交互，仅支持字符串形式。",
        "name": "defaultInteractions",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "array",
          "raw": "string[]",
          "value": [
            {
              "name": "plain",
              "raw": "string"
            }
          ]
        }
      },
      "limitInPlot": {
        "description": "是否对超出坐标系范围的 Geometry 进行剪切",
        "name": "limitInPlot",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "plain",
          "raw": "boolean"
        }
      },
      "theme": {
        "description": "主题",
        "name": "theme",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "union",
          "raw": "string | Record<string, any>",
          "value": [
            {
              "name": "plain",
              "raw": "string"
            },
            {
              "name": "object",
              "raw": "Record<string, any>",
              "value": {}
            }
          ]
        }
      },
      "pure": {
        "description": "",
        "name": "pure",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IChartProps"
        },
        "required": false,
        "type": {
          "name": "plain",
          "raw": "boolean"
        }
      },
      "data": {
        "description": "数据源配置。",
        "name": "data",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IViewProps"
        },
        "required": false,
        "type": {
          "name": "array",
          "raw": "any[]",
          "value": [
            {
              "name": "plain",
              "raw": "any"
            }
          ]
        }
      },
      "scale": {
        "description": "列定义配置，用于配置数值的类型等，以 data 中的数据属性为 key。",
        "name": "scale",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IViewProps"
        },
        "required": false,
        "type": {
          "name": "object",
          "raw": "{ [field: string]: \"ScaleOption\"; }",
          "value": {}
        }
      },
      "region": {
        "description": "view 的绘制范围，起始点为左上角。",
        "name": "region",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IViewProps"
        },
        "required": false,
        "type": {
          "name": "object",
          "raw": "{ start?: string | number; end?: string | number; }",
          "value": {
            "start": {
              "description": "",
              "name": "start",
              "required": false,
              "type": {
                "name": "union",
                "raw": "string | number",
                "value": [
                  {
                    "name": "plain",
                    "raw": "string"
                  },
                  {
                    "name": "plain",
                    "raw": "number"
                  }
                ]
              }
            },
            "end": {
              "description": "",
              "name": "end",
              "required": false,
              "type": {
                "name": "union",
                "raw": "string | number",
                "value": [
                  {
                    "name": "plain",
                    "raw": "string"
                  },
                  {
                    "name": "plain",
                    "raw": "number"
                  }
                ]
              }
            }
          }
        }
      },
      "filter": {
        "description": "@memberof IView\n设置数据筛选规则。\n\n```ts\n3.x 写法\n<View filter={[\n['city', (value: any, datum: Datum) => value !== '杭州'],\n['value', (value: any, datum: Datum) => value > 100]\n]} />\n\n<View filter={{\n'city': (value: any, datum: Datum) => value !== '杭州'],\n'value': (value: any, datum: Datum) => value > 100],\n}} />\n\n// 删除 'city' 字段对应的筛选规则。\n<View filter={{\n'city': null\n}} />\n```\n@param filter [string, null | ((value: any, datum: Datum) => boolean)][] 或者 Record<string, (value: any, datum: Datum) => boolean>",
        "name": "filter",
        "parent": {
          "fileName": "whale-component-docgen/__tests__/react/components/Chart/types.ts",
          "name": "IViewProps"
        },
        "required": false,
        "type": {
          "name": "union",
          "raw": "[string, (value: any, datum: \"Datum\") => boolean][] | Record<string, (value: any, datum: \"Datum\") => boolean>",
          "value": [
            {
              "name": "array",
              "raw": "[string, (value: any, datum: \"Datum\") => boolean][]",
              "value": [
                {
                  "name": "array",
                  "raw": "[string, (value: any, datum: \"Datum\") => boolean]",
                  "value": [
                    {
                      "name": "plain",
                      "raw": "string"
                    },
                    {
                      "name": "function",
                      "raw": "(value: any, datum: \"Datum\") => boolean"
                    }
                  ]
                }
              ]
            },
            {
              "name": "object",
              "raw": "Record<string, (value: any, datum: \"Datum\") => boolean>",
              "value": {}
            }
          ]
        }
      }
    },
    "meta": {
      "exportName": "Chart"
    }
  }
]
