import * as path from 'path';
import { whaleDocgen, whaleParse } from '../src/index';

const resolveComponent = (...args: string[]) =>
  path.resolve(__dirname, 'react', 'components', ...args);

const resolveBlocks = (...args: string[]) =>
  path.resolve(__dirname, 'react', 'blocks', ...args);
describe('whaleDocgen', () => {
  it('whaleDocgen package.json', () => {
    const content = whaleDocgen(resolveComponent('Select', 'package.json'));
    expect(content).toMatchSnapshot();
  });

  it('whaleDocgen README.md', () => {
    const content = whaleDocgen(resolveComponent('Select', 'README.md'));
    console.log(content);

    expect(content).toMatchSnapshot();
  });
  it('should supports js/jsx', () => {
    const content = whaleDocgen(resolveComponent('jsx', 'src', 'index.jsx'));
    expect(content).toMatchSnapshot();
  });

  it('should supports ts/tsx', () => {
    const content = whaleDocgen(resolveComponent('Select', 'src', 'index.ts'));
    expect(content).toMatchSnapshot();
  });
  it('componentName from package.json', () => {
    const content = whaleDocgen(resolveComponent('SelectFC', 'package.json'));
    expect(content).toMatch('## SelectFromComponentConfig');
  });
  it('throwError', () => {
    expect(() => {
      whaleDocgen(resolveComponent('Select', 'src', 'index.css'));
    }).toThrowError('extname of source is not allowed.');
  });

  it('whaleDocgen block package.json', () => {
    const content = whaleDocgen(resolveBlocks('FooterButtons', 'package.json'));
    expect(content).toMatchSnapshot();
  });

  it('whaleParse filterReact', () => {
    const content = whaleParse(
      resolveComponent('SelectFCExtendsDiv', 'index.tsx'),
      {
        ingoreFileNames: ['@types/react', '@types/rax', 'typescript/lib'],
      }
    );
    expect(content).toMatchSnapshot();
  });
});
