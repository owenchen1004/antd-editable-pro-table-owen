"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.whaleDocgen = exports.whaleParse = void 0;
const tslib_1 = require("tslib");
const path = require("path");
const vfile = require("to-vfile");
const remark = require("remark");
const reactDocgenTypescript = require("remark-react-docgen-typescript");
const emoji = require("remark-emoji");
const mdast_builder_1 = require("mdast-builder");
const stringWidth = require("string-width");
const parseTSComponent_1 = require("./utils/parseTSComponent");
const parseJSComponent_1 = require("./utils/parseJSComponent");
const fs = require("fs-extra");
const getMainPath_1 = require("./utils/getMainPath");
const renderPackageJSON_1 = require("./render/renderPackageJSON");
const whale_docgen_ts_1 = require("whale-docgen-ts");
const renderComponentDoc_1 = require("./render/renderComponentDoc");
tslib_1.__exportStar(require("./utils/parseTSComponent"), exports);
tslib_1.__exportStar(require("./utils/parseJSComponent"), exports);
tslib_1.__exportStar(require("./types"), exports);
/**
 * 解析文件返回组件属性描述JSON
 */
const whaleParse = (source, options) => {
    var _a;
    const extname = path.extname(source);
    if (extname === '.json') {
        const componentPath = getMainPath_1.getMainPath(source);
        const packageJSON = fs.readJSONSync(source);
        return exports.whaleParse(componentPath, Object.assign({ defaultComponentName: (_a = packageJSON.componentConfig) === null || _a === void 0 ? void 0 : _a.name }, options));
    }
    else if (extname === '.tsx' || extname === '.ts') {
        const typeFilter = (options === null || options === void 0 ? void 0 : options.ingoreFileNames)
            ? (prop) => {
                var _a;
                const fileName = (_a = prop === null || prop === void 0 ? void 0 : prop.parent) === null || _a === void 0 ? void 0 : _a.fileName;
                if (!fileName) {
                    return true;
                }
                return !options.ingoreFileNames.some((vo) => fileName.includes(vo));
            }
            : undefined;
        return parseTSComponent_1.parseTSComponent(source, {
            typeFilter,
            propFilter: typeFilter,
            typeLevel: options === null || options === void 0 ? void 0 : options.typeLevel,
            componentNameResolver: (exp) => {
                if ((options === null || options === void 0 ? void 0 : options.defaultComponentName) && parseTSComponent_1.isExportDefault(exp.getName())) {
                    return options.defaultComponentName;
                }
                return undefined;
            },
        });
    }
    else if (extname === '.jsx' || extname === '.js') {
        return parseJSComponent_1.parseJSComponent(source);
    }
    return null;
};
exports.whaleParse = whaleParse;
/**
 * 解析文件返回组件markdown文档
 */
const whaleDocgen = (source, options) => {
    const extname = path.extname(source);
    const baseProcessor = remark()
        .use(emoji)
        .use({
        settings: { stringLength: stringWidth },
    });
    if (extname === '.json') {
        const packageJSON = fs.readJSONSync(source);
        const docs = exports.whaleParse(source, Object.assign(Object.assign({}, options), { typeLevel: 0 }));
        return baseProcessor.stringify(mdast_builder_1.root([
            ...renderPackageJSON_1.renderPackageJSON(packageJSON, source),
            ...(docs ? renderComponentDoc_1.renderComponentDocs(docs) : []),
        ]));
    }
    else if (extname === '.md') {
        return baseProcessor
            .use(reactDocgenTypescript, {
            fileParser: whale_docgen_ts_1.withDefaultConfig(parseTSComponent_1.defaultParserOptions),
            render: (docs) => mdast_builder_1.root(renderComponentDoc_1.renderComponentDocs(docs)),
        })
            .processSync(vfile.readSync(source))
            .contents.toString();
    }
    const docs = exports.whaleParse(source, Object.assign(Object.assign({}, options), { typeLevel: 1 }));
    if (docs) {
        return baseProcessor.stringify(mdast_builder_1.root(renderComponentDoc_1.renderComponentDocs(docs)));
    }
    throw new Error('extname of source is not allowed.');
};
exports.whaleDocgen = whaleDocgen;
tslib_1.__exportStar(require("whale-docgen-ts"), exports);
//# sourceMappingURL=index.js.map