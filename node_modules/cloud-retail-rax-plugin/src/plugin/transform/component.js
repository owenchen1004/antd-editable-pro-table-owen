const componentMap = require('./componentMap');

const Tags = new Set();
const FusionTags = new Set();

function generate(arr) {
  if (Array.isArray(arr)) {
    arr.forEach(i => {
      if (i.type === 'tag') {
        const name = i.name.split('.')[0];
        if (name.includes('Fusion')) {
          componentMap[name] && FusionTags.add(name);
        } else {
          Tags.add(name);
        }
      }
      if (i.children && i.children.length > 0) {
        generate(i.children);
      }
    })
  }
}


module.exports = {
  generateComponent: function (ast) {
    generate(ast);
    const fusionText = FusionTags.size > 0 ? `import {${Array.from(FusionTags).map(i => componentMap[i]).join(',')}} from '@alifd/meet'\n` : ''
    return Array.from(Tags).map(i => componentMap[i]).join('\n') + fusionText;
  },
  impFusionCss: function (ast) {
    return Array.from(Tags).some(v => v.includes('Fusion'));
  },
  generateImport: function (ast) {
    const text = [];
    const exg = /^(\@ali|\@halofe|rax|\.|bizcharts)/;
    function generateTag(arr) {
      if (Array.isArray(arr)) {
        arr.forEach(i => {
          if (i.type === 'tag' && i.name === 'Import') {
            if (exg.test(i.attribs.path)) {
              text.push(`import ${i.attribs.name} from '${i.attribs.path}'`);
            } else {
              console.warn(`不允许引入非 ${exg.toString()} 开头的依赖`);
            }
          }
          if (i.type === 'tag' && i.attribs['x-name'] && i.attribs['x-path']) {
            if (exg.test(i.attribs['x-path'])) {
              text.push(`import ${i.attribs['x-name']} from '${i.attribs['x-path']}'`);
            } else {
              console.warn(`不允许引入非 ${exg.toString()} 开头的依赖`);
            }
          }
          if (i.children && i.children.length > 0) {
            generateTag(i.children);
          }
        })
      }
    }
    generateTag(ast);
    return text.join('\n');
  },
}
