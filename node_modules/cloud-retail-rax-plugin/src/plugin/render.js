const { declare } = require('@babel/helper-plugin-utils');
const getValue = require('lodash/get');
const core = require('@babel/core');
const path = require('path');
const fs = require('fs');
const t = core.types;

const getViewNum = (name) => { // name = 'View1'
  let num = name.replace('View', '');
  num = num === '' ? '0' : num;
  num = parseInt(num, 10);
  return num;
};

module.exports = declare((api, /*options*/) => {
  const ViewReg = /^View(\d+)?$/;  
  return {
    name: 'cz5-vm',
    visitor: {
      Program(pluginPath) {
        const namedViews = [];
        const dirPath = path.dirname(this.filename);
        if (!fs.existsSync(path.join(dirPath, 'index.xml')) && !fs.existsSync(path.join(dirPath, 'index.rxml'))) {
          return;
        }
        let ViewName = 'View'; // 要插入的 View 变量值
        pluginPath.traverse({ // 计算 View 的变量值
          Identifier: (childPath) => { // 排除用户已经命名的变量值
            if (ViewReg.test(childPath.node.name)) {
              let index = 0;
              for (let len = namedViews.length, i = 0; i < len; i++) {
                const name = namedViews[i];
                const nameNum = getViewNum(name);
                const newNum = getViewNum(childPath.node.name);
                if (newNum > nameNum) {
                  index += 1;
                  continue;
                }
                break;
              }
              namedViews.splice(index, 0, childPath.node.name);
              ViewName = `View${getViewNum(namedViews[namedViews.length - 1]) + 1}`;
            }
          },
        });
        // 插入 View
        const insetImportIndex = pluginPath.node.body.filter(node => node.type === 'ImportDeclaration').length;
        let ast = '';
        if (fs.existsSync(path.join(dirPath, 'index.xml'))) {
          ast = api.template(`import ${ViewName} from './index.xml';`)();
        } else if (fs.existsSync(path.join(dirPath, 'index.rxml'))) {
          ast = api.template(`import ${ViewName} from './index.rxml';`)();
        }
        const ast1 = api.template(`import { createElement } from 'rax';`)();
        pluginPath.node.body.splice(insetImportIndex, 0, ast);
        pluginPath.node.body.splice(insetImportIndex, 0, ast1);

        // 查找 export default
        pluginPath.traverse({
          Identifier: (childPath) => {
            const isComponent = !!(() => {
              if (childPath.parentPath.type !== 'ClassDeclaration') {
                return false;
              }
              const classDeclaration = childPath.parentPath.node;
              if (!classDeclaration.superClass) {
                return false;
              }
              if (!classDeclaration.body || classDeclaration.body.type !== 'ClassBody') {
                return false;
              }
              if(classDeclaration.superClass === childPath.node) { // 过滤 class Demo extends Component{} 中的 Component
                return false;
              }
              return true;
            })();
  
            if (!isComponent) { // 判断是否为 Component
              return;
            }

            const isExportDefault = !!(() => {
              // 匹配 export default Class Demo extends Component {}
              if (getValue(childPath, 'parentPath.parentPath.node.type') === 'ExportDefaultDeclaration') { 
                return true;
              }
              const name = childPath.node.name;
              const referencePaths = getValue(childPath, `scope.bindings.${name}.referencePaths`) || [];

              // 匹配 export default Demo;
              for(let i = 0, len = referencePaths.length; i < len; i++) {
                const ref = referencePaths[i];
                if (ref.parentPath.node.type === 'ExportDefaultDeclaration') {
                  return true;
                }
              }
            })();

            if (isExportDefault === false) { // 判断是否被 exportDefault
              return;
            }

            // 开始操作
            const body = childPath.parentPath.node.body.body;
            let hasRender = false;
            for (let len = body.length, i = 0; i < len; i++) {
              const property = body[i];
              if (property.key && property.key.type === 'Identifier' && property.key.name === 'render') {
                hasRender = true;
                break;
              }
            }
            if (hasRender === true) { // 如果用户自定义了 render 函数，则不再操作
              return;
            }
    
            // 插入 render 方法
            const ast = api.template(`{
              const { fields, children } = this.props;
              const data = typeof (this.getData) === 'function' ? this.getData() : {};
              const method = typeof (this.getMethod) === 'function' ? this.getMethod() : {};
              return <${ViewName} fields={fields||{}} method={method} data={data}>{children}</${ViewName}>;
            }`,
            { plugins: [
              'jsx',
            ] })();
            body.push(
              t.classMethod('method', t.identifier('render'), [], ast, false, false),
            );
          }
        });
      },
    },
  };
});
