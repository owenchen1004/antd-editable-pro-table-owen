const parser = require('./parser');
const transObj = require('./transform/component');
const path = require('path');
const {
  getOptions
} = require('loader-utils');


module.exports = function (content) {
  content = content.trim();
  // 支持注释
  content = content.replace(/\<\!--(\s|\S)+?--\>/g, '')
  const options = getOptions(this) || {};
  const next = this.async();
  const filePath = this.resourcePath;
  const fileExt = path.extname(filePath);
  let otherHub = [];
  let otherKey = [];
  if (options.customImport && options.customImport.length) {
    otherHub = otherHub.concat(options.customImport.map(i => `import ${i.key} from '${i.path}'`));
    otherKey = otherKey.concat(options.customImport.map(i => i.key));
  }

  parser(content)
    .then((ast) => {
      content = content.replace(/\<Import([^>])+\/\>/g, '');
      if ((fileExt === '.xml' || fileExt === '.rxml') && content && content.length > 0 && content.indexOf('sandbox') === -1 && content.indexOf('createElement') === -1) {
          const componentImport = transObj.generateComponent(ast);
          const customImport = transObj.generateImport(ast);
          const output = `
          ${componentImport}
          ${customImport}
          ${otherHub.join('\n')}
          import { createElement } from 'rax';
          import './index.scss';
          export default (props) => {
            const sandbox = {
              Math,
              JSON,
              ...props
            }
            return (
              ${content}
            );
          };
          `;
          next(null, output);
      } else {
        next(null, content);
      }
    })
    .catch((err) => {
      console.log(err);
      next(null, content);
    });
}
