const fse = require('fs-extra');
const path = require('path');
const HardSourceWebpackPlugin = require('hard-source-webpack-plugin-fixed-hashbug');
const getBabelConfig = require('rax-babel-config');
const { merge } = require('webpack-merge');

const babelConfig = getBabelConfig({
  styleSheet: true,
});

const importConfig = [
  require.resolve('babel-plugin-import'),
  {
    libraryName: '@alifd/meet',
    libraryDirectory: 'es',
  },
];


module.exports = ({ context, onGetWebpackConfig }) => {
  const { rootDir, command, processBar, options = {} } = context;
  onGetWebpackConfig((config) => {

    config.module
        .rule('xml')
        .test(/\.(xml)$/)
        .use('babel')
        .loader(require.resolve('babel-loader'))
        .options({...babelConfig, plugins: babelConfig.plugins.concat([[require.resolve('./plugin/safety.js')]])})
        .end()
        .use('xml').loader(require.resolve('./plugin/index.js')).options({}).end();

    config.module.rule('xml').use('babel')
        .tap((opts) => {
          return merge(opts, {
            plugins: [importConfig],
          });
        });


    config.module
        .rule('rxml')
        .test(/\.(rxml)$/)
        .use('babel')
        .loader(require.resolve('babel-loader'))
        .options({...babelConfig, plugins: babelConfig.plugins.concat([[require.resolve('./plugin/safety.js')]])})
        .end()
        .use('rxml').loader(require.resolve('./plugin/index.js')).options({}).end();



    config.module.rule('rxml').use('babel')
        .tap((opts) => {
          return merge(opts, {
            plugins: [importConfig],
          });
        });
  });
};
