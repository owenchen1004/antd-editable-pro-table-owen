"use strict";
const tslib_1 = require("tslib");
const path = require("path");
const visit = require("unist-util-visit");
const react_docgen_typescript_1 = require("react-docgen-typescript");
const react_docgen_typescript_markdown_render_1 = require("react-docgen-typescript-markdown-render");
const pathExists = require("path-exists");
const u = require("unist-builder");
const PLUGIN_NAME = 'react-docgen-typescript';
const reactDocgenTypescript = (options) => {
    const _a = Object.assign({ render: (docs) => u('root', react_docgen_typescript_markdown_render_1.mdastBuilder(docs)), savePropValueAsString: true }, options), { render, fileParser } = _a, parseOptions = tslib_1.__rest(_a, ["render", "fileParser"]);
    const parser = fileParser || react_docgen_typescript_1.withDefaultConfig(parseOptions);
    return (tree, vfile) => {
        visit(tree, 'link', (node, index, parent) => {
            try {
                /* istanbul ignore next */
                if (node.title && node.title.startsWith('react-docgen-typescript:')) {
                    const p = path.resolve(vfile.dirname, node.url);
                    vfile.info(`parse React Component which path is ${p}`, node.position, PLUGIN_NAME);
                    if (!pathExists.sync(p)) {
                        throw new Error('file does not exist');
                    }
                    const componentDocs = parser.parse(p);
                    const docNode = render(componentDocs);
                    vfile.info(`react-docgen-typescript link replaced with table at ${node.url}`, node.position, PLUGIN_NAME);
                    parent.children.splice(index, 1, docNode);
                }
            }
            catch (error) {
                vfile.fail(`Failed processing react component file at ${node.url}. Details: ${error}`, node.position, PLUGIN_NAME);
            }
        });
    };
};
module.exports = reactDocgenTypescript;
//# sourceMappingURL=index.js.map