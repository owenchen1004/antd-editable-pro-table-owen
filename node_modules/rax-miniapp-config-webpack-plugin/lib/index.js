"use strict";

var transformAppConfig = require('./transformAppConfig');

var _require = require('path'),
    join = _require.join;

var _require2 = require('fs-extra'),
    ensureDirSync = _require2.ensureDirSync;

var safeWriteFile = require('./safeWriteFile');

var adaptConfig = require('./adaptConfig');

var transformNativeConfig = require('./transformNativeConfig');

var PluginName = 'MiniAppConfigPlugin';

module.exports = /*#__PURE__*/function () {
  function MiniAppConfigPlugin(passedOptions) {
    this.options = passedOptions;
  }

  var _proto = MiniAppConfigPlugin.prototype;

  _proto.apply = function apply(compiler) {
    // Currently there is no watch app.json capacity, so use first render flag handle repeatly write config
    var isFirstRender = true;
    var _this$options = this.options,
        outputPath = _this$options.outputPath,
        appConfig = _this$options.appConfig,
        target = _this$options.target,
        type = _this$options.type,
        getAppConfig = _this$options.getAppConfig,
        nativeConfig = _this$options.nativeConfig;
    compiler.hooks.beforeCompile.tapAsync(PluginName, function (compilation, callback) {
      if (isFirstRender) {
        transformConfig(compilation, callback);
        isFirstRender = false;
      } else {
        callback();
      }
    });

    function transformConfig(compilation, callback) {
      var config = transformAppConfig(outputPath, appConfig, target);
      safeWriteFile(join(outputPath, 'app.json'), config, true);

      if (type === 'complie') {
        safeWriteFile(join(outputPath, target === 'quickapp' ? 'appConfig.js' : 'app.config.js'), "module.exports = " + JSON.stringify(appConfig, null, 2));
      } // Transform page config


      appConfig.routes.map(function (route) {
        if (route && route.window) {
          ensureDirSync(outputPath);
          safeWriteFile(join(outputPath, route.source + '.json'), adaptConfig(route.window, 'window', target), true);
        }
      }); // Transform native config

      transformNativeConfig(outputPath, nativeConfig, target);
      callback();
    }
  };

  return MiniAppConfigPlugin;
}();