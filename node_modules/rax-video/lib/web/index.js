"use strict";

exports.__esModule = true;
exports.default = void 0;
var _rax = require("rax");
var _dedupe = _interopRequireDefault(require("classnames/dedupe"));
var _omit = _interopRequireDefault(require("omit.js"));
var _wrapDefaultProperties = _interopRequireDefault(require("../utils/wrapDefaultProperties"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var noop = function () {};
var Video = (0, _rax.forwardRef)(function (props, ref) {
  var className = props.className,
    style = props.style,
    controls = props.controls,
    playControl = props.playControl,
    autoPlay = props.autoPlay,
    _props$onPlayError = props.onPlayError,
    onPlayError = _props$onPlayError === void 0 ? noop : _props$onPlayError;
  var refEl = (0, _rax.useRef)(null);
  (0, _rax.useImperativeHandle)(ref, function () {
    return refEl.current;
  });
  var common = (0, _omit.default)(props, ['className', 'controls', 'style', 'playControl']);
  // Default controls is true
  if (controls == undefined || controls === true) {
    common.controls = true;
  } else {
    common.controls = false;
  }
  common.autoPlay = playControl === 'play' || autoPlay;
  if (common.autoPlay === false) {
    delete common.autoPlay; // In W3C standard, if the attribute is set, it will be treated as true regardless of its value
  }

  (0, _rax.useEffect)(function () {
    var node = refEl.current;
    if (playControl !== undefined) {
      if (playControl === 'play') {
        var playPromise = node.play(); // Should return a Promise https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play
        if (playPromise !== undefined) {
          playPromise.catch(function (error) {
            onPlayError(error);
          });
        }
      } else {
        node.pause();
      }
    }
  }, [playControl]);
  return (0, _rax.createElement)("video", _extends({}, common, {
    ref: refEl,
    className: (0, _dedupe.default)('rax-video', className),
    style: style,
    "webkit-playsinline": true,
    playsinline: true,
    src: props.src
  }));
});
var _default = (0, _wrapDefaultProperties.default)(Video);
exports.default = _default;