function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import fmtEvent from './fmtEvent';
var randomVideoID = function () {
  return '__rax_video_' + Date.now();
};
var noop = function () {};

/**
 * supportMethods
 *
 * @see https://opendocs.alipay.com/mini/component/video
 */
var supportMethods = ['onPlay', 'onPause', 'onEnded', 'onTimeUpdate', 'onLoading', 'onStop', 'onRenderStart', 'onError', 'onFullScreenChange', 'onClick', 'onUserAction'];
var componentProps = supportMethods.reduce(function (prev, current) {
  prev[current] = noop;
  return prev;
}, {});
var componentMethods = supportMethods.reduce(function (prev, current) {
  prev[current] = function (e) {
    var event = fmtEvent(this.props, e);
    this.props[current](event);
  };
  return prev;
}, {});
Component({
  data: {
    _id: ''
  },
  props: _extends({
    src: '',
    controls: true,
    autoPlay: false,
    playControl: null,
    loop: false,
    style: '',
    className: '',
    muted: false,
    id: '',
    extraInfo: {},
    mobilenetHintType: 1,
    showMuteBtn: true,
    showPlayBtn: true,
    showFullscreenBtn: true,
    showCenterPlayBtn: true,
    showThinProgressBar: false,
    objectFit: 'contain',
    enableNative: false
  }, componentProps),
  onInit: function onInit() {
    var _this$props = this.props,
      playControl = _this$props.playControl,
      id = _this$props.id;
    var _id = id || randomVideoID();
    if (playControl) {
      this.videoContext = my.createVideoContext(_id);
      this.switchPlayStatus(playControl);
    }
    this.setData({
      _id: _id
    });
  },
  deriveDataFromProps: function deriveDataFromProps(nextProps) {
    var playControl = nextProps.playControl;
    if (playControl !== this.props.playControl) {
      this.switchPlayStatus(playControl);
    }
  },
  didMount: function didMount() {
    if (!my.canIUse('component2')) {
      var _this$props2 = this.props,
        playControl = _this$props2.playControl,
        id = _this$props2.id;
      var _id = id || randomVideoID();
      if (playControl) {
        this.videoContext = my.createVideoContext(_id);
      }
      this.setData({
        _id: _id
      });
      this.switchPlayStatus(playControl);
    }
  },
  didUpdate: function didUpdate(prevProps) {
    if (!my.canIUse('component2')) {
      var playControl = prevProps.playControl;
      if (playControl !== this.props.playControl) {
        this.switchPlayStatus(this.props.playControl);
      }
    }
  },
  methods: _extends({}, componentMethods, {
    switchPlayStatus: function switchPlayStatus(playControl) {
      if (playControl === 'play') {
        this.videoContext.play();
      } else if (playControl === 'pause') {
        this.videoContext.pause();
      }
    }
  })
});