function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { createElement, useRef, forwardRef, useImperativeHandle } from 'rax';
import cx from 'classnames/dedupe';
import omit from 'omit.js';
import wrapDefaultProperties from '../utils/wrapDefaultProperties';
var Video = forwardRef(function (props, ref) {
  var className = props.className,
    style = props.style,
    controls = props.controls,
    playControl = props.playControl,
    autoPlay = props.autoPlay;
  var refEl = useRef(null);
  useImperativeHandle(ref, function () {
    return refEl.current;
  });
  var common = omit(props, ['className', 'controls', 'style', 'playControl']);
  // Default controls is true
  if (controls == undefined || controls === true) {
    common.controls = true;
  } else {
    common.controls = 'nocontrols';
  }
  common.autoPlay = playControl === 'play' || autoPlay;
  return createElement("video", _extends({}, common, {
    ref: refEl,
    className: cx('rax-video', className),
    style: style,
    playStatus: playControl
  }));
});
export default wrapDefaultProperties(Video);