function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { createElement, useRef, useEffect, forwardRef, useImperativeHandle } from 'rax';
import cx from 'classnames/dedupe';
import omit from 'omit.js';
import wrapDefaultProperties from '../utils/wrapDefaultProperties';
import { createVideoContext } from '@uni/video';
var miniappVideoPropsMap = {
  showMuteBtn: 'show-mute-btn',
  showPlayBtn: 'show-play-btn',
  showFullscreenBtn: 'show-fullscreen-btn',
  showCenterPlayBtn: 'show-center-play-btn',
  showThinProgressBar: 'show-thin-progress-bar',
  objectFit: 'object-fit'
};
var Video = forwardRef(function (props, ref) {
  var id = props.id,
    _props$className = props.className,
    className = _props$className === void 0 ? '' : _props$className,
    style = props.style,
    controls = props.controls,
    playControl = props.playControl,
    autoPlay = props.autoPlay;
  var refEl = useRef(null);
  useImperativeHandle(ref, function () {
    return refEl.current;
  });
  var common = omit(props, ['className', 'controls', 'style', 'playControl', 'autoPlay']);
  // Default controls is true
  common.controls = controls === undefined || controls === true;
  common.autoplay = playControl === 'play' || autoPlay;
  Object.keys(miniappVideoPropsMap).forEach(function (prop) {
    common[miniappVideoPropsMap[prop]] = common[prop];
    delete common[prop];
  });
  useEffect(function () {
    if (playControl !== undefined) {
      if (!id) {
        console.warn('id is required if using playControl in miniapp!');
        return;
      }
      var cacheVideoContext = function () {
        refEl.current = createVideoContext(id);
        window.removeEventListener('setDataFinished', cacheVideoContext);
      };
      window.addEventListener('setDataFinished', cacheVideoContext);
    }
  }, []);
  useEffect(function () {
    if (playControl !== undefined && refEl.current) {
      playControl === 'play' ? refEl.current.play() : refEl.current.pause();
    }
  }, [playControl]);
  return createElement("video", _extends({}, common, {
    className: cx('rax-video', className),
    style: style,
    "webkit-playsinline": true,
    playsinline: true,
    src: props.src
  }));
});
export default wrapDefaultProperties(Video);