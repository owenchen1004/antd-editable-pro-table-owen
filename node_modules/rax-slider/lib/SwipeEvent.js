"use strict";

exports.__esModule = true;
exports.default = void 0;

var _rax = require("rax");

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _raxView = _interopRequireDefault(require("rax-view"));

var PanResponder = _interopRequireWildcard(require("universal-panresponder"));

var _isValidSwipe = _interopRequireDefault(require("./isValidSwipe"));

var _excluded = ["onSwipeBegin", "onSwipe", "onSwipeEnd"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var directions = {
  SWIPE_UP: 'SWIPE_UP',
  SWIPE_DOWN: 'SWIPE_DOWN',
  SWIPE_LEFT: 'SWIPE_LEFT',
  SWIPE_RIGHT: 'SWIPE_RIGHT'
};

var SwipeEvent = /*#__PURE__*/function (_Component) {
  _inheritsLoose(SwipeEvent, _Component);

  function SwipeEvent(props) {
    var _this = _Component.call(this, props) || this;

    _this.swipeDetected = void 0;
    _this.velocityProp = void 0;
    _this.distanceProp = void 0;
    _this.swipeDirection = void 0;
    _this.panResponder = void 0;
    _this.state = {
      swipe: {
        direction: null,
        distance: 0,
        velocity: 0
      }
    }; // swipe is happen

    _this.swipeDetected = false; // swipe speed

    _this.velocityProp = null; // swipe distance

    _this.distanceProp = null; // swipe direction

    _this.swipeDirection = null; // should check the PanResponder type file

    _this.panResponder = PanResponder.create({
      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
        return true;
      },
      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
        return true;
      },
      onPanResponderMove: function onPanResponderMove(evt, gestureState) {
        var dx = gestureState.dx,
            dy = gestureState.dy,
            vx = gestureState.vx,
            vy = gestureState.vy;
        var _this$props = _this.props,
            onSwipeBegin = _this$props.onSwipeBegin,
            onSwipe = _this$props.onSwipe,
            horizontal = _this$props.horizontal,
            vertical = _this$props.vertical,
            initialVelocityThreshold = _this$props.initialVelocityThreshold,
            horizontalThreshold = _this$props.horizontalThreshold,
            verticalThreshold = _this$props.verticalThreshold,
            left = _this$props.left,
            right = _this$props.right,
            up = _this$props.up,
            down = _this$props.down; // when no swipe

        if (!_this.props.continuous && _this.swipeDetected) {
          return;
        }

        var initialDetection = false;
        var validHorizontal = false;
        var validVertical = false;

        if (!_this.swipeDetected) {
          initialDetection = true; // horizontal

          validHorizontal = horizontal ? (0, _isValidSwipe.default)(vx, dy, initialVelocityThreshold, verticalThreshold) : false; // vertical

          validVertical = vertical ? (0, _isValidSwipe.default)(vy, dx, initialVelocityThreshold, horizontalThreshold) : false;

          if (validHorizontal) {
            // Use event cancelable(https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable)
            // Fix error `Ignored attempt to cancel a touchmove event with cancelable=false, for example because scrolling is in progress and cannot be interrupted.`
            // Not all browser support it(https://caniuse.com/#search=cancelable)
            (evt.cancelable === undefined || evt.cancelable) && evt.preventDefault && evt.preventDefault();
            _this.velocityProp = 'vx';
            _this.distanceProp = 'dx'; // left

            if ((horizontal || left) && dx < 0) {
              _this.swipeDirection = directions.SWIPE_LEFT; // right
            } else if ((horizontal || right) && dx > 0) {
              _this.swipeDirection = directions.SWIPE_RIGHT;
            }
          } else if (validVertical) {
            _this.velocityProp = 'vy';
            _this.distanceProp = 'dy'; // up

            if ((vertical || up) && dy < 0) {
              _this.swipeDirection = directions.SWIPE_UP; // down
            } else if ((vertical || down) && dy > 0) {
              _this.swipeDirection = directions.SWIPE_DOWN;
            }
          }

          if (_this.swipeDirection) {
            _this.swipeDetected = true;
          }
        }

        if (_this.swipeDetected) {
          // gestureState.dx || gestureState.dy
          var distance = gestureState[_this.distanceProp]; // gestureState.vx || gestureState.vx

          var velocity = gestureState[_this.velocityProp];
          var swipeState = {
            direction: _this.swipeDirection,
            distance: distance,
            velocity: velocity
          };

          if (initialDetection) {
            onSwipeBegin && onSwipeBegin(swipeState);
          } else {
            onSwipe && onSwipe(swipeState);
          }

          if (_this.props.setGestureState) {
            _this.setState({
              swipe: swipeState
            });
          }
        }
      },
      onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
        return true;
      },
      onPanResponderTerminate: _this.handleTerminationAndRelease.bind(_assertThisInitialized(_this)),
      onPanResponderRelease: _this.handleTerminationAndRelease.bind(_assertThisInitialized(_this))
    });
    return _this;
  }

  var _proto = SwipeEvent.prototype;

  _proto.handleTerminationAndRelease = function handleTerminationAndRelease() {
    if (this.swipeDetected) {
      var onSwipeEnd = this.props.onSwipeEnd;
      onSwipeEnd && onSwipeEnd({
        direction: this.swipeDirection,
        distance: this.state.swipe.distance,
        velocity: this.state.swipe.velocity
      });
    }

    this.swipeDetected = false;
    this.velocityProp = null;
    this.distanceProp = null;
    this.swipeDirection = null;
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        onSwipeBegin = _this$props2.onSwipeBegin,
        onSwipe = _this$props2.onSwipe,
        onSwipeEnd = _this$props2.onSwipeEnd,
        props = _objectWithoutPropertiesLoose(_this$props2, _excluded);

    var state = this.props.setGestureState ? this.state : null;
    return (0, _rax.createElement)(_raxView.default, _extends({}, this.panResponder.panHandlers, {
      style: _extends({}, {
        alignSelf: 'flex-start'
      }, props.handlerStyle)
    }), (0, _rax.createElement)(_raxView.default, _extends({}, props, state), this.props.children));
  };

  return SwipeEvent;
}(_rax.Component);

SwipeEvent.propTypes = {
  onSwipeBegin: PropTypes.func,
  onSwipe: PropTypes.func,
  onSwipeEnd: PropTypes.func,
  swipeDecoratorStyle: PropTypes.object
};
SwipeEvent.defaultProps = {
  horizontal: true,
  vertical: true,
  left: false,
  right: false,
  up: false,
  down: false,
  continuous: true,
  initialVelocityThreshold: 0.2,
  verticalThreshold: 1,
  horizontalThreshold: 5,
  setGestureState: true,
  handlerStyle: {}
};
var _default = SwipeEvent;
exports.default = _default;