"use strict";

exports.__esModule = true;
exports.default = void 0;

var _rax = require("rax");

var _raxChildren = _interopRequireDefault(require("rax-children"));

var _universalEnv = require("universal-env");

var _wrapDefaultProperties = _interopRequireDefault(require("../utils/wrapDefaultProperties"));

var _index = _interopRequireDefault(require("../index.css"));

var _excluded = ["direction", "autoPlay", "showsPagination", "paginationStyle", "autoPlayInterval", "index", "loop", "width", "height", "style", "className", "children", "onChange"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var _styleSheet = _index.default;

function _getClassName() {
  var className = [];
  var args = arguments[0];
  var type = Object.prototype.toString.call(args).slice(8, -1).toLowerCase();

  if (type === 'string') {
    args = args.trim();
    args && className.push(args);
  } else if (type === 'array') {
    args.forEach(function (cls) {
      cls = _getClassName(cls).trim();
      cls && className.push(cls);
    });
  } else if (type === 'object') {
    for (var k in args) {
      k = k.trim();

      if (k && args.hasOwnProperty(k) && args[k]) {
        className.push(k);
      }
    }
  }

  return className.join(' ').trim();
}

function _getStyle(classNameExpression) {
  var cache = _styleSheet.__cache || (_styleSheet.__cache = {});

  var className = _getClassName(classNameExpression);

  var classNameArr = className.split(/\s+/);
  var style = cache[className];

  if (!style) {
    style = {};

    if (classNameArr.length === 1) {
      style = _styleSheet[classNameArr[0].trim()];
    } else {
      classNameArr.forEach(function (cls) {
        var value = _styleSheet[cls.trim()];

        if (typeof value === 'object') {
          style = Object.assign(style, _styleSheet[cls.trim()]);
        }
      });
    }

    cache[className] = style;
  }

  return style;
}

var Slider = (0, _rax.forwardRef)(function (props, ref) {
  var direction = props.direction,
      autoPlay = props.autoPlay,
      _props$showsPaginatio = props.showsPagination,
      showsPagination = _props$showsPaginatio === void 0 ? true : _props$showsPaginatio,
      _props$paginationStyl = props.paginationStyle,
      paginationStyle = _props$paginationStyl === void 0 ? {
    itemColor: 'rgba(255, 255, 255, 0.5)',
    itemSelectedColor: 'rgb(255, 80, 0)'
  } : _props$paginationStyl,
      _props$autoPlayInterv = props.autoPlayInterval,
      autoPlayInterval = _props$autoPlayInterv === void 0 ? 3000 : _props$autoPlayInterv,
      current = props.index,
      _props$loop = props.loop,
      loop = _props$loop === void 0 ? true : _props$loop,
      width = props.width,
      height = props.height,
      style = props.style,
      className = props.className,
      children = props.children,
      onChange = props.onChange,
      rest = _objectWithoutPropertiesLoose(props, _excluded);

  var _useState = (0, _rax.useState)(current),
      index = _useState[0],
      setIndex = _useState[1]; // @ts-ignore


  (0, _rax.useImperativeHandle)(ref, function () {
    return {
      slideTo: function slideTo(newIndex) {
        setIndex(newIndex);
      }
    };
  });
  var handleChange = (0, _rax.useCallback)(function (result) {
    var currentIndex = result.detail.current; // Only setState by user touch action in wechat miniprogram

    if (_universalEnv.isWeChatMiniProgram) {
      result.detail.source === 'touch' && setIndex(currentIndex);
    } else {
      setIndex(currentIndex);
    }

    result.index = currentIndex;
    onChange && onChange(result);
  }, [props.index, onChange]);
  return (0, _rax.createElement)("swiper", _extends({}, rest, {
    ref: ref,
    className: "rax-slider " + className,
    autoplay: autoPlay,
    interval: autoPlayInterval,
    circular: loop,
    current: index,
    vertical: direction === 'vertical',
    "indicator-dots": showsPagination,
    "indicator-color": paginationStyle.itemColor,
    "indicator-active-color": paginationStyle.itemSelectedColor,
    onChange: handleChange,
    style: Object.assign({}, _getStyle("rax-slider " + className), _extends({
      width: Number(width),
      height: Number(height)
    }, style))
  }), _raxChildren.default.map(children, function (child) {
    return child && (0, _rax.createElement)("swiper-item", {
      key: child.key
    }, child);
  }));
});

var _default = (0, _wrapDefaultProperties.default)(Slider);

exports.default = _default;