"use strict";

exports.__esModule = true;
exports.default = void 0;

var _rax = require("rax");

var _raxCloneElement = _interopRequireDefault(require("rax-clone-element"));

var _raxFindDomNode = _interopRequireDefault(require("rax-find-dom-node"));

var _raxChildren = _interopRequireDefault(require("rax-children"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _raxView = _interopRequireDefault(require("rax-view"));

var _SwipeEvent = _interopRequireDefault(require("../SwipeEvent"));

var _classnames = _interopRequireDefault(require("classnames"));

var _index = _interopRequireDefault(require("../index.css"));

var _excluded = ["itemSize", "itemColor", "itemSelectedColor"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _styleSheet = _index.default;

function _getClassName() {
  var className = [];
  var args = arguments[0];
  var type = Object.prototype.toString.call(args).slice(8, -1).toLowerCase();

  if (type === 'string') {
    args = args.trim();
    args && className.push(args);
  } else if (type === 'array') {
    args.forEach(function (cls) {
      cls = _getClassName(cls).trim();
      cls && className.push(cls);
    });
  } else if (type === 'object') {
    for (var k in args) {
      k = k.trim();

      if (k && args.hasOwnProperty(k) && args[k]) {
        className.push(k);
      }
    }
  }

  return className.join(' ').trim();
}

function _getStyle(classNameExpression) {
  var cache = _styleSheet.__cache || (_styleSheet.__cache = {});

  var className = _getClassName(classNameExpression);

  var classNameArr = className.split(/\s+/);
  var style = cache[className];

  if (!style) {
    style = {};

    if (classNameArr.length === 1) {
      style = _styleSheet[classNameArr[0].trim()];
    } else {
      classNameArr.forEach(function (cls) {
        var value = _styleSheet[cls.trim()];

        if (typeof value === 'object') {
          style = Object.assign(style, _styleSheet[cls.trim()]);
        }
      });
    }

    cache[className] = style;
  }

  return style;
}

var SWIPE_LEFT = 'SWIPE_LEFT';
var SWIPE_RIGHT = 'SWIPE_RIGHT';

var Slider = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Slider, _Component);

  function Slider(props) {
    var _this = _Component.call(this, props) || this;

    _this.index = void 0;
    _this.height = void 0;
    _this.width = void 0;
    _this.loopIdx = void 0;
    _this.offsetX = void 0;
    _this.isSwiping = void 0;
    _this.total = void 0;
    _this.swipeView = void 0;
    _this.childRefs = void 0;
    _this.isAutoPlay = void 0;
    _this.autoPlayTimer = void 0;
    _this.isInTransition = void 0;

    _this.onSwipeBegin = function () {
      _this.isSwiping = true;
      _this.isInTransition = true;
      clearInterval(_this.autoPlayTimer);
    };

    _this.onSwipe = function (_ref) {
      var direction = _ref.direction,
          distance = _ref.distance,
          velocity = _ref.velocity;
      if (_this.isLoopEnd()) return;
      var changeX = distance / document.documentElement.clientWidth * 750 - _this.offsetX;
      var swipeView = (0, _raxFindDomNode.default)(_this.swipeView.current);
      var styleText = "translate3d(" + changeX / 750 * document.documentElement.clientWidth + "px, 0px, 0px)"; // move next page

      _this.childRefs[_this.index >= _this.total - 1 ? 0 : _this.index + 1].current.style.left = (_this.index + 1) * _this.width / 750 * document.documentElement.clientWidth + 'px'; // move pre page

      _this.childRefs[_this.index <= 0 ? _this.total - 1 : _this.index - 1].current.style.left = (_this.index - 1) * _this.width / 750 * document.documentElement.clientWidth + 'px';
      swipeView.style.transitionDuration = '0s';
      swipeView.style.transform = styleText;
      swipeView.style.webkitTransform = styleText;
    };

    _this.onSwipeEnd = function (_ref2) {
      var direction = _ref2.direction,
          distance = _ref2.distance,
          velocity = _ref2.velocity;
      _this.isSwiping = false;
      _this.isInTransition = false;
      var num = _this.total;

      var realIndex = _this.loopedIndex();

      if (!(_this.isLoopEnd() && (realIndex >= num - 1 && direction === SWIPE_LEFT || realIndex <= 0 && direction === SWIPE_RIGHT))) {
        _this.slideTo(_this.index + (direction === 'SWIPE_LEFT' ? 1 : -1));
      }

      if (_this.props.autoPlay) {
        _this.autoPlay();
      }
    };

    _this.getPages = function () {
      var children = _this.props.children;
      return _raxChildren.default.map(children, function (child, i) {
        var ref = (0, _rax.createRef)();
        var translateStyle = {
          width: _this.width + 'rpx',
          height: _this.height + 'rpx',
          left: i * _this.width + 'rpx'
        };
        _this.childRefs[i] = ref;
        return (0, _rax.createElement)(_raxView.default, {
          ref: ref,
          className: (0, _classnames.default)('rax-slider-children', 'childWrap' + i),
          style: Object.assign({}, _getStyle((0, _classnames.default)('rax-slider-children', 'childWrap' + i)), translateStyle),
          key: i
        }, child);
      });
    };

    _this.handleTransitionEnd = function () {
      _this.isInTransition = false; // Reset container's position when it's out of edge and animation ended

      if (_this.index === _this.total) {
        _this.index = 0;

        _this.resetSliderIndex();
      } else if (_this.index === -1) {
        _this.index = _this.total - 1;

        _this.resetSliderIndex();
      }
    };

    _this.resetSliderIndex = function () {
      _this.offsetX = _this.index * _this.width;
      var swipeView = (0, _raxFindDomNode.default)(_this.swipeView.current);
      var styleText = "translate3d(" + -1 * _this.offsetX + "rpx, 0rpx, 0rpx)";
      swipeView.style.transitionDuration = '0s';
      _this.childRefs[_this.loopIdx].current.style.left = _this.offsetX / 750 * document.documentElement.clientWidth + 'px';
      swipeView.style.transform = styleText;
      swipeView.style.webkitTransform = styleText;

      _this.forceUpdate();
    };

    _this.index = props.index;
    _this.height = parseFloat("" + props.height);
    _this.width = parseFloat("" + props.width);
    _this.loopIdx = props.index;
    _this.offsetX = _this.index * _this.width;
    _this.isSwiping = false;
    _this.swipeView = (0, _rax.createRef)();
    _this.childRefs = [];
    _this.total = 0;
    _this.autoPlayTimer = null;
    _this.isAutoPlay = false;
    return _this;
  }

  var _proto = Slider.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.autoPlay && this.total > 1) {
      this.isAutoPlay = true;
      this.autoPlay();
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    if (!this.isAutoPlay && this.props.autoPlay && this.total > 1) {
      this.isAutoPlay = true;
      this.autoPlay();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.autoPlayTimer && clearInterval(this.autoPlayTimer);
  };

  _proto.autoPlay = function autoPlay() {
    var _this2 = this;

    var autoPlayInterval = this.props.autoPlayInterval;
    if (this.isSwiping) return;
    this.autoPlayTimer && clearInterval(this.autoPlayTimer);
    this.autoPlayTimer = setInterval(function interval() {
      if (_this2.isLoopEnd()) return;

      _this2.slideTo(_this2.index + 1);
    }, autoPlayInterval);
  };

  _proto.slideTo = function slideTo(index) {
    if (this.index === index) return;
    if (this.isInTransition) return;
    if (this.isSwiping) return;
    if (this.total < 2) return;
    this.index = index; // Reset slider container's index when out of edge

    if (this.index > this.total) {
      this.index = 0;
    }

    if (this.index < -1) {
      this.index = this.total - 1;
    }

    var _this$props = this.props,
        speed = _this$props.speed,
        cssEase = _this$props.cssEase;
    this.isInTransition = true;
    this.offsetX = this.index * this.width;
    var realIndex = this.loopedIndex(); // translate3d for performance optimization

    var swipeView = (0, _raxFindDomNode.default)(this.swipeView.current);
    var styleText = "translate3d(" + -1 * this.offsetX + "rpx, 0rpx, 0rpx)";
    swipeView.style.transitionProperty = 'all';
    swipeView.style.transitionDuration = speed + "ms";
    swipeView.style.transitionTimingFunction = cssEase;
    swipeView.style.transform = styleText;
    swipeView.style.webkitTransform = styleText;
    this.loopIdx = this.index < 0 && realIndex !== 0 ? this.total - realIndex : realIndex;
    this.childRefs[this.loopIdx].current.style.left = this.offsetX / 750 * document.documentElement.clientWidth + 'px';

    if (this.props.onChange) {
      this.props.onChange({
        index: this.loopIdx
      });
    } // forceUpdate


    this.forceUpdate();
  };

  _proto.isLoopEnd = function isLoopEnd() {
    var realIndex = this.loopedIndex();
    var num = this.total;

    if (!this.props.loop && (realIndex >= num - 1 || realIndex <= 0)) {
      return true;
    }

    return false;
  };

  // index from 0 to length
  _proto.loopedIndex = function loopedIndex(index, total) {
    if (index === void 0) {
      index = this.index;
    }

    if (total === void 0) {
      total = this.total;
    }

    return Math.abs(index) % total;
  };

  _proto.renderPagination = function renderPagination() {
    if (this.total <= 1) return null;
    var _this$props2 = this.props,
        _this$props2$paginati = _this$props2.paginationStyle,
        paginationStyle = _this$props2$paginati === void 0 ? {} : _this$props2$paginati,
        activeDot = _this$props2.activeDot,
        normalDot = _this$props2.normalDot;
    var dots = [];

    var itemSize = paginationStyle.itemSize,
        itemColor = paginationStyle.itemColor,
        itemSelectedColor = paginationStyle.itemSelectedColor,
        otherStyle = _objectWithoutPropertiesLoose(paginationStyle, _excluded);

    var size = {
      width: itemSize,
      height: itemSize
    };
    var ActiveDot = activeDot || (0, _rax.createElement)(_raxView.default, {
      className: "rax-slider-dot rax-slider-dot-active",
      style: Object.assign({}, _styleSheet["rax-slider-dot"], _styleSheet["rax-slider-dot-active"], _extends({
        backgroundColor: itemSelectedColor
      }, size))
    });
    var NormalDot = normalDot || (0, _rax.createElement)(_raxView.default, {
      className: "rax-slider-dot",
      style: Object.assign({}, _styleSheet["rax-slider-dot"], _extends({
        backgroundColor: itemColor
      }, size))
    });
    var realIndex = this.loopIdx;

    for (var i = 0; i < this.total; i++) {
      dots.push(i === realIndex ? (0, _raxCloneElement.default)(ActiveDot, {
        key: i
      }) : (0, _raxCloneElement.default)(NormalDot, {
        key: i
      }));
    }

    return (0, _rax.createElement)(_raxView.default, {
      className: "rax-slider-pagination",
      style: Object.assign({}, _styleSheet["rax-slider-pagination"], otherStyle)
    }, dots);
  };

  _proto.renderSwipeView = function renderSwipeView(pages) {
    var _this$props3 = this.props,
        initialVelocityThreshold = _this$props3.initialVelocityThreshold,
        verticalThreshold = _this$props3.verticalThreshold,
        vertical = _this$props3.vertical,
        horizontalThreshold = _this$props3.horizontalThreshold;
    var style = {
      width: this.width + 'rpx',
      height: this.height + 'rpx'
    };
    return this.total > 1 ? (0, _rax.createElement)(_SwipeEvent.default, {
      className: "rax-slider-swipe-wrapper",
      style: Object.assign({}, _styleSheet["rax-slider-swipe-wrapper"], style),
      onSwipeBegin: this.onSwipeBegin,
      onSwipeEnd: this.onSwipeEnd,
      onSwipe: this.onSwipe,
      initialVelocityThreshold: initialVelocityThreshold,
      verticalThreshold: verticalThreshold,
      vertical: vertical,
      horizontalThreshold: horizontalThreshold
    }, (0, _rax.createElement)(_raxView.default, {
      ref: this.swipeView,
      className: "rax-slider-swipe",
      style: Object.assign({}, _styleSheet["rax-slider-swipe"], _extends({}, style, {
        transform: "translate3d(" + -1 * this.offsetX + "rpx, 0rpx, 0rpx)"
      })),
      onTransitionEnd: this.handleTransitionEnd
    }, pages)) : (0, _rax.createElement)(_raxView.default, {
      ref: this.swipeView,
      className: "rax-slider-swipe",
      style: Object.assign({}, _styleSheet["rax-slider-swipe"], style)
    }, pages);
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        style = _this$props4.style,
        _this$props4$showsPag = _this$props4.showsPagination,
        showsPagination = _this$props4$showsPag === void 0 ? true : _this$props4$showsPag,
        className = _this$props4.className,
        children = _this$props4.children;
    this.total = _raxChildren.default.toArray(children).length;
    return (0, _rax.createElement)(_raxView.default, {
      style: Object.assign({}, _getStyle((0, _classnames.default)('rax-slider', className)), style),
      className: (0, _classnames.default)('rax-slider', className)
    }, this.renderSwipeView(this.getPages()), showsPagination && this.renderPagination());
  };

  return Slider;
}(_rax.Component);

Slider.defaultProps = {
  horizontal: true,
  showsPagination: true,
  loop: true,
  autoPlay: false,
  autoPlayInterval: 3000,
  speed: 500,
  cssEase: 'ease',
  index: 0,
  paginationStyle: {},
  initialVelocityThreshold: 0.7,
  verticalThreshold: 10,
  horizontalThreshold: 10,
  vertical: false
};
Slider.propTypes = {
  onChange: PropTypes.func,
  paginationStyle: PropTypes.object
};
Slider.Item = _rax.Fragment;
Slider.displayName = 'Slider';
var _default = Slider;
exports.default = _default;