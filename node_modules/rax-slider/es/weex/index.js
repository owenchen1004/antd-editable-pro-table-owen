var _excluded = ["autoPlay", "showsPagination", "paginationStyle", "autoPlayInterval", "loop", "width", "height", "style", "children", "onChange"];

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { createElement, forwardRef, useCallback, useImperativeHandle, useRef, useState } from 'rax';
import wrapDefaultProperties from '../utils/wrapDefaultProperties';
import indexStyleSheet from '../index.css';
var _styleSheet = indexStyleSheet;
var Slider = forwardRef(function (props, ref) {
  // This value determines the index of current shown slide in Weex. The default value is 0.
  var _useState = useState(props.index || 0),
      index = _useState[0],
      setIndex = _useState[1];

  var sliderRef = useRef(null);

  var autoPlay = props.autoPlay,
      showsPagination = props.showsPagination,
      paginationStyle = props.paginationStyle,
      autoPlayInterval = props.autoPlayInterval,
      loop = props.loop,
      width = props.width,
      height = props.height,
      style = props.style,
      children = props.children,
      onChange = props.onChange,
      rest = _objectWithoutPropertiesLoose(props, _excluded); // Ignore 'HTMLElement Error', because it's a Weex Component.
  // @ts-ignore


  useImperativeHandle(ref, function () {
    return {
      slideTo: function slideTo(index) {
        if (typeof index === 'number') {
          setIndex(index);
        } else {
          var idx = index.index,
              animated = index.animated;
          setIndex(idx);
          var slider = sliderRef.current;
          slider.slideTo && slider.slideTo(idx, {
            animated: animated
          });
        }
      }
    };
  });
  var handleChange = useCallback(function (result) {
    var currentIndex = 0; // https://weex.apache.org/docs/components/slider.html#rax-example
    // The past Weex docs shows that the 'result' is a number, But in the new Weex App returns {index:x, timestamp:...}

    if (typeof result === 'number') {
      currentIndex = result;
    }

    if (typeof result === 'object' && typeof result.index === 'number') {
      currentIndex = result.index;
    }

    setIndex(currentIndex);
    onChange && onChange(result);
  }, [props.index, onChange]);
  return createElement("slider", _extends({}, rest, {
    ref: sliderRef,
    className: "rax-slider",
    autoPlay: autoPlay,
    interval: autoPlayInterval,
    infinite: loop,
    index: index,
    onChange: handleChange,
    style: Object.assign({}, _styleSheet["rax-slider"], _extends({
      width: width,
      height: height
    }, style))
  }), showsPagination && createElement("indicator", {
    className: "rax-slider-pagination",
    style: Object.assign({}, _styleSheet["rax-slider-pagination"], paginationStyle)
  }), children);
});
export default wrapDefaultProperties(Slider);