"use strict";

exports.__esModule = true;
exports.default = void 0;

var _rax = require("rax");

var _universalEnv = require("universal-env");

var _core = require("@gcanvas/core");

var _raxFindDomNode = _interopRequireDefault(require("rax-find-dom-node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var Canvas = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Canvas, _Component);

  function Canvas(props) {
    var _this = _Component.call(this, props) || this;

    _this.getContext = function (type) {
      if (type === void 0) {
        type = '2d';
      }

      var canvas = (0, _raxFindDomNode.default)(_this.canvas.current);

      if (_universalEnv.isWeex) {
        var gcanvas = (0, _core.enable)(canvas, {
          bridge: _core.WeexBridge,
          debug: false,
          disableAutoSwap: false,
          disableComboCommands: false
        });
        return gcanvas.getContext(type);
      } else {
        return canvas.getContext(type);
      }
    };

    _this.canvas = (0, _rax.createRef)();
    return _this;
  }

  var _proto = Canvas.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        _this$props$style = _this$props.style,
        style = _this$props$style === void 0 ? {} : _this$props$style,
        width = _this$props.width,
        height = _this$props.height;
    var customStyle = {
      width: width !== undefined ? width : style.width,
      height: height !== undefined ? height : style.height
    };

    if (_universalEnv.isWeex) {
      return (0, _rax.createElement)("gcanvas", _extends({}, this.props, {
        style: _extends({}, style, customStyle),
        ref: this.canvas
      }));
    } else {
      return (0, _rax.createElement)("canvas", _extends({}, this.props, {
        width: parseInt(customStyle.width),
        height: parseInt(customStyle.height),
        ref: this.canvas
      }));
    }
  };

  return Canvas;
}(_rax.Component);

Canvas.createImage = function () {
  if (_universalEnv.isWeex) {
    return new _core.Image();
  } else {
    return new Image();
  }
};

var _default = Canvas;
exports.default = _default;