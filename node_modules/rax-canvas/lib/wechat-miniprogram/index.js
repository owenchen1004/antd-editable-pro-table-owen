"use strict";

var _fmtEvent = _interopRequireDefault(require("./fmtEvent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Component({
  properties: {
    className: {
      type: String,
      value: ''
    },
    styleSheet: {
      type: String,
      value: ''
    },
    componentId: {
      type: String,
      value: ''
    },
    width: {
      type: Number,
      value: 0
    },
    height: {
      type: Number,
      value: 0
    },
    type: {
      type: String,
      // Compatible with old interface, type should be an empty string
      value: ''
    }
  },
  options: {
    styleIsolation: 'apply-shared'
  },
  methods: {
    onClick: function onClick(e) {
      var event = (0, _fmtEvent.default)(this.properties, e);
      this.triggerEvent('onClick', event.detail);
    },
    onLongpress: function onLongpress(e) {
      var event = (0, _fmtEvent.default)(this.properties, e);
      this.triggerEvent('onLongpress', event.detail);
    },
    onTouchStart: function onTouchStart(e) {
      var event = (0, _fmtEvent.default)(this.properties, e);
      this.triggerEvent('onTouchStart', event.detail);
    },
    onTouchMove: function onTouchMove(e) {
      var event = (0, _fmtEvent.default)(this.properties, e);
      this.triggerEvent('onTouchMove', event.detail);
    },
    onTouchEnd: function onTouchEnd(e) {
      var event = (0, _fmtEvent.default)(this.properties, e);
      this.triggerEvent('onTouchEnd', event.detail);
    },
    onTouchCancel: function onTouchCancel(e) {
      var event = (0, _fmtEvent.default)(this.properties, e);
      this.triggerEvent('onTouchCancel', event.detail);
    },
    getContext: function getContext() {
      var context = wx.createCanvasContext(this.properties.componentId, this);
      Object.defineProperty(context, 'fillStyle', {
        get: function get() {
          return context.setFillStyle;
        },
        set: function set(value) {
          context.setFillStyle(value);
        }
      });
      return context;
    }
  }
});