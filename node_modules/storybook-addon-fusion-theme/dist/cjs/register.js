"use strict";

var _react = _interopRequireDefault(require("react"));

var _addons = require("@storybook/addons");

var _api = require("@storybook/api");

var _theming = require("@storybook/theming");

var _getCookie = _interopRequireDefault(require("./getCookie"));

var _constants = require("./constants");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var StyledSelect = _theming.styled.select(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  align-self: center;\n  border-color: white;\n  border-radius: .25em;\n  padding: .125em .5em;\n"])));

var dataFetchDone = false;

var Dropdown = function Dropdown() {
  var id = (0, _getCookie["default"])('cssVariables');

  var _useAddonState = (0, _api.useAddonState)(_constants.ADDON_ID, []),
      _useAddonState2 = _slicedToArray(_useAddonState, 2),
      themeVars = _useAddonState2[0],
      setThemeVars = _useAddonState2[1];

  var channel = _addons.addons.getChannel();

  channel.once('getThemeVars', function (args) {
    if (dataFetchDone) return;

    if (themeVars.length === 0) {
      console.log('[STORYBOOK] GET THEME DONE');
      dataFetchDone = true;
      setThemeVars(args);
    }
  });

  function handleChange(e) {
    channel.emit('cssVariablesChange', {
      id: e.target.value
    });
  }

  if ((themeVars === null || themeVars === void 0 ? void 0 : themeVars.length) > 0) {
    return /*#__PURE__*/_react["default"].createElement(StyledSelect, {
      onChange: handleChange,
      defaultValue: id
    }, themeVars.map(function (theme, index) {
      return /*#__PURE__*/_react["default"].createElement("option", {
        key: index,
        value: theme.value
      }, theme.label);
    }));
  }

  return null;
};

_addons.addons.register(_constants.ADDON_ID, function () {
  _addons.addons.add(_constants.ADDON_ID, {
    title: 'CSS Variables Theme',
    type: _addons.types.TOOL,
    match: function match(_ref) {
      var viewMode = _ref.viewMode;
      return viewMode === 'story' || viewMode === 'docs';
    },
    render: function render() {
      return /*#__PURE__*/_react["default"].createElement(Dropdown, null);
    }
  });
});