"use strict";

exports.__esModule = true;
exports.default = exports.Cell = void 0;

var _rax = require("rax");

var _classnames = _interopRequireDefault(require("classnames"));

var _raxCloneElement = _interopRequireDefault(require("rax-clone-element"));

var _raxChildren = _interopRequireDefault(require("rax-children"));

var _view = _interopRequireDefault(require("./view"));

var _typography = _interopRequireDefault(require("./typography"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * P 的分组
 * @param props
 */
var Cell = function (props) {
  var _classNames;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-demo-' : _props$prefix,
      children = props.children,
      _props$type = props.type,
      type = _props$type === void 0 ? 'body-1' : _props$type,
      verAlign = props.verAlign,
      align = props.align,
      others = _objectWithoutPropertiesLoose(props, ["prefix", "children", "type", "verAlign", "align"]);

  var cls = (0, _classnames.default)((_classNames = {}, _classNames[prefix + "p-cell"] = true, _classNames[prefix + "p-cell-" + type] = type, _classNames)); // Cell 自动判断 Text

  var newChildren = _raxChildren.default.map(children, function (child, index) {
    if (typeof child === 'string') {
      if (!child.trim()) {
        return null;
      }

      return (0, _rax.createElement)(_typography.default, {
        key: index
      }, child);
    }

    return child;
  });

  var style = _extends({
    alignItems: verAlign,
    justifyContent: align
  }, props.style);

  return (0, _rax.createElement)(_view.default, _extends({}, others, {
    className: cls,
    style: style
  }), newChildren);
};
/**
 * P 掌管一行元素的上下间距
 * 特性:
 * - P + P 相邻会呈现上下间距；上下间距有3个size，如果发生>body-2 就用body-2、< caption 就用cation; P 作为第一个元素会去除 margin-top，P 作为最后一个元素会去除 margin-bottom
 * - P>* 的最后一个子元素去除 margin-right; p>Text 没有上下间距(文字比较特殊)
 * - P 下直接文字会自动用 Text 包裹
 */


exports.Cell = Cell;

var Paragraph = function (props) {
  var _classNames2;

  var _props$prefix2 = props.prefix,
      prefix = _props$prefix2 === void 0 ? 'mt-demo-' : _props$prefix2,
      children = props.children,
      _props$type2 = props.type,
      type = _props$type2 === void 0 ? 'body-1' : _props$type2,
      verAlign = props.verAlign,
      align = props.align,
      others = _objectWithoutPropertiesLoose(props, ["prefix", "children", "type", "verAlign", "align"]);

  var cls = (0, _classnames.default)((_classNames2 = {}, _classNames2[prefix + "p"] = true, _classNames2[prefix + "p-" + type] = type, _classNames2)); // Cell 自动加 type

  var newChildren = _raxChildren.default.map(children, function (child, index) {
    if (child && child.type && child.type === Cell) {
      return (0, _raxCloneElement.default)(child, {
        type: child.props.type || type,
        key: index
      });
    } else if (typeof child === 'string') {
      return (0, _rax.createElement)(_typography.default, {
        key: index
      }, child);
    }

    return child;
  });

  var style = _extends({
    alignItems: verAlign,
    justifyContent: align
  }, props.style);

  return (0, _rax.createElement)(_view.default, _extends({}, others, {
    className: cls,
    style: style
  }), newChildren);
};

Paragraph.Cell = Cell;
var _default = Paragraph;
exports.default = _default;