function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsx createElement */
import { createElement } from 'rax';
import classNames from 'classnames';
import Typography from './typography';
import View from './view';
export default (function (props) {
  var children = props.children,
      label = props.label,
      title = props.title,
      labelWidth = props.labelWidth,
      contentAlign = props.contentAlign,
      verAlign = props.verAlign,
      className = props.className,
      others = _objectWithoutPropertiesLoose(props, ["children", "label", "title", "labelWidth", "contentAlign", "verAlign", "className"]);

  return createElement(View, _extends({}, others, {
    className: classNames('mt-demo-control', className, {
      'mt-demo-control--vc': verAlign === 'center'
    })
  }), createElement(View, {
    className: classNames('mt-demo-control-label', {
      'mt-demo-control-label--vc': verAlign === 'center'
    }),
    style: {
      width: labelWidth || '220rpx'
    }
  }, createElement(Typography, {
    type: 'body-2'
  }, label || title)), createElement(View, {
    className: classNames('mt-demo-control-content', {
      'mt-demo-control-content--right': contentAlign === 'right'
    })
  }, children));
});