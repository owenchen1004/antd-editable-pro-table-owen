function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsx createElement */
import { createElement } from 'rax';
import classNames from 'classnames';
import View from './view';
import Typography from './typography';
export default (function (props) {
  var children = props.children,
      className = props.className,
      title = props.title,
      fullWidth = props.fullWidth,
      contentClassName = props.contentClassName,
      contentStyle = props.contentStyle,
      _props$type = props.type,
      type = _props$type === void 0 ? 'normal' : _props$type,
      others = _objectWithoutPropertiesLoose(props, ["children", "className", "title", "fullWidth", "contentClassName", "contentStyle", "type"]);

  return createElement(View, _extends({
    className: classNames('mt-demo-card', "mt-demo-card--" + type, className)
  }, others), title ? createElement(Typography, {
    type: "title",
    className: classNames('mt-demo-card-title')
  }, title) : null, createElement(View, {
    className: classNames('mt-demo-card-content', "mt-demo-card-content--" + type, contentClassName, {
      'mt-demo-card-content--fullwidth': fullWidth
    }),
    style: contentStyle
  }, children));
});