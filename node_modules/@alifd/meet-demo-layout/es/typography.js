function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* @jsx createElement */
import { createElement } from 'rax';
import classNames from 'classnames';
import RaxText from 'rax-text';
/**
 * 文字 字体、大小、行高
 * @param props
 */

var Typography = function (props) {
  var _classNames;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-demo-' : _props$prefix,
      type = props.type,
      className = props.className,
      children = props.children,
      others = _objectWithoutPropertiesLoose(props, ["prefix", "type", "className", "children"]);

  var cls = classNames(className, (_classNames = {}, _classNames[prefix + "text"] = true, _classNames[prefix + "text-" + type] = type, _classNames));
  return createElement(RaxText, _extends({}, others, {
    className: cls
  }), children);
};

export default Typography;