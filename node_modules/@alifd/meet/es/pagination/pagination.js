import { __rest } from "tslib";
import { createElement, forwardRef } from 'rax';
import classNames from 'classnames';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import Picker from '../picker';
import Button from '../button';
import SelectDrawer from '../select-drawer';
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
import { isNumber } from '../utils';
import { useValue } from '../utils/hooks';
const getPageNumber = (totalPage) => {
    const pageNumberList = [];
    for (let i = 1; i <= totalPage; i++) {
        pageNumberList.push({
            label: i,
            value: i,
        });
    }
    return [pageNumberList];
};
const getCurPageNum = (current, totalPage, defaultValue = 1) => {
    if (isNumber(current)) {
        if (current >= 1 && current <= totalPage) {
            return current;
        }
        else if (current > totalPage) {
            return totalPage;
        }
        else if (current < 1) {
            return defaultValue;
        }
    }
    else {
        return defaultValue;
    }
};
let selectedValue = 1;
const Pagination = (props, ref) => {
    const { size = 'medium', type: typeProp = 'normal', current = 1, defaultCurrent, total: totalProp = 100, pageSize: pageSizeProp = 10, isOpenDisabled = true, previousButtonText = 'Previous', nextButtonText = 'Next', onChange = () => { }, style = {}, prefix = 'mt-' } = props, others = __rest(props, ["size", "type", "current", "defaultCurrent", "total", "pageSize", "isOpenDisabled", "previousButtonText", "nextButtonText", "onChange", "style", "prefix"]);
    const type = typeProp === 'simple' ? 'normal' : typeProp;
    const locale = useLocale('Pagination', others, defaultLang.Pagination);
    const pageSize = isNumber(pageSizeProp) && pageSizeProp > 0 ? pageSizeProp : 1;
    const total = isNumber(totalProp) && totalProp > 0 ? totalProp : 1;
    const totalPage = Math.ceil(total / pageSize) || 1;
    const pageNumberData = getPageNumber(totalPage);
    const [currentPageValue, setCurrentPageValue, isControlled] = useValue(props, 1, {
        valueName: 'current',
        fitValue(v) {
            return getCurPageNum(v, totalPage);
        },
    });
    selectedValue = currentPageValue;
    const previousButtonDisabled = currentPageValue === 1 && isOpenDisabled;
    const nextButtonDisabled = currentPageValue === totalPage && isOpenDisabled;
    const clsPrefix = `${prefix}pagination`;
    const classNameObj = {
        pagination: classNames(clsPrefix, `${clsPrefix}--${size}`),
        paginationTextMini: classNames(`${clsPrefix}--${size}-text-mini`),
        paginationText: classNames(`${clsPrefix}-text`, `${clsPrefix}--${size}-text`),
        paginationNumber: classNames(`${clsPrefix}--${size}-text-number`),
        paginationTextCurrent: classNames(`${clsPrefix}-text-current`, `${clsPrefix}--${size}-text-number`),
        paginationTextSelectDrawer: classNames(`${clsPrefix}-text-select-drawer`),
        paginationIconFirst: classNames(`${clsPrefix}-icon`, `${clsPrefix}--${size}-icon`, `${clsPrefix}-icon--first`, `${clsPrefix}--${size}-icon--first`, previousButtonDisabled ? `${clsPrefix}-icon--disabled` : ''),
        paginationIconLast: classNames(`${clsPrefix}-icon`, `${clsPrefix}--${size}-icon`, `${clsPrefix}-icon--last`, `${clsPrefix}--${size}-icon--last`, nextButtonDisabled ? `${clsPrefix}-icon--disabled` : ''),
    };
    const handlePreviousButton = (e) => {
        if (currentPageValue <= 1) {
            return;
        }
        const prePageValue = currentPageValue - 1;
        if (!isControlled) {
            setCurrentPageValue(prePageValue);
        }
        if (onChange) {
            onChange(prePageValue, e);
        }
    };
    const handleNextButton = (e) => {
        if (currentPageValue >= totalPage) {
            return;
        }
        const nextPageValue = currentPageValue + 1;
        if (!isControlled) {
            setCurrentPageValue(nextPageValue);
        }
        if (onChange) {
            onChange(nextPageValue, e);
        }
    };
    const handleOk = () => {
        setCurrentPageValue(selectedValue);
        if (onChange) {
            onChange(selectedValue);
        }
    };
    const handleCancel = () => {
        selectedValue = currentPageValue;
        if (onChange) {
            onChange(selectedValue);
        }
    };
    const changePageNumber = (item) => {
        selectedValue = item[0];
    };
    return (createElement(View, Object.assign({}, others, { className: classNameObj.pagination, ref: ref }),
        createElement(Button, { size: size, model: "outline", disabled: previousButtonDisabled, onClick: handlePreviousButton },
            createElement(Icon, { name: "arrow-left", className: classNameObj.paginationIconFirst }),
            createElement(Text, null, locale.prev || previousButtonText)),
        type === 'normal' ? (createElement(View, null,
            createElement(SelectDrawer, { content: createElement(View, { className: classNameObj.paginationText },
                    createElement(Text, { className: classNameObj.paginationTextCurrent }, currentPageValue),
                    createElement(Text, { className: classNameObj.paginationNumber },
                        "/",
                        totalPage)), className: classNameObj.paginationTextSelectDrawer, placeholder: "", iconType: "", size: "small", drawerTitle: locale.tip, onOk: handleOk, onCancel: handleCancel, style: { width: '100%' } },
                createElement(Picker, { data: pageNumberData, defaultValue: [currentPageValue], onChange: changePageNumber })))) : (createElement(View, { className: classNameObj.paginationTextMini })),
        createElement(Button, { size: size, model: "outline", disabled: nextButtonDisabled, onClick: handleNextButton },
            createElement(Text, null, locale.next || nextButtonText),
            createElement(Icon, { name: "arrow-right", className: classNameObj.paginationIconLast }))));
};
Pagination.displayName = 'Pagination';
export default forwardRef(Pagination);
