import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef } from 'rax';
import Text from 'rax-text';
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
import { useValue } from '../utils/hooks';
import View from '../view';
import PickerColumn from './column';
import { getDataArray } from './utils';
const formatValues = (dataArray, value = []) => {
    return dataArray.map((columnData, index) => {
        if (columnData.length === 0) {
            console.error('[Picker] column\'s length cannot be 0, please check "data"', dataArray);
            return null;
        }
        return columnData.find((it) => it.value === value[index]) ? value[index] : columnData[0].value;
    });
};
const Picker = (props, ref) => {
    const { prefix = 'mt-', data = [], cascade, onChange = () => { }, style, className, value: valueProp, defaultValue } = props, others = __rest(props, ["prefix", "data", "cascade", "onChange", "style", "className", "value", "defaultValue"]);
    const locale = useLocale('Picker', others, defaultLang.Picker);
    const [value, setValue, isControlled] = useValue(props, [], {
        fitValue: (x) => {
            if (!Array.isArray(x)) {
                return [x];
            }
            return x;
        },
        compare: (a, b) => {
            if (b.length !== a.length) {
                return false;
            }
            return a.join(',') === b.join(',');
        },
    });
    const handleChange = (v, index) => {
        const newValue = [...value];
        newValue[index] = v;
        const formattedNewValue = formatValues(getDataArray(data, newValue, cascade), newValue);
        onChange(formattedNewValue, index);
        if (!isControlled) {
            setValue(formattedNewValue);
        }
    };
    const dataArray = getDataArray(data, value, cascade);
    const values = formatValues(dataArray, value);
    return (createElement(View, Object.assign({}, others, { className: classNames(`${prefix}picker`, `${prefix}picker--web`, className), style: style, ref: ref }),
        dataArray.map((d, index) => {
            const columnValue = values[index] === undefined ? d[0].value : values[index];
            return (createElement(PickerColumn, { prefix: prefix, onChange: (v) => handleChange(v, index), key: index, data: d, value: columnValue }));
        }),
        dataArray && dataArray.length === 0 ? (createElement(Text, { className: `${prefix}picker-text--empty` }, locale.empty)) : null));
};
export default forwardRef(Picker);
