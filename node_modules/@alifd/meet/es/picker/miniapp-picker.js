import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, useEffect, useState } from 'rax';
import { toStyleText } from '../utils/style';
import { getDataArray, getDataArrayByIndex, getIndex } from './utils';
const Picker = (props, ref) => {
    const { prefix = 'mt-', data, className, value: valueProp, defaultValue, cascade, style, onChange = () => { }, maskStyle = {}, indicatorStyle = {} } = props, others = __rest(props, ["prefix", "data", "className", "value", "defaultValue", "cascade", "style", "onChange", "maskStyle", "indicatorStyle"]);
    const clsPrefix = `${prefix}picker`;
    const [innerValue, setInnerValue] = useState(valueProp || defaultValue || []);
    const value = 'value' in props ? valueProp : innerValue;
    const dataArray = getDataArray(data, value, cascade);
    const curPickerIndex = getIndex(dataArray, value);
    const handleChange = (e) => {
        const newIndex = e.detail.value;
        const _dataArray = getDataArrayByIndex(data, newIndex, cascade);
        const ret = [];
        _dataArray.forEach((col, index) => {
            let idx = newIndex[index] || 0;
            if (idx !== 0 && idx >= col.length) {
                idx = col.length - 1;
            }
            ret.push(col[idx].value);
        });
        onChange(ret, e);
        if (!('value' in props)) {
            setInnerValue(ret);
        }
    };
    useEffect(() => {
        if (!('value' in props)) {
            return;
        }
        if (!valueProp) {
            if (innerValue.length !== 0 && defaultValue.length === 0) {
                setInnerValue([]);
                return;
            }
            if (innerValue.join(',') !== defaultValue.join(',')) {
                setInnerValue(defaultValue);
            }
            return;
        }
        if (innerValue.join(',') !== valueProp.join(',')) {
            setInnerValue(valueProp);
        }
    }, [innerValue, valueProp]);
    return (createElement("picker-view", Object.assign({ className: classNames(clsPrefix, className), value: curPickerIndex, onChange: handleChange, "mask-style": toStyleText(maskStyle), "indicator-style": toStyleText(Object.assign({ height: 'var(--picker-height)' }, indicatorStyle)), ref: ref }, others), dataArray.map((colArr, colIndex) => {
        return (createElement("picker-view-column", { key: colIndex }, colArr.map((item, itemIndex) => {
            const isSelected = itemIndex === curPickerIndex[colIndex] || (!curPickerIndex[colIndex] && itemIndex === 0);
            return (createElement("view", { key: itemIndex, className: classNames(`${clsPrefix}-col-item`, {
                    [`${clsPrefix}-col-item--selected`]: isSelected,
                }) }, item.label));
        })));
    })));
};
export default forwardRef(Picker);
