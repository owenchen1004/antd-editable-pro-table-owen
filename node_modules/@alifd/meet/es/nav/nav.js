import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, useEffect, useState } from 'rax';
import Children from 'rax-children';
import cloneElement from 'rax-clone-element';
import { isString, isUndef, isValidArray } from '../utils';
import { dfs } from '../utils/tree';
import View from '../view';
import NavContext from './context';
import Item from './item';
import SubNav from './sub-nav';
const getInitSelectKeys = (props) => {
    let ret = [];
    if ('selectedKeys' in props) {
        if (isValidArray(props.selectedKeys)) {
            ret = props.selectedKeys;
        }
        else if (isString(props.selectedKeys) && props.selectedKeys) {
            ret = [props.selectedKeys];
        }
    }
    else if ('defaultSelectedKeys' in props) {
        if (isValidArray(props.defaultSelectedKeys)) {
            ret = props.defaultSelectedKeys;
        }
        else if (isString(props.defaultSelectedKeys) && props.defaultSelectedKeys) {
            ret = [props.defaultSelectedKeys];
        }
    }
    return isValidArray(ret) ? ret : [];
};
const checkDataSourceKey = (dataSource) => {
    let rs = true;
    dfs(dataSource, (node) => {
        if (rs && !node.key) {
            rs = false;
        }
    });
    return rs;
};
const Nav = (props, ref) => {
    const { prefix = 'mt-', className, size = 'medium', type = 'normal', model = 'solid', direction = 'ver', defaultSelectedKeys, selectedKeys, dataSource = [], children, onSelect } = props, others = __rest(props, ["prefix", "className", "size", "type", "model", "direction", "defaultSelectedKeys", "selectedKeys", "dataSource", "children", "onSelect"]);
    const [curSelectedKeys, setCurrentSelectedKeys] = useState(getInitSelectKeys(props));
    const isControlled = 'selectedKeys' in props;
    const clsPrefix = `${prefix}nav`;
    const navClassNames = classNames(`${clsPrefix}`, `${clsPrefix}--${direction}`, className);
    const childProps = {
        size,
        type,
        model,
        direction,
    };
    const onItemSelect = (itemKey, e) => {
        if (!isControlled) {
            setCurrentSelectedKeys([itemKey]);
        }
        if (onSelect) {
            onSelect(itemKey, e);
        }
    };
    const getRenderNode = () => {
        return dataSource.map((item, index) => {
            const itemKey = item.key || `${prefix}nav-${index}`;
            const { icon, iconUri, children: _children } = item;
            return isValidArray(_children) ? (createElement(SubNav, { key: itemKey, itemKey: itemKey, icon: icon, iconUri: iconUri, label: item.label, dataSource: _children })) : (createElement(Item, { key: itemKey, itemKey: itemKey, icon: icon, iconUri: iconUri, label: item.label }));
        });
    };
    const getChildrenNode = () => {
        let _key = 0;
        return Children.map(children, (child) => {
            _key += 1;
            const itemKey = child.key || _key;
            return cloneElement(child, Object.assign(Object.assign({}, childProps), { key: `${_key}`, itemKey: `${itemKey}`, size }));
        });
    };
    useEffect(() => {
        if (isValidArray(dataSource) && !checkDataSourceKey(dataSource)) {
            console.error('each item in dataSource should have key property, plese check');
        }
    }, []);
    useEffect(() => {
        if ('selectedKeys' in props) {
            if (isUndef(props.selectedKeys)) {
                const val = getInitSelectKeys(props);
                setCurrentSelectedKeys(val);
            }
            else if (isValidArray(props.selectedKeys)) {
                setCurrentSelectedKeys(props.selectedKeys);
            }
            else if (isString(props.selectedKeys) && props.selectedKeys) {
                setCurrentSelectedKeys([props.selectedKeys]);
            }
        }
    }, [selectedKeys]);
    return (createElement(NavContext.Provider, { value: {
            curSelectedKeys,
            onItemSelect,
            model,
            direction,
            type,
            size,
            clsPrefix,
        } },
        createElement(View, Object.assign({}, others, { ref: ref, className: navClassNames }), dataSource.length ? getRenderNode() : getChildrenNode())));
};
Nav.displayName = 'Nav';
export default forwardRef(Nav);
