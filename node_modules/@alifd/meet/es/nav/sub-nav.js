import { __rest } from "tslib";
import { createElement, forwardRef, Fragment, useContext, useState } from 'rax';
import classNames from 'classnames';
import Children from 'rax-children';
import cloneElement from 'rax-clone-element';
import isValidElement from 'rax-is-valid-element';
import View from '../view';
import Icon from '../icon';
import NavItem from './item';
import NavContext from './context';
import { isValidArray } from '../utils';
const SubNav = (props, ref) => {
    const { className, icon, label = '', level = 1, expanded = false, itemKey = '', dataSource, children } = props, others = __rest(props, ["className", "icon", "label", "level", "expanded", "itemKey", "dataSource", "children"]);
    const ctx = useContext(NavContext);
    const { onItemSelect, clsPrefix, model, type, size } = ctx;
    const [isExpanded, setExpanded] = useState(expanded);
    let keyCounter = 0;
    const handleSelect = () => {
        setExpanded(!isExpanded);
    };
    const renderChildrenByData = () => {
        if (!dataSource) {
            return null;
        }
        return dataSource.map((item) => {
            const newLevel = level + 1;
            const _itemKey = item.key;
            const { icon: _icon, iconUri, children: _children } = item;
            return isValidArray(_children) ? (createElement(SubNav, { key: _itemKey, itemKey: _itemKey, icon: icon, iconUri: iconUri, label: item.label, level: newLevel, dataSource: _children })) : (createElement(NavItem, { key: _itemKey, itemKey: _itemKey, level: newLevel, icon: _icon, iconUri: iconUri, label: item.label }));
        });
    };
    const renderChild = (child) => {
        keyCounter++;
        const _key = child.key || `${itemKey}-${keyCounter}`;
        if (!isValidElement(child)) {
            return null;
        }
        return cloneElement(child, {
            key: _key,
            itemKey: _key,
            size,
            level: level + 1,
            onItemSelect,
        });
    };
    return (createElement(Fragment, null,
        createElement(NavItem, Object.assign({ ref: ref }, others, { icon: icon, label: label, level: level, onClick: handleSelect, className: classNames(className, {
                [`${clsPrefix}--${type}-${model}-active`]: isExpanded,
            }), disableSelect: true, extra: createElement(Icon, { name: isExpanded ? 'arrow-up' : 'arrow-down', size: "s" }) })),
        isExpanded ? createElement(View, null, dataSource ? renderChildrenByData() : Children.map(children, renderChild)) : null));
};
SubNav.displayName = 'Nav.SubNav';
export default forwardRef(SubNav);
