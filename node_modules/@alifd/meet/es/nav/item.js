import { __rest } from "tslib";
import { createElement, forwardRef, useContext } from 'rax';
import classNames from 'classnames';
import Children from 'rax-children';
import cloneElement from 'rax-clone-element';
import isValidElement from 'rax-is-valid-element';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import { isNumber, isString, isValidArray } from '../utils';
import NavContext from './context';
const NavItem = (props, ref) => {
    const { className, label, itemKey, disableSelect = false, level = 1, icon, iconUri, children, extra, onClick = () => { } } = props, others = __rest(props, ["className", "label", "itemKey", "disableSelect", "level", "icon", "iconUri", "children", "extra", "onClick"]);
    const ctx = useContext(NavContext);
    const { curSelectedKeys, clsPrefix, size, type, model, direction, onItemSelect } = ctx;
    const selected = itemKey && isValidArray(curSelectedKeys) && curSelectedKeys.includes(itemKey);
    const clses = {
        item: classNames(className, `${clsPrefix}-item`, `${clsPrefix}-item--${size}`, `${clsPrefix}-item--${type}-${model}`, `${clsPrefix}--${direction}-item`, `${clsPrefix}-item--level${level}`, {
            [`${clsPrefix}-item--${type}-${model}--active`]: selected,
        }),
        icon: classNames(`${clsPrefix}-item-icon`, `${clsPrefix}-item-icon--${size}`, `${clsPrefix}-item--${type}-${model}-icon`, {
            [`${clsPrefix}-item--${type}-${model}--active-icon`]: selected,
        }),
        label: classNames(`${clsPrefix}-item-label`, `${clsPrefix}-item-label--${size}`, `${clsPrefix}-item--${type}-${model}-label`, {
            [`${clsPrefix}-item--${type}-${model}--active-label`]: selected,
        }),
        extra: `${clsPrefix}-item-extra-wrapper--${type}`,
    };
    const onItemClick = (e) => {
        if (onClick) {
            onClick(itemKey);
        }
        if (disableSelect) {
            return;
        }
        if (onItemSelect) {
            onItemSelect(itemKey, e);
        }
    };
    const renderLabel = () => {
        if (children) {
            return (createElement(View, { className: `${clsPrefix}-item-children-wrapper` }, Children.map(children, (child, index) => {
                if (isValidElement(child)) {
                    return cloneElement(child, {
                        key: `mt_nav_item_${index}`,
                    });
                }
                else if (isString(child) || isNumber(child)) {
                    return (createElement(Text, { className: clses.label, numberOfLines: 1 }, child));
                }
                return null;
            })));
        }
        else if (isValidElement(label)) {
            return createElement(View, { className: clses.label }, label);
        }
        else {
            return (createElement(Text, { className: clses.label, numberOfLines: 1 }, label));
        }
    };
    const iconCls = icon && icon.props ? icon.props.className : '';
    const iconProps = {};
    if (isString(icon)) {
        iconProps.name = icon;
    }
    else if (iconUri) {
        iconProps.uri = iconUri;
    }
    return (createElement(View, Object.assign({ ref: ref }, others, { className: clses.item, onClick: onItemClick }),
        isValidElement(icon) ? (cloneElement(icon, {
            className: classNames(clses.icon, iconCls),
        })) : (createElement(Icon, Object.assign({}, others, iconProps, { className: clses.icon }))),
        renderLabel(),
        extra ? createElement(View, { className: clses.extra }, extra) : null));
};
NavItem.displayName = 'Nav.Item';
export default forwardRef(NavItem);
