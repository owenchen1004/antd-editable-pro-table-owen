import { __rest } from "tslib";
import { createElement } from 'rax';
import dayjs from 'dayjs';
import View from '../../view';
import EmbedTimePicker from '../../time-picker/embed-picker';
import DateIndicator from '../date-indicator';
import EmbedDatePicker from './date-picker';
import ModeSwitch from '../mode-switch';
import useToggle from '../../utils/hooks/use-toggle';
const DateTimePicker = (props) => {
    const { prefix = 'mt-', defaultValue, value, dateSelectTip = '选择具体时间', timeSelectTip = '返回选择日期', disableDate, validRange, onChange } = props, others = __rest(props, ["prefix", "defaultValue", "value", "dateSelectTip", "timeSelectTip", "disableDate", "validRange", "onChange"]);
    const [mode, { toggle: toggleMode }] = useToggle('date', 'time');
    const handleDateChange = (d) => {
        const curTime = dayjs(value);
        const newTime = dayjs(d)
            .hour(curTime.hour())
            .minute(curTime.minute())
            .second(curTime.second());
        onChange(newTime.toDate());
    };
    const handleTimeChange = (d) => {
        const curTime = dayjs(value);
        const newTime = dayjs(d)
            .year(curTime.year())
            .month(curTime.month())
            .date(curTime.date());
        onChange(newTime.toDate());
    };
    return (createElement(View, Object.assign({}, others),
        createElement(DateIndicator, { highlight: mode === 'date' ? 0 : 1, values: [dayjs(value).format('YYYY-MM-DD'), dayjs(value).format('HH:mm:ss')] }),
        mode === 'date' ? (createElement(EmbedDatePicker, { defaultValue: defaultValue, value: value, validRange: validRange, onChange: handleDateChange })) : (createElement(EmbedTimePicker, { defaultValue: defaultValue, value: value, onChange: handleTimeChange })),
        createElement(ModeSwitch, { defaultText: dateSelectTip, reverseText: timeSelectTip, value: mode === 'date' ? 'default' : 'reverse', onChange: toggleMode })));
};
export default DateTimePicker;
