import DatePicker from '../embed-picker/date-picker';
import dayjs from 'dayjs';
import { get, range } from '../../utils';
export default class EmbedMinutePicker extends DatePicker {
    getStep() {
        return 'minute';
    }
    getDisableType() {
        return 'minute';
    }
    getRangeCheck() {
        return {
            date: {
                hasYear: true,
                hasMonth: true,
                hasDay: true,
            },
            time: {
                hasHour: true,
                hasMinute: true,
                hasSecond: false,
            },
        };
    }
    getDataSource(locale) {
        const result = super.getDataSource(locale);
        const hourLocale = get(locale, 'locale.DatePicker.hour', '时');
        const minuteLocale = get(locale, 'locale.DatePicker.minute', '分');
        const year = this.value.getFullYear();
        const month = this.value.getMonth();
        const date = this.value.getDate();
        const hourOpts = range(24).map((_, index) => ({
            label: `${index}${hourLocale}`,
            value: index,
        }));
        const minuteOpts = range(60).map((_, index) => ({
            label: `${index}${minuteLocale}`,
            value: index,
        }));
        return [
            ...result,
            this.filterDataSource(hourOpts, (d, it) => {
                d.setMinutes(0);
                d.setMilliseconds(0);
                d.setFullYear(year);
                d.setMonth(month);
                d.setDate(date);
                d.setHours(it.value);
            }, 'hour'),
            this.filterDataSource(minuteOpts, (d, it) => {
                d.setMilliseconds(0);
                d.setFullYear(year);
                d.setMonth(month);
                d.setDate(date);
                d.setHours(this.value.getHours());
                d.setMinutes(it.value);
            }, 'minute'),
        ];
    }
    toDate(values) {
        const d = super.toDate(values);
        return dayjs(d)
            .month(values[1] - 1)
            .date(values[2])
            .hour(values[3])
            .minute(values[4])
            .toDate();
    }
    toValues(d) {
        const values = super.toValues(d);
        return [...values, d.getHours(), d.getMinutes()];
    }
}
