import dayjs from 'dayjs';
import BasePicker from './base-picker';
import { dateToPicker, getColumns, getTimeOption, pickerToDate } from '../../time-picker/utils';
import { cloneDate, getRangeDate, getRealRange, toValidDate } from '../../utils/date';
import { get } from '../../utils';
class DateTimePicker extends BasePicker {
    get validRange() {
        if (!this.props.validRange) {
            return undefined;
        }
        const options = getTimeOption(this.timeProps);
        return getRealRange(options, this.timeProps, this.props.validRange);
    }
    get timeProps() {
        const { showTime, validRange } = this.props;
        let newRange;
        if (validRange) {
            const format = 'YYYY-MM-DD';
            const value = getRangeDate(toValidDate(this.props.value || this.state.value), {
                date: this.getDateOptions(),
            }, validRange);
            if (dayjs(value).format(format) === dayjs(validRange[0]).format(format)) {
                newRange = [validRange[0], new Date(2020, 1, 1, 23, 59, 59)];
            }
            if (dayjs(value).format(format) === dayjs(validRange[1]).format(format)) {
                newRange = [new Date(2020, 1, 1, 0, 0, 0), validRange[1]];
            }
        }
        if (typeof showTime === 'object') {
            return Object.assign({ validRange: newRange }, showTime);
        }
        return {
            validRange: newRange,
        };
    }
    getStep() {
        return 'day';
    }
    getDisableType() {
        return 'date';
    }
    getDataSource(locale) {
        const { validRange, format = 'YYYY-MM-DD' } = this.props;
        const oneDay = 24 * 3600 * 1000;
        const result = [];
        const startDate = cloneDate(validRange[0]);
        startDate.setHours(0);
        startDate.setMinutes(0);
        startDate.setSeconds(0);
        startDate.setMilliseconds(0);
        for (let d = startDate; d.getTime() < validRange[1].getTime(); d = new Date(d.getTime() + oneDay)) {
            result.push({
                label: dayjs(d).format(format),
                value: `${d.getFullYear()},${d.getMonth()},${d.getDate()}`,
            });
        }
        const timeProps = this.timeProps;
        if (!timeProps.locale && locale && !!get(locale, 'locale.TimePicker', undefined)) {
            timeProps.locale = locale.locale.TimePicker;
        }
        const options = getTimeOption(timeProps);
        return [result, ...getColumns(this.value, options, timeProps)];
    }
    toDate(values) {
        const options = getTimeOption(this.timeProps);
        const x = values
            .shift()
            .split(',')
            .map((it) => parseInt(it, 10));
        const d = pickerToDate(values, options);
        d.setFullYear(x[0]);
        d.setDate(1);
        d.setMonth(x[1]);
        d.setDate(x[2]);
        return d;
    }
    getRangeCheck() {
        const { showTime } = this.props;
        const timeFormat = typeof showTime === 'object' ? showTime.format : undefined;
        return {
            date: this.getDateOptions(),
            time: getTimeOption({
                format: timeFormat,
            }),
        };
    }
    toValues(d) {
        const options = getTimeOption(this.timeProps);
        const values = [`${d.getFullYear()},${d.getMonth()},${d.getDate()}`, ...dateToPicker(d, options)];
        return values;
    }
    getDateOptions() {
        const { format = 'YYYY-MM-DD' } = this.props;
        return {
            hasYear: format.includes('Y'),
            hasMonth: format.includes('M'),
            hasDay: format.includes('D'),
        };
    }
}
export default DateTimePicker;
