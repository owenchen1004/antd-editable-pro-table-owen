import dayjs from 'dayjs';
import { Component, createElement } from 'rax';
import LocaleContext from '../../locale/context';
import Picker from '../../picker';
import { isFunction } from '../../utils';
import { checkDateRange, getRangeDate, isValidDate, RANGE_CHECK_RESULT, toDate, toValidDate, } from '../../utils/date';
class BasePicker extends Component {
    constructor(props) {
        super(props);
        const d = toDate(props.value || props.defaultValue);
        const realDate = this.getAvailableDate(isValidDate(d) ? d : new Date());
        this.state = {
            value: realDate,
        };
        this.handleChange = this.handleChange.bind(this);
        if (d && realDate.getTime() !== d.getTime() && props.onChange) {
            props.onChange(realDate);
        }
    }
    componentDidUpdate(prevProps) {
        if ('value' in this.props) {
            const { value: nowValue } = this.state;
            const { value, defaultValue } = this.props;
            if (value === prevProps.value) {
                return;
            }
            const newValue = this.getAvailableDate(toValidDate(value || defaultValue));
            if (newValue.getTime() === nowValue.getTime()) {
                return;
            }
            this.setState({
                value: newValue,
            });
        }
    }
    get value() {
        if (this.props.value) {
            return this.getAvailableDate(toValidDate(this.props.value));
        }
        return this.state.value;
    }
    get validRange() {
        return this.props.validRange;
    }
    filterDataSource(source, changeDate, type) {
        const validRange = this.validRange;
        const { disabledDate } = this.props;
        if (!disabledDate && !validRange) {
            return source;
        }
        for (let i = 0; i < source.length; i++) {
            const startDate = new Date();
            changeDate(startDate, source[i]);
            const endDate = dayjs(startDate).endOf(type);
            let isDisable = isFunction(disabledDate)
                ?
                    disabledDate(startDate, type) && disabledDate(endDate.toDate(), type)
                : false;
            if (!isDisable && validRange && this.getStep() === type) {
                isDisable = checkDateRange(startDate, this.getRangeCheck(), validRange) !== RANGE_CHECK_RESULT.IN_RANGE;
            }
            if (isDisable) {
                source.splice(i, 1);
                i--;
            }
        }
        return source;
    }
    getAvailableDate(d) {
        const validRange = this.validRange;
        let baseDate = d;
        if (validRange) {
            baseDate = getRangeDate(d, this.getRangeCheck(), validRange);
        }
        if (this.isAvailable(baseDate)) {
            return baseDate;
        }
        const dayjsObj = dayjs(baseDate);
        for (let i = 0; i < 9999; i++) {
            const a = dayjsObj.add(i, this.getStep()).toDate();
            if (this.isAvailable(a)) {
                return a;
            }
            const b = dayjsObj.add(0 - i, this.getStep()).toDate();
            if (this.isAvailable(b)) {
                return b;
            }
        }
        return baseDate;
    }
    handleChange(values) {
        const newDate = this.getAvailableDate(this.toDate(values));
        if (!('value' in this.props)) {
            this.setState({
                value: newDate,
            });
        }
        if (this.props.onChange) {
            this.props.onChange(newDate);
        }
    }
    render() {
        const { id, className, style } = this.props;
        return (createElement(LocaleContext.Consumer, null, (locale) => (createElement(Picker, { id: id, className: className, style: style, value: this.toValues(this.value), data: this.getDataSource(locale || {}), onChange: this.handleChange }))));
    }
    hasAvailable() {
        const validRange = this.validRange;
        const { disabledDate } = this.props;
        return disabledDate || validRange;
    }
    isAvailable(d) {
        const validRange = this.validRange;
        const { disabledDate } = this.props;
        if (!this.hasAvailable()) {
            return true;
        }
        if (validRange) {
            if (checkDateRange(d, this.getRangeCheck(), validRange) !== RANGE_CHECK_RESULT.IN_RANGE) {
                return false;
            }
        }
        if (disabledDate) {
            return !disabledDate(d, this.getDisableType());
        }
        return true;
    }
}
export default BasePicker;
