import dayjs from 'dayjs';
import YearPicker from './year-picker';
import { rangeMonthOptions, rangeOptions, resetTime } from './utils';
import { get } from '../../utils';
export default class MonthPicker extends YearPicker {
    getStep() {
        return 'month';
    }
    getDisableType() {
        return 'month';
    }
    getRangeCheck() {
        return {
            date: {
                hasYear: true,
                hasMonth: true,
                hasDay: false,
            },
        };
    }
    getDataSource(locale) {
        const result = super.getDataSource(locale);
        const monthLocale = get(locale, 'locale.DatePicker.month', 'æœˆ');
        const year = dayjs().year(this.value.getFullYear());
        const startOfYear = year.startOf('year');
        const endOfYear = year.endOf('year');
        const range = this.validRange || [];
        const start = dayjs(range[0] || '-');
        const end = dayjs(range[1] || '-');
        let rangeOpts = rangeOptions(1, 12, monthLocale);
        if (startOfYear.isValid() && start.isValid() && end.isValid()) {
            if (start.isBefore(startOfYear) && end.isAfter(startOfYear) && end.isBefore(endOfYear)) {
                rangeOpts = rangeMonthOptions(startOfYear, end, monthLocale);
            }
            else if (start.isAfter(startOfYear) && end.isBefore(endOfYear)) {
                rangeOpts = rangeMonthOptions(start, end, monthLocale);
            }
            else if (start.isAfter(startOfYear) && start.isBefore(endOfYear) && end.isAfter(endOfYear)) {
                rangeOpts = rangeMonthOptions(start, endOfYear, monthLocale);
            }
        }
        result.push(this.filterDataSource(rangeOpts, (d, it) => {
            resetTime(d);
            d.setDate(1);
            d.setFullYear(this.value.getFullYear());
            d.setMonth(it.value - 1);
        }, 'month'));
        return result;
    }
    toDate(values) {
        const d = super.toDate(values);
        d.setMonth(values[1] - 1);
        return d;
    }
    toValues(d) {
        const values = super.toValues(d);
        values.push(d.getMonth() + 1);
        return values;
    }
}
