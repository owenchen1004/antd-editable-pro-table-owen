import { __rest } from "tslib";
import { Component, createElement, createRef } from 'rax';
import dayjs from 'dayjs';
import View from '../../view';
import SelectDrawer from '../../select-drawer';
import { ItemContext } from '../../form';
import { isFunction, isValidArray } from '../../utils';
import { isBetween, isValidDate, toDate, toValidDate } from '../../utils/date';
class BasePicker extends Component {
    constructor(props) {
        super(props);
        this.ref = createRef();
        this.handleClear = () => {
            const { onClear, onChange } = this.props;
            if (!('value' in this.props)) {
                this.setState({
                    pickerValue: new Date(),
                    value: null,
                });
            }
            if (onClear) {
                onClear();
            }
            if (onChange) {
                onChange(null);
            }
        };
        const v = toDate(props.value || props.defaultValue);
        let pv = new Date();
        if (isValidDate(v)) {
            pv = v;
        }
        else if (isValidArray(this.props.validRange) &&
            !isBetween(new Date(), this.props.validRange[0], this.props.validRange[1], 'd')) {
            pv = this.props.validRange[0];
        }
        this.state = {
            value: isValidDate(v) ? v : null,
            pickerValue: pv,
        };
        this.handleOk = this.handleOk.bind(this);
        this.handleCancel = this.handleCancel.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.handleVisibleChange = this.handleVisibleChange.bind(this);
        this.show = this.show.bind(this);
        this.hide = this.hide.bind(this);
    }
    get format() {
        return this.props.format || this.getDefaultFormat();
    }
    handleChange(pickerValue) {
        this.setState({ pickerValue });
    }
    handleOk() {
        const { onOk, onChange } = this.props;
        const value = this.state.pickerValue;
        if (onChange) {
            onChange(value);
        }
        if (onOk) {
            onOk(value);
        }
        this.setState({ value });
    }
    handleVisibleChange(to) {
        const { onVisibleChange } = this.props;
        if (onVisibleChange) {
            onVisibleChange(to);
        }
    }
    handleCancel(reason) {
        const { onCancel } = this.props;
        this.setState({
            pickerValue: this.state.value || new Date(),
        });
        if (isFunction(onCancel)) {
            onCancel(reason);
        }
    }
    componentDidUpdate() {
        if ('value' in this.props) {
            const { value, defaultValue } = this.props;
            const newValue = value || defaultValue;
            if (!newValue && this.state.value) {
                this.setState({
                    value: null,
                });
                return;
            }
            if (newValue === this.state.value) {
                return;
            }
            const newValueDate = toDate(newValue);
            if (!isValidDate(newValueDate)) {
                return;
            }
            if (!this.state.value) {
                const newPickerValue = toValidDate(value);
                this.setState({
                    value: newValueDate,
                    pickerValue: newPickerValue,
                });
                return;
            }
            if (newValueDate.getTime() === this.state.value.getTime()) {
                return;
            }
            this.setState({
                value: newValueDate,
                pickerValue: toValidDate(value),
            });
        }
    }
    show() {
        var _a, _b;
        (_b = (_a = this.ref) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.show();
    }
    hide() {
        var _a, _b;
        (_b = (_a = this.ref) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.hide();
    }
    render() {
        const { value } = this.state;
        const _a = this.props, { prefix = 'mt-', iconType, placeholder, align: alignProp, size: sizeProp, disabled, readOnly, hasClear } = _a, others = __rest(_a, ["prefix", "iconType", "placeholder", "align", "size", "disabled", "readOnly", "hasClear"]);
        return (createElement(ItemContext.Consumer, null, (context) => {
            const { isInsideForm, contentAlign, size: contextSize } = context;
            const align = alignProp || (isInsideForm ? contentAlign : 'left');
            const size = sizeProp || (isInsideForm ? contextSize : 'medium');
            return (createElement(SelectDrawer, Object.assign({}, others, { ref: this.ref, prefix: prefix, hasClear: hasClear, content: value ? dayjs(value).format(this.format) : '', align: align, size: size, iconType: iconType, placeholder: placeholder, disabled: disabled, readOnly: readOnly, onOk: this.handleOk, onCancel: this.handleCancel, onClear: this.handleClear, onVisibleChange: this.handleVisibleChange, disableScroll: true }),
                createElement(View, { className: `${prefix}datepicker-container` }, this.renderPicker())));
        }));
    }
}
export default BasePicker;
