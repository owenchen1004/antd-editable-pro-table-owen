import { __awaiter, __rest } from "tslib";
import { Component, createElement } from 'rax';
import classNames from 'classnames';
import View from '../../view';
import { ItemContext } from '../../form';
import SelectDrawer from '../../select-drawer';
import Calendar from '../../calendar';
import DateTimePicker from '../embed-picker/date-time-picker';
import { withLocale } from '../../locale';
import { isFunction } from '../../utils';
import { DEFAULT_FORMAT } from '../../time-picker/utils';
import { formatDate, isValidDate, toDate } from '../../utils/date';
import { withTime } from '../embed-picker/utils';
class RangePicker extends Component {
    constructor(props) {
        super(props);
        this.state = {
            step: 0,
            value: props.value || props.defaultValue || null,
            pickerValue: this.getPickerValue(props),
        };
        this.scrolling = false;
        this.doScroll = this.doScroll.bind(this);
        this.handleOk = this.handleOk.bind(this);
        this.handleClear = this.handleClear.bind(this);
        this.handleCancel = this.handleCancel.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.handleVisibleChange = this.handleVisibleChange.bind(this);
    }
    getPickerValue(props) {
        if (this.state && this.state.value) {
            return this.state.value;
        }
        const today = new Date();
        return props.value || props.defaultValue || [today, new Date(today.getTime() + 86400000)];
    }
    handleChange(pickerValue) {
        this.setState({ pickerValue });
    }
    handleOneChange(index, value) {
        const pickerValue = index === 0 ? [value] : [this.state.pickerValue[0], value];
        this.setState({ pickerValue });
    }
    doScroll(to) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.scrolling || this.state.step === to) {
                return;
            }
            this.setState({
                step: to,
            });
            this.scrolling = true;
            setTimeout(() => (this.scrolling = false), 200);
        });
    }
    handleOk() {
        const { onOk, showTime, onChange } = this.props;
        const value = this.state.pickerValue;
        if (this.state.step === 0 && showTime) {
            this.setState({
                pickerValue: [this.state.pickerValue[0], this.state.pickerValue[0]],
            });
            this.doScroll(1);
            return false;
        }
        if (value.length === 1) {
            return;
        }
        if (!('value' in this.props)) {
            this.setState({ value });
        }
        if (onChange) {
            onChange(value);
        }
        if (onOk) {
            onOk(value);
        }
    }
    handleVisibleChange(to) {
        const { onVisibleChange, showTime } = this.props;
        if (onVisibleChange) {
            onVisibleChange(to);
        }
        if (to && showTime) {
            this.doScroll(0);
        }
    }
    handleCancel(reason) {
        return __awaiter(this, void 0, void 0, function* () {
            const { step } = this.state;
            const { showTime, onCancel } = this.props;
            if (step === 1 && showTime) {
                yield this.doScroll(0);
                return false;
            }
            if (isFunction(onCancel)) {
                onCancel(reason);
            }
            this.setState({
                pickerValue: this.getPickerValue(this.props),
            });
        });
    }
    handleClear() {
        const { onClear, onChange } = this.props;
        if (!('value' in this.props)) {
            this.setState({
                value: null,
            });
        }
        if (onClear) {
            onClear();
        }
        if (onChange) {
            onChange(null);
        }
    }
    get timeFormat() {
        const { showTime } = this.props;
        return typeof showTime === 'object' && showTime.format ? showTime.format : DEFAULT_FORMAT;
    }
    get format() {
        const { showTime } = this.props;
        const format = this.props.format || 'YYYY-MM-DD';
        return showTime && !withTime(format) ? `${format} ${this.timeFormat}` : format;
    }
    componentDidUpdate() {
        var _a, _b;
        if ('value' in this.props) {
            const { value, defaultValue } = this.props;
            const newValue = value || defaultValue;
            if (!newValue && this.state.value) {
                this.setState({
                    value: null,
                });
                return;
            }
            if (!Array.isArray(newValue) || newValue === this.state.value) {
                return;
            }
            const d1 = toDate(newValue[0]);
            const d2 = toDate(newValue[1]);
            if (!isValidDate(d1) || !isValidDate(d2)) {
                return;
            }
            const newValueDate = [d1, d2];
            if (!this.state.value) {
                this.setState({
                    value: newValueDate,
                    pickerValue: newValueDate,
                });
                return;
            }
            if (d1.getTime() === ((_a = toDate(this.state.value[0])) === null || _a === void 0 ? void 0 : _a.getTime()) &&
                d2.getTime() === ((_b = toDate(this.state.value[1])) === null || _b === void 0 ? void 0 : _b.getTime())) {
                return;
            }
            this.setState({
                value: newValueDate,
                pickerValue: newValueDate,
            });
        }
    }
    render() {
        const { value, step, pickerValue = [] } = this.state;
        const _a = this.props, { prefix = 'mt-', iconType, placeholder, align: alignProp, size: sizeProp, disabled, readOnly, hasClear, showTime, validRange, locale, disabledDate } = _a, others = __rest(_a, ["prefix", "iconType", "placeholder", "align", "size", "disabled", "readOnly", "hasClear", "showTime", "validRange", "locale", "disabledDate"]);
        if (showTime && !validRange) {
            throw new Error('DatePicker with showTime must have validRange');
        }
        const showNext = showTime && step === 0;
        const showPrev = showTime && step === 1;
        const clsPrefix = `${prefix}datepicker-`;
        const nextRange = showTime && step === 1 ? [pickerValue[0], validRange[1]] : validRange;
        return (createElement(ItemContext.Consumer, null, (context) => {
            const { isInsideForm, contentAlign, size: contextSize } = context;
            const align = alignProp || (isInsideForm ? contentAlign : 'left');
            const size = sizeProp || (isInsideForm ? contextSize : 'medium');
            const useRangeLocale = locale ? locale.ok && locale.cancel : null;
            return (createElement(SelectDrawer, Object.assign({}, others, { locale: useRangeLocale ? locale : undefined, prefix: prefix, content: value ? `${formatDate(value[0], this.format)} - ${formatDate(value[1], this.format)}` : '', align: align, size: size, hasClear: hasClear, iconType: iconType, placeholder: placeholder, disabled: disabled, readOnly: readOnly, onOk: this.handleOk, onCancel: this.handleCancel, onClear: this.handleClear, onVisibleChange: this.handleVisibleChange, drawerTitle: showTime ? (showNext && locale ? locale.selectStartTime : locale.selectEndTime) : undefined, okText: showTime && showNext && locale ? locale.next : undefined, cancelText: showTime && showPrev && locale ? locale.prev : undefined }),
                createElement(View, { className: `${clsPrefix}container` }, showTime ? (createElement(View, { className: classNames(`${clsPrefix}range`, {
                        [`${clsPrefix}range--next`]: showPrev,
                    }) },
                    createElement(DateTimePicker, { className: `${clsPrefix}range-item`, showTime: showTime, validRange: validRange, value: pickerValue[0], disabledDate: disabledDate, onChange: this.handleOneChange.bind(this, 0) }),
                    createElement(DateTimePicker, { className: `${clsPrefix}range-item`, showTime: showTime, validRange: nextRange, value: pickerValue[1], disabledDate: disabledDate, onChange: this.handleOneChange.bind(this, 1) }))) : (createElement(Calendar, { prefix: prefix, shape: "range", mode: "month", enableYearPicker: true, value: pickerValue, disabledDate: disabledDate, validRange: validRange, onSelect: this.handleChange })))));
        }));
    }
}
export default withLocale(RangePicker, {
    name: 'DatePicker',
    defaultLocale: {
        ok: '',
        cancel: '',
        prev: '上一步',
        next: '下一步',
        selectStartTime: '选择开始时间',
        selectEndTime: '选择结束时间',
    },
});
