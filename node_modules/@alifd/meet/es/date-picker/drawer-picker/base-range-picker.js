import { __rest } from "tslib";
import { createElement, Component } from 'rax';
import classNames from 'classnames';
import dayjs from 'dayjs';
import View from '../../view';
import SelectDrawer from '../../select-drawer';
import { ItemContext } from '../../form';
import { formatDate, isValidDate, toDate } from '../../utils/date';
import { isFunction } from '../../utils';
import { DEFAULT_FORMAT } from '../../time-picker/utils';
import { withTime } from '../embed-picker/utils';
const DEFAULT_START_TIME = new Date('1970-01-01');
const DEFAULT_END_TIME = new Date('2100-12-31');
class BaseRangePicker extends Component {
    constructor(props) {
        super(props);
        this.getPickerValidRange = (step = 0) => {
            const { validRange = [] } = this.props;
            if (step === 0) {
                return [toDate(validRange[0] || DEFAULT_START_TIME), toDate(validRange[1] || DEFAULT_END_TIME)];
            }
            else {
                return [
                    toDate(this.state.pickerValue[0] || validRange[0] || DEFAULT_START_TIME),
                    toDate(validRange[1] || DEFAULT_END_TIME),
                ];
            }
        };
        this.handleChange = (value) => {
            const { step } = this.state;
            if (step === 0) {
                this.handleFirstStepChange(value);
            }
            else {
                this.handleSecondStepChange(value);
            }
        };
        this.handleFirstStepChange = (value) => {
            const { pickerValue } = this.state;
            this.setState({
                pickerValue: [value, pickerValue[1]],
            });
        };
        this.handleSecondStepChange = (value) => {
            const { pickerValue } = this.state;
            this.setState({
                pickerValue: [pickerValue[0], value],
            });
        };
        this.handleOk = () => {
            const { onOk, onChange } = this.props;
            const pickerValue = this.state.pickerValue;
            const { step } = this.state;
            let value = pickerValue;
            const [startDate, endDate] = pickerValue || [];
            if (startDate && endDate && dayjs(startDate).isAfter(endDate)) {
                value = [startDate, startDate];
            }
            if (step === 1 && !('value' in this.props)) {
                this.setState({ value });
            }
            if (step === 0) {
                this.scrollTo(1);
                return false;
            }
            this.scrollTo(0);
            if (!('value' in this.props)) {
                this.setState({ value });
            }
            if (isFunction(onOk)) {
                onOk(value);
            }
            if (isFunction(onChange)) {
                onChange(value);
            }
            return true;
        };
        this.handleCancel = (reason) => {
            const { onCancel } = this.props;
            const { step } = this.state;
            if (reason === 'cancel-button' && step === 1) {
                this.scrollTo(0);
                return false;
            }
            this.scrollTo(0, 250);
            if (isFunction(onCancel)) {
                onCancel(reason);
            }
            this.setState({
                pickerValue: this.getPickerValue(this.props),
            });
            return true;
        };
        this.handleClear = () => {
            const { onClear, onChange } = this.props;
            if (!('value' in this.props)) {
                this.setState({
                    value: null,
                });
            }
            if (onClear) {
                onClear();
            }
            if (onChange) {
                onChange(null);
            }
        };
        this.state = {
            step: 0,
            value: props.value || props.defaultValue || null,
            pickerValue: this.getPickerValue(props),
        };
    }
    get rangeType() {
        return 'second';
    }
    get timeFormat() {
        const { showTime } = this.props;
        return typeof showTime === 'object' && showTime.format ? showTime.format : DEFAULT_FORMAT;
    }
    get format() {
        const { showTime } = this.props;
        const format = this.props.format || 'YYYY-MM-DD';
        return showTime && !withTime(format) ? `${format} ${this.timeFormat}` : format;
    }
    getPickerValue(props) {
        var _a;
        const { value, defaultValue } = props;
        const today = dayjs()
            .startOf(this.rangeType)
            .toDate();
        if ((_a = this.state) === null || _a === void 0 ? void 0 : _a.value) {
            const [start, end] = this.state.value;
            return [start || today, end || today];
        }
        if (value) {
            const [start, end] = value;
            return [start || today, end || today];
        }
        if (defaultValue) {
            const [start, end] = defaultValue;
            return [start || today, end || today];
        }
        return [today, today];
    }
    scrollTo(step, wait) {
        if (wait) {
            setTimeout(() => {
                this.setState({
                    step,
                });
            }, wait);
        }
        else {
            this.setState({
                step,
            });
        }
    }
    componentDidUpdate() {
        var _a, _b;
        if ('value' in this.props) {
            const { value, defaultValue } = this.props;
            const newValue = value || defaultValue;
            if (!newValue && this.state.value) {
                this.setState({
                    value: null,
                });
                return;
            }
            if (!Array.isArray(newValue) || newValue === this.state.value) {
                return;
            }
            const d1 = toDate(newValue[0]);
            const d2 = toDate(newValue[1]);
            if (!isValidDate(d1) || !isValidDate(d2)) {
                return;
            }
            const newValueDate = [d1, d2];
            if (!this.state.value) {
                this.setState({
                    value: newValueDate,
                    pickerValue: newValueDate,
                });
                return;
            }
            if (d1.getTime() === ((_a = toDate(this.state.value[0])) === null || _a === void 0 ? void 0 : _a.getTime()) &&
                d2.getTime() === ((_b = toDate(this.state.value[1])) === null || _b === void 0 ? void 0 : _b.getTime())) {
                return;
            }
            this.setState({
                value: newValueDate,
                pickerValue: newValueDate,
            });
        }
    }
    render() {
        const { value, step, pickerValue } = this.state;
        const _a = this.props, { prefix = 'mt-', iconType, placeholder, align: alignProp, size: sizeProp, disabled, readOnly, hasClear, locale } = _a, others = __rest(_a, ["prefix", "iconType", "placeholder", "align", "size", "disabled", "readOnly", "hasClear", "locale"]);
        const clsPrefix = `${prefix}datepicker-`;
        const showNext = step === 0;
        const showPrev = step === 1;
        return (createElement(ItemContext.Consumer, null, (context) => {
            const { isInsideForm, contentAlign, size: contextSize } = context;
            const align = alignProp || (isInsideForm ? contentAlign : 'left');
            const size = sizeProp || (isInsideForm ? contextSize : 'medium');
            const useRangeLocale = locale ? locale.ok && locale.cancel : null;
            return (createElement(SelectDrawer, Object.assign({}, others, { locale: useRangeLocale ? locale : undefined, prefix: prefix, content: value ? `${formatDate(dayjs(value[0]), this.format)} - ${formatDate(dayjs(value[1]), this.format)}` : '', align: align, size: size, hasClear: hasClear, iconType: iconType, placeholder: placeholder, disabled: disabled, readOnly: readOnly, onOk: this.handleOk, onCancel: this.handleCancel, onClear: this.handleClear, drawerTitle: showNext && locale ? locale.selectStartTime : locale.selectEndTime, okText: showNext && locale ? locale.next : null, cancelText: showPrev && locale ? locale.prev : null }),
                createElement(View, { className: `${clsPrefix}container` },
                    createElement(View, { className: classNames(`${clsPrefix}range`, {
                            [`${clsPrefix}range--next`]: showPrev,
                        }) },
                        this.renderFirstChild(pickerValue[0], this.getPickerValidRange(0), this.handleFirstStepChange),
                        this.renderSecondChild(pickerValue[1], this.getPickerValidRange(1), this.handleSecondStepChange)))));
        }));
    }
}
export default BaseRangePicker;
