import { createElement } from 'rax';
import Calendar from '../../calendar';
import EmbedDatePicker from '../embed-picker/date-picker';
import EmbedDateTimePicker from '../embed-picker/time-picker';
import EmbedMinutePicker from '../embed-picker/minute-picker';
import { DEFAULT_FORMAT } from '../../time-picker/utils';
import { withTime } from '../embed-picker/utils';
import BasePicker from './base-picker';
export default class DatePicker extends BasePicker {
    renderPicker() {
        const { showTime, validRange, mode } = this.props;
        if (mode === 'picker') {
            let embedPicker = null;
            if (showTime) {
                const { format } = showTime;
                if (format === 'HH:mm') {
                    embedPicker = (createElement(EmbedMinutePicker, { value: this.state.pickerValue, disabledDate: this.props.disabledDate, validRange: validRange, onChange: this.handleChange }));
                }
                else {
                    embedPicker = (createElement(EmbedDateTimePicker, { value: this.state.pickerValue, disabledDate: this.props.disabledDate, validRange: validRange, onChange: this.handleChange }));
                }
            }
            else {
                embedPicker = (createElement(EmbedDatePicker, { value: this.state.pickerValue, disabledDate: this.props.disabledDate, validRange: validRange, onChange: this.handleChange }));
            }
            return embedPicker;
        }
        if (showTime) {
            if (!validRange) {
                throw new Error('DatePicker with showTime must have validRange');
            }
            const { format } = showTime;
            return (createElement(Calendar, { shape: "panel", mode: "month", enableYearPicker: true, enableTimePicker: true, timeFormat: format, value: this.state.pickerValue, disabledDate: this.props.disabledDate, validRange: validRange, onSelect: this.handleChange }));
        }
        else {
            return (createElement(Calendar, { shape: "panel", mode: "month", enableYearPicker: true, value: this.state.pickerValue, disabledDate: this.props.disabledDate, validRange: this.props.validRange, onSelect: this.handleChange }));
        }
    }
    get timeFormat() {
        const { showTime } = this.props;
        return typeof showTime === 'object' && showTime.format ? showTime.format : DEFAULT_FORMAT;
    }
    get format() {
        const { showTime } = this.props;
        const format = this.props.format || 'YYYY-MM-DD';
        return showTime && !withTime(format) ? `${format} ${this.timeFormat}` : format;
    }
    getDefaultFormat() {
        return '';
    }
}
