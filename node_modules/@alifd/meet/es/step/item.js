import { __rest } from "tslib";
import { createElement } from 'rax';
import classNames from 'classnames';
import isValidElement from 'rax-is-valid-element';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import Progress from '../progress';
import { isNumber, isString } from '../utils';
const Item = (props) => {
    const { prefix = 'mt-', order, shape, isFirst = false, isLast = false, disabled = false, isPreDisabled = false, direction, percent, addon, title, content, status, className, icon, onClick } = props, others = __rest(props, ["prefix", "order", "shape", "isFirst", "isLast", "disabled", "isPreDisabled", "direction", "percent", "addon", "title", "content", "status", "className", "icon", "onClick"]);
    const clsPrefix = `${prefix}step-item`;
    const isArrow = shape === 'arrow';
    const isCircle = shape === 'circle';
    const clses = {
        item: classNames(clsPrefix, className, `${clsPrefix}--${status}`, `${clsPrefix}--${shape}`, {
            [`${clsPrefix}--last`]: isLast,
            [`${clsPrefix}--first`]: isFirst,
            [`${clsPrefix}--disabled`]: disabled,
            [`${clsPrefix}--pre-disabled`]: isPreDisabled,
        }),
        dot: classNames(`${clsPrefix}-dot`),
        indicator: `${clsPrefix}-indicator`,
        hornLeft: classNames(`${clsPrefix}-horn`, `${clsPrefix}-horn--left`, {
            [`${clsPrefix}-horn--hide`]: isFirst,
        }),
        hornRight: classNames(`${clsPrefix}-horn`, `${clsPrefix}-horn--right`, {
            [`${clsPrefix}-horn--hide`]: isLast,
        }),
        node: classNames(`${clsPrefix}-node`, {
            [`${clsPrefix}-node--percent`]: isCircle && isNumber(percent),
        }),
        addon: classNames(`${clsPrefix}-addon`, {
            [`${clsPrefix}-addon--first`]: isFirst,
        }),
    };
    const renderCirleContent = () => {
        if (isCircle) {
            if (isString(icon) && icon !== '') {
                return createElement(Icon, { name: icon, size: "xs" });
            }
            else if (isValidElement(icon)) {
                return icon;
            }
            else if (status === 'finish') {
                return createElement(Icon, { name: "select", size: "xs" });
            }
            else {
                return (order || 0) + 1;
            }
        }
        else if (shape === 'arrow') {
            return title;
        }
        else {
            return null;
        }
    };
    return (createElement(View, Object.assign({}, others, { className: clses.item, onClick: onClick }),
        addon && ['dot', 'circle'].indexOf(shape) > -1 && direction === 'ver' ? (createElement(View, { className: clses.addon }, addon)) : null,
        createElement(View, { className: clses.indicator },
            !isArrow || !isFirst ? createElement(View, { className: clses.hornLeft }) : null,
            isCircle && percent ? (createElement(Progress, { className: clses.node, percent: percent, shape: "circle" })) : (createElement(View, { className: clses.node },
                " ",
                renderCirleContent())),
            !isArrow || !isLast ? createElement(View, { className: clses.hornRight }) : null),
        !isArrow ? (createElement(View, { className: `${clsPrefix}-body` },
            isValidElement(title) ? (createElement(View, { className: `${clsPrefix}-title` }, title)) : (createElement(Text, { className: `${clsPrefix}-title` }, title || ' ')),
            isValidElement(content) ? (createElement(View, { className: `${clsPrefix}-content` }, content)) : (createElement(Text, { className: `${clsPrefix}-content` }, content || ' ')))) : null));
};
Item.displayName = 'Step.Item';
export default Item;
