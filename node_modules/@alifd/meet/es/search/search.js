import { __rest } from "tslib";
import { createElement, forwardRef, useEffect, useState, useRef, } from 'rax';
import classNames from 'classnames';
import Text from 'rax-text';
import { isWeb } from '@uni/env';
import View from '../view';
import Icon from '../icon';
import Input from '../input';
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
import { useDeprecated, useValue } from '../utils/hooks';
import { isFunction, isString } from '../utils';
const SearchTag = (props) => {
    const { children, inForm = false, onSubmit = () => { } } = props, others = __rest(props, ["children", "inForm", "onSubmit"]);
    if (isWeb && !inForm) {
        return (createElement("form", Object.assign({}, others, { action: "#", onSubmit: (e) => {
                e.preventDefault();
                onSubmit();
            } }), children));
    }
    else {
        return createElement(View, Object.assign({}, others), children);
    }
};
const Search = (props, _ref) => {
    const { prefix = 'mt-', size = 'medium', value: valueProp, placeholder, defaultValue, searchText, icon = 'search', keyboardType = 'web-search', maxLength, enableNative = false, focused = false, highlightable = false, hasIcon = true, hasClear = false, hasCancel = false, disabled = false, className, cancelText, onChange, onConfirm: _onConfirm, onSearch: _onSearch, onBlur = () => { }, onFocus = () => { }, onCancel = () => { }, onClear } = props, others = __rest(props, ["prefix", "size", "value", "placeholder", "defaultValue", "searchText", "icon", "keyboardType", "maxLength", "enableNative", "focused", "highlightable", "hasIcon", "hasClear", "hasCancel", "disabled", "className", "cancelText", "onChange", "onConfirm", "onSearch", "onBlur", "onFocus", "onCancel", "onClear"]);
    const clsPrefix = `${prefix}search`;
    const rcRef = useRef(null);
    const ref = _ref || rcRef;
    const [isFocused, setFocused] = useState(false);
    const [isInForm, setInForm] = useState(true);
    const locale = useLocale('Search', props, defaultLang.Search);
    const [value, setValue, isControlled] = useValue(props, '');
    const clses = {
        search: classNames(className, {
            [`${clsPrefix}`]: true,
            [`${clsPrefix}--${size}`]: true,
            [`${clsPrefix}--highlighted`]: highlightable && isFocused,
        }),
    };
    const handleChange = (v, e) => {
        if (!isControlled) {
            setValue(v);
        }
        if (onChange) {
            onChange(v, e);
        }
    };
    const renderIcon = () => {
        let searchIcon = icon;
        if (!hasIcon) {
            searchIcon = null;
        }
        else if (isString(icon)) {
            searchIcon = (createElement(Icon, { name: icon, className: classNames(`${prefix}search--icon`, `${prefix}search--icon-${size}`) }));
        }
        return searchIcon;
    };
    useEffect(() => {
        if (isWeb && ref && ref.current) {
            let el = ref.current;
            let _inForm = false;
            while (el.parentNode && el.parentNode !== el) {
                if (el.parentNode.tagName && el.parentNode.tagName.toLowerCase() === 'form') {
                    _inForm = true;
                    break;
                }
                el = el.parentNode;
            }
            setInForm(_inForm);
        }
    }, []);
    const onSearch = useDeprecated('Search', props, 'onConfirm', 'onSearch');
    const handleSubmit = (v) => {
        if (onSearch) {
            onSearch(v);
        }
    };
    const handleWebSubmit = () => {
        if (isWeb) {
            const inputEl = ref.current.getElementsByTagName('input');
            if (inputEl && inputEl[0] && inputEl[0].value) {
                handleSubmit(inputEl[0].value);
            }
            else {
                handleSubmit('');
            }
        }
    };
    const handleFocus = () => {
        setFocused(true);
        if (isFunction(onFocus)) {
            onFocus();
        }
    };
    const handleBlur = () => {
        setFocused(false);
        if (isFunction(onBlur)) {
            onBlur();
        }
    };
    const focusProp = Object.assign({}, (focused ? { focused: true } : null));
    return (createElement(SearchTag, Object.assign({}, others, { inForm: isInForm, className: clses.search, onSubmit: handleWebSubmit }),
        createElement(View, { ref: ref, className: classNames(className, `${prefix}search--wrapper`) },
            renderIcon(),
            createElement(Input, Object.assign({}, focusProp, { className: classNames(`${prefix}search-input`, `${prefix}search-input--${size}`), composition: true, confirmType: "search", value: value, size: size, placeholder: placeholder || locale.searchTipText, keyboardType: keyboardType, disabled: disabled, maxLength: maxLength, hasClear: hasClear, enableNative: enableNative, onChange: handleChange, onConfirm: handleSubmit, onFocus: handleFocus, onBlur: handleBlur, onClear: onClear }))),
        hasCancel ? (createElement(Text, { onClick: onCancel, className: classNames(`${prefix}search--${size}-cancel`) }, cancelText || locale.cancelText)) : null));
};
Search.displayName = 'Search';
export default forwardRef(Search);
