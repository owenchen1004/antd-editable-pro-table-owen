import { createElement, forwardRef, Fragment } from 'rax';
import classNames from 'classnames';
import Text from 'rax-text';
import View from '../view';
import { stopPropagation } from '../utils';
const Item = (props, ref) => {
    const { disabled = false, prefix = 'mt-', size, last, disabledAll, onClick, index, count, maxNode, separator, } = props;
    const renderSeparator = () => {
        return separator ? (createElement(View, { className: classNames([
                `${prefix}breadcrumb-item-icon-custom`,
                `${prefix}breadcrumb-item--font-${size}-size`,
                `${prefix}breadcrumb-item--margin-${size}-size`,
                {
                    [`${prefix}breadcrumb-item--arrow-disabled`]: disabledAll,
                },
            ]) }, separator)) : (createElement(View, { className: classNames([
                `${prefix}breadcrumb-item-icon`,
                `${prefix}breadcrumb-item--arrow-${size}-size`,
                `${prefix}breadcrumb-item--margin-${size}-size`,
                {
                    [`${prefix}breadcrumb-item--arrow-disabled`]: disabledAll,
                },
            ]) }));
    };
    const renderFull = () => (createElement(Fragment, null,
        createElement(View, { className: classNames(`${prefix}breadcrumb-item--action`, {
                [`${prefix}breadcrumb-item--action-disabled`]: disabled || disabledAll,
                [`${prefix}breadcrumb-item--action-active`]: last,
            }) }, props.children),
        last ? '' : renderSeparator()));
    const shouldHide = count > maxNode && index !== 0 && count - index >= maxNode - 1;
    if (shouldHide && index !== 1) {
        return null;
    }
    const renderItem = () => {
        if (shouldHide && index === 1) {
            return (createElement(Fragment, null,
                createElement(Text, null, '...'),
                last ? '' : renderSeparator()));
        }
        return renderFull();
    };
    return (createElement(View, { ref: ref, className: classNames([
            `${prefix}breadcrumb-item`,
            `${prefix}breadcrumb-item--font-${size}-size`,
            `${prefix}breadcrumb-item--space-${size}-size`,
            {
                [`${prefix}breadcrumb-item--disabled`]: disabled || disabledAll,
            },
        ]), onClick: (e) => {
            if (disabled || disabledAll) {
                stopPropagation(e);
            }
            else {
                onClick(index);
            }
        } }, renderItem()));
};
Item.displayName = 'BreadCrumb.Item';
export default forwardRef(Item);
