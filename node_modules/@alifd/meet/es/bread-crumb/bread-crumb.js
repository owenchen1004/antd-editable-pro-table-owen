import { createElement, forwardRef } from 'rax';
import classNames from 'classnames';
import Children from 'rax-children';
import cloneElement from 'rax-clone-element';
import isValidElement from 'rax-is-valid-element';
import ScrollView from 'rax-scrollview';
import View from '../view';
import { isStrictWechatMiniProgram } from '../utils';
const BreadCrumb = (props, ref) => {
    const { className = '', prefix = 'mt-', size = 'medium', maxNode = 100, disabled = false, onClick = () => { }, separator, children, } = props;
    const count = Children.count(children);
    const clsPrefix = `${prefix}breadcrumb`;
    return (createElement(ScrollView, { ref: ref, className: classNames(className, clsPrefix, {
            [`${clsPrefix}--${size}`]: isStrictWechatMiniProgram,
        }), showsHorizontalScrollIndicator: false, horizontal: true },
        createElement(View, { className: classNames(`${clsPrefix}-container`, {
                [`${clsPrefix}-container--${size}`]: isStrictWechatMiniProgram,
            }) }, Children.map(children, (child, index) => {
            if (!isValidElement(child)) {
                return null;
            }
            return cloneElement(child, {
                key: index,
                index,
                size,
                last: index === count - 1 && isValidElement(child),
                disabledAll: disabled,
                maxNode,
                count,
                onClick,
                separator,
            });
        }))));
};
BreadCrumb.displayName = 'BreadCrumb';
export default forwardRef(BreadCrumb);
