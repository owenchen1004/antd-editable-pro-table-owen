import { __rest } from "tslib";
import { createElement, forwardRef, useState, useEffect } from 'rax';
import classNames from 'classnames';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import Modal from '../modal';
import { isStrictByteDanceMicroApp, isStrictWechatMiniProgram } from '../utils';
const Drawer = (props, ref) => {
    const { prefix = 'mt-', placement = 'bottom', visible = false, className, height, width, title, titleAlign = 'left', containerClassName, closeMode = ['mask', 'close'], onShow = () => { }, onClose = () => { }, children, style = {} } = props, others = __rest(props, ["prefix", "placement", "visible", "className", "height", "width", "title", "titleAlign", "containerClassName", "closeMode", "onShow", "onClose", "children", "style"]);
    const drawerCls = classNames(`${prefix}drawer`, className, `${prefix}drawer--${placement}`);
    const [drawerVisible, setVisible] = useState(visible);
    const showCloseIcon = Array.isArray(closeMode) && closeMode.indexOf('close') > -1;
    useEffect(() => {
        if (visible && (isStrictWechatMiniProgram || isStrictByteDanceMicroApp)) {
            setTimeout(() => {
                setVisible(true);
            }, 50);
        }
        else {
            setVisible(visible);
        }
    }, [visible]);
    return (createElement(Modal, Object.assign({}, others, { ref: ref, maskClosable: closeMode.indexOf('mask') > -1, onClose: onClose, visible: drawerVisible, placement: placement, className: `${prefix}drawer-modal`, containerClassName: drawerCls, containerStyle: Object.assign({ width,
            height }, style) }),
        createElement(View, { className: `${prefix}drawer-container` },
            title ? (createElement(Text, { className: classNames(`${prefix}drawer-title`, {
                    [`${prefix}drawer-title--center`]: titleAlign === 'center',
                    [`${prefix}drawer-title--with-icon`]: titleAlign === 'left' && showCloseIcon,
                }), numberOfLines: 1 }, title)) : null,
            showCloseIcon ? (createElement(View, { className: `${prefix}drawer-close`, onClick: () => {
                    onClose('close');
                } },
                createElement(Icon, { className: `${prefix}drawer-close-icon`, name: "close" }))) : null,
            createElement(View, { className: classNames(`${prefix}drawer-body`, containerClassName) }, children))));
};
Drawer.displayName = 'Drawer';
export default forwardRef(Drawer);
