import { __rest } from "tslib";
import { createElement } from 'rax';
import { renderToRoot } from '../utils/render';
import Message from './message';
import View from '../view';
import { isString } from '../utils';
let hideCurrent = null;
export const hide = function () {
    if (hideCurrent) {
        hideCurrent();
    }
    hideCurrent = null;
};
export const show = function (options) {
    const { shape = 'toast', prefix = 'mt-', duration = 1500, content, type, onClose } = options, other = __rest(options, ["shape", "prefix", "duration", "content", "type", "onClose"]);
    const clsPrefix = `${prefix}message`;
    hide();
    const hideThis = renderToRoot(createElement(View, { "disable-scroll": true },
        createElement(Message, Object.assign({ visible: true, shape: shape, type: type }, other), content),
        createElement(View, { "disable-scroll": true, className: `${clsPrefix}-mask` })), onClose);
    hideCurrent = hideThis;
    if (duration > 0) {
        if (type === 'loading' && !('duration' in options)) {
            return hideThis;
        }
        setTimeout(() => {
            hideThis();
            if (hideCurrent === hideThis) {
                hideCurrent = null;
            }
        }, duration);
    }
    return hideThis;
};
const handleFastCall = (type, options) => {
    let opts;
    if (isString(options)) {
        opts = {
            title: options,
        };
    }
    else {
        opts = options;
    }
    return show(Object.assign(Object.assign({}, opts), { type }));
};
export const success = handleFastCall.bind(null, 'success');
export const error = handleFastCall.bind(null, 'error');
export const notice = handleFastCall.bind(null, 'notice');
export const help = handleFastCall.bind(null, 'help');
export const loading = handleFastCall.bind(null, 'loading');
