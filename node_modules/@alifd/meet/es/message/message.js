import { __rest } from "tslib";
import { createElement, forwardRef } from 'rax';
import classNames from 'classnames';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import { isString, isFunction } from '../utils';
import { useValue } from '../utils/hooks';
const ICON_MAP = {
    success: 'success',
    warning: 'warning',
    error: 'error',
    notice: 'prompt',
    help: 'help',
    loading: 'loading',
};
const Message = (props, ref) => {
    const { prefix = 'mt-', className, shape = 'inline', type, visible: visibleProp, defaultVisible = false, title, iconType, closable = false, onClose, children, zIndex, style } = props, others = __rest(props, ["prefix", "className", "shape", "type", "visible", "defaultVisible", "title", "iconType", "closable", "onClose", "children", "zIndex", "style"]);
    const newStyle = Object.assign({ zIndex }, style);
    const [visible, setVisible, isControlled] = useValue(props, false, {
        valueName: 'visible',
    });
    if (!visible) {
        return null;
    }
    const clsPrefix = `${prefix}message`;
    const toastContent = title || children;
    const isToast = shape === 'toast';
    const hideIcon = iconType === null || iconType === '' || (isToast && !type);
    const isSimpleMode = shape === 'inline' && !title && children;
    const handleClose = () => {
        if (!isControlled) {
            setVisible(false);
        }
        if (isFunction(onClose)) {
            onClose();
        }
    };
    return (createElement(View, Object.assign({ ref: ref, className: classNames(clsPrefix, `${clsPrefix}--${type}`, `${clsPrefix}--${shape}`, className, {
            [`${clsPrefix}--${shape}-${type}`]: shape && type,
            [`${clsPrefix}--inline--no-title`]: shape === 'inline' && !toastContent,
            [`${clsPrefix}--toast-with-icon`]: shape === 'toast' && !hideIcon,
        }), style: newStyle }, others),
        !hideIcon && (createElement(View, { className: `${clsPrefix}-icon-container--${shape}` },
            createElement(Icon, { name: iconType || ICON_MAP[type] || type, className: classNames(`${clsPrefix}-icon`, `${clsPrefix}-icon--${type}`, `${clsPrefix}-icon--${shape}`) }))),
        createElement(View, { className: `${clsPrefix}-container ${clsPrefix}-container--${shape}` },
            title && !isToast && (createElement(View, { className: classNames(`${clsPrefix}-title`) }, isString(title) ? (createElement(Text, { className: classNames(`${clsPrefix}-title`, {
                    [`${clsPrefix}-title--${type}`]: isSimpleMode,
                }), numberOfLines: 1 }, title || children)) : (title))),
            createElement(View, { className: classNames(`${clsPrefix}-content-container`, `${clsPrefix}-content-container--${shape}`) },
                isToast && isString(toastContent) ? (createElement(Text, { className: classNames(`${clsPrefix}-content`, `${clsPrefix}-content--${shape}`), numberOfLines: 20 }, toastContent)) : null,
                isToast && !isString(toastContent) ? toastContent : null,
                !isToast && children ? (createElement(View, { className: classNames(`${clsPrefix}-content--inline`, {
                        [`${clsPrefix}-content--no-title`]: shape === 'inline' && !title,
                        [`${clsPrefix}-content--inline-${type}`]: isSimpleMode,
                        [`${clsPrefix}-content--inline-simple`]: isSimpleMode,
                    }) }, children)) : null)),
        closable && !isToast && (createElement(Icon, { name: "close", size: "s", className: classNames(`${clsPrefix}-close`, {
                [`${clsPrefix}-close--${type}`]: isSimpleMode,
            }), onClick: handleClose }))));
};
Message.displayName = 'Message';
export default forwardRef(Message);
