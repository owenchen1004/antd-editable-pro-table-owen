import { __rest } from "tslib";
import classNames from 'classnames';
import { createContext, createElement, forwardRef, useEffect, useRef, useState } from 'rax';
import Children from 'rax-children';
import cloneElement from 'rax-clone-element';
import ScrollView from 'rax-scrollview';
import { useGuid } from '../utils/hooks';
import View from '../view';
import SideBarItem from './item';
export const SideBarContext = createContext({
    activeKey: -1,
    align: 'left',
    change: () => { },
});
const getInitActiveKey = (props) => {
    if ('activeKey' in props && props.activeKey) {
        return props.activeKey;
    }
    else if (props.defaultActiveKey || props.defaultActiveKey === 0) {
        return props.defaultActiveKey;
    }
    else {
        return undefined;
    }
};
const SideBar = (props, ref) => {
    const { prefix = 'mt-', align = 'left', activeKey, defaultActiveKey = -1, onChange = () => { }, dataSource = [], height, width, className, renderContent = null, contentClassName, contentStyle, renderSideBar, children } = props, others = __rest(props, ["prefix", "align", "activeKey", "defaultActiveKey", "onChange", "dataSource", "height", "width", "className", "renderContent", "contentClassName", "contentStyle", "renderSideBar", "children"]);
    const [curActiveKey, setActiveKey] = useState(getInitActiveKey(props));
    const curSideBarScrollId = useGuid('side-bar-scroll-');
    const curSideBarScrollContainerId = useGuid('side-bar-ctn-');
    const activeBarRef = useRef();
    const isControlled = 'activeKey' in props;
    const clsPrefix = `${prefix}side-bar`;
    const clses = {
        container: classNames([`${clsPrefix}-container`]),
        bar: classNames([clsPrefix, className]),
        scrollContainer: `${clsPrefix}-scroll-container`,
        scrollContent: `${clsPrefix}-scroll-content`,
        content: classNames(`${clsPrefix}-content`, contentClassName),
    };
    useEffect(() => {
        if (isControlled && curActiveKey && !props.activeKey) {
            setActiveKey(getInitActiveKey(props));
            return;
        }
        if (isControlled) {
            setActiveKey(props.activeKey);
        }
    });
    let content;
    if (dataSource && dataSource.length > 0) {
        content = dataSource.map((item, index) => {
            return (createElement(SideBarItem, Object.assign({ key: item.key || index, itemKey: item.key, renderContent: renderSideBar, ref: item.key === curActiveKey ? activeBarRef : null, prefix: prefix }, item)));
        });
    }
    else {
        content = Children.map(children, (child, index) => {
            return cloneElement(child, {
                key: `mt_side_bar_${index}`,
                itemKey: child.key || index,
                ref: `${child.key}` === `${curActiveKey}` ? activeBarRef : null,
                renderContent: child.renderContent || renderSideBar,
                prefix,
            });
        });
    }
    const handleChange = (v) => {
        if (!isControlled) {
            setActiveKey(v);
        }
        onChange(v);
    };
    const getChildren = (activeBarKey) => {
        let ret = null;
        Children.forEach(children, (child) => {
            if (ret) {
                return;
            }
            const _key = child.key;
            if (`${_key}` === `${activeBarKey}`) {
                ret = child.props.children;
            }
        });
        return ret;
    };
    return (createElement(SideBarContext.Provider, { value: {
            activeKey: curActiveKey,
            align,
            change: handleChange,
        } },
        createElement(View, { className: clses.container },
            createElement(View, Object.assign({}, others, { className: clses.bar, style: { width, maxWidth: width }, ref: ref }),
                createElement(ScrollView, { id: curSideBarScrollId, className: clses.scrollContainer, showsVerticalScrollIndicator: false, showsHorizontalScrollIndicator: false, style: { height, width, maxWidth: width } },
                    createElement(View, { id: curSideBarScrollContainerId, className: clses.scrollContent }, content))),
            createElement(View, { className: clses.content, style: contentStyle }, renderContent || getChildren(curActiveKey)))));
};
SideBar.displayName = 'SideBar';
export default forwardRef(SideBar);
