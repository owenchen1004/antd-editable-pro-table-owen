import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, Fragment, useContext } from 'rax';
import isValidElement from 'rax-is-valid-element';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import Badge from '../badge';
import { SideBarContext } from './side-bar';
import { useGuid } from '../utils/hooks';
import { isString } from '../utils';
const SideBarItem = (props, ref) => {
    const { prefix = 'mt-', className, itemKey, title = '', icon = '', count = 0, dot = false, children, onClick = () => { }, renderContent = null } = props, others = __rest(props, ["prefix", "className", "itemKey", "title", "icon", "count", "dot", "children", "onClick", "renderContent"]);
    const { activeKey, align, change } = useContext(SideBarContext);
    const active = `${activeKey}` === `${itemKey}`;
    const clsPrefix = `${prefix}side-bar-item`;
    const curItemId = useGuid('side-bar-item-');
    const clses = {
        bar: classNames(clsPrefix, [`${clsPrefix}-${align}`], {
            [`${clsPrefix}--active`]: active,
        }, className),
        activeLine: `${clsPrefix}-active-line`,
        barText: classNames(`${clsPrefix}-text`, {
            [`${clsPrefix}-text--active`]: active,
        }),
        barBadge: `${clsPrefix}-badge`,
        barIcon: classNames(`${clsPrefix}-icon`, {
            [`${clsPrefix}-icon--active`]: active,
        }),
    };
    const renderTitle = () => {
        if (isValidElement(title)) {
            return createElement(View, { className: clses.barText }, title);
        }
        else if (isString(title)) {
            return createElement(Text, { className: clses.barText }, title);
        }
        return null;
    };
    const handleClick = (e) => {
        if (onClick) {
            onClick(Object.assign(Object.assign({}, e), { itemKey }));
        }
        change(itemKey);
    };
    return (createElement(View, Object.assign({}, others, { id: curItemId, ref: ref, className: clses.bar, onClick: handleClick }),
        renderContent ? (renderContent({
            title,
            active,
            icon,
            count,
            dot,
        })) : dot || count ? (createElement(Badge, { className: clses.barBadge, dot: dot, count: count },
            icon ? createElement(Icon, { className: clses.barIcon, name: icon }) : null,
            renderTitle())) : (createElement(Fragment, null,
            icon ? createElement(Icon, { className: clses.barIcon, name: icon }) : null,
            renderTitle())),
        createElement(View, { className: classNames(clses.activeLine, {
                [`${clsPrefix}-active-line--enter`]: active,
                [`${clsPrefix}-active-line--exit`]: !active,
            }) })));
};
SideBarItem.displayName = 'SideBar.Item';
export default forwardRef(SideBarItem);
