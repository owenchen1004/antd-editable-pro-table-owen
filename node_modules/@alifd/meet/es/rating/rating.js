import classNames from 'classnames';
import { createElement, forwardRef, useContext } from 'rax';
import View from '../view';
import Icon from '../icon';
import Form from '../form';
import { useValue } from '../utils/hooks';
const Rating = (props, ref) => {
    const { prefix = 'mt-', size: sizeProp, disabled = false, readOnly = false, count = 5, iconType = 'favorites-filling', onChange, className, style, } = props;
    const [value, setValue, isControlled] = useValue(props, 0);
    const { contentAlign, size: contextSize } = useContext(Form.ItemContext);
    const size = sizeProp || contextSize;
    const gradeType = value > count * 0.4 ? 'high' : 'low';
    const iconClassName = classNames(`${prefix}rating--${size}-icon`, `${prefix}rating-icon`);
    const classnames = {
        rating: classNames(`${prefix}rating`, `${prefix}rating--${size}`, `${prefix}rating--${contentAlign}`, `${prefix}rating--grade-${gradeType}`, {
            [`${prefix}rating--readonly`]: readOnly,
            [`${prefix}rating--disabled`]: disabled,
        }, className),
        iconWrapper: classNames(`${prefix}rating--${size}-icon-wrapper`, `${prefix}rating-icon-wrapper`),
        icon: iconClassName,
        activeIcon: classNames(iconClassName, `${prefix}rating-icon--active`, `${prefix}rating-icon--active-${gradeType}`),
    };
    const handleClick = (v) => {
        if (disabled || readOnly || v < 0) {
            return;
        }
        if (!isControlled) {
            setValue(v);
        }
        if (onChange) {
            onChange(v);
        }
    };
    const stars = [];
    for (let i = 0; i < count; i++) {
        const isActive = Math.floor(value - 1) >= i;
        const half = value - i < 1 && value - i > 0 ? (createElement(View, { key: `${i}-overlay`, className: classNames(classnames.iconWrapper, `${classnames.iconWrapper}--overlay`), onClick: handleClick.bind(null, i + 1) },
            createElement(Icon, { name: iconType, size: size, className: classnames.activeIcon, style: {
                    width: `${100 * (value - i)}%`,
                } }))) : null;
        stars.push(createElement(View, { key: i, className: classNames(classnames.iconWrapper, {
                [`${classnames.iconWrapper}--first`]: i === 0,
                [`${classnames.iconWrapper}--last`]: i === count - 1,
            }), onClick: handleClick.bind(null, i + 1) },
            createElement(Icon, { name: iconType, size: size, className: isActive ? classnames.activeIcon : classnames.icon }),
            half));
    }
    return (createElement(View, { ref: ref, className: classnames.rating, style: style }, stars));
};
Rating.displayName = 'Rating';
export default forwardRef(Rating);
