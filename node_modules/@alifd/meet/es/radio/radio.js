import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, useEffect, useState } from 'rax';
import Text from 'rax-text';
import View from '../view';
import { isFunction, isNumber, isString } from '../utils';
const getInitCheckedStatus = (props) => {
    if ('checked' in props) {
        return props.checked;
    }
    else if (props.defaultChecked) {
        return props.defaultChecked;
    }
};
const Radio = (props, ref) => {
    const { size = 'medium', prefix = 'mt-', children, checked, onChange, disabled, className, defaultChecked, readOnly, onClick, value, label, text } = props, others = __rest(props, ["size", "prefix", "children", "checked", "onChange", "disabled", "className", "defaultChecked", "readOnly", "onClick", "value", "label", "text"]);
    const [selected, setSelected] = useState(getInitCheckedStatus(props));
    const selectedPrefix = selected ? '--selected' : '--unselected';
    const disabledPrefix = disabled ? '-disabled' : '';
    const circleCls = classNames([
        `${prefix}radio-circle`,
        `${prefix}radio-circle--${size}`,
        `${prefix}radio-circle${selectedPrefix}${disabledPrefix}`,
    ]);
    const pointCls = classNames([
        `${prefix}radio-point`,
        `${prefix}radio-point--${size}`,
        `${prefix}radio-point${selectedPrefix}${disabledPrefix}`,
    ]);
    const textCls = classNames([
        `${prefix}radio-text`,
        `${prefix}radio-text--${size}`,
        `${prefix}radio-text${selectedPrefix}${disabledPrefix}`,
    ]);
    useEffect(() => {
        if ('checked' in props) {
            setSelected(props.checked);
        }
    });
    const handleClick = (e) => {
        if (!disabled && !readOnly) {
            if (isFunction(onChange)) {
                onChange(!selected, e);
            }
            if (isFunction(onClick)) {
                onClick(e);
            }
            if (!('checked' in props)) {
                setSelected(!selected);
            }
        }
    };
    return (createElement(View, Object.assign({}, others, { ref: ref, className: classNames(`${prefix}radio-container`, `${prefix}radio-container--${size}`, className), onClick: handleClick }),
        createElement(View, { className: circleCls },
            createElement(View, { className: pointCls })),
        isString(children) || isNumber(children) ? (createElement(Text, { className: textCls }, children)) : (createElement(View, { className: textCls }, children))));
};
Radio.displayName = 'Radio';
export default forwardRef(Radio);
