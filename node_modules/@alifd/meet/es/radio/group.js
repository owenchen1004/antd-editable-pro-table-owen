import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, useEffect, useState } from 'rax';
import Children from 'rax-children';
import Text from 'rax-text';
import { getDataSourceFromChildren, isFunction, isNumber, isString, isUndef, isValidArray } from '../utils';
import { getItemsFromDataSource } from '../utils/tree';
import View from '../view';
import Radio from './radio';
const getInitValue = (props) => {
    let ret = [];
    if ('value' in props) {
        ret = props.value;
    }
    else if (!isUndef(props.defaultValue)) {
        ret = props.defaultValue;
    }
    return ret;
};
const RadioGroup = (props, ref) => {
    const { size = 'medium', prefix = 'mt-', direction = 'ver', children, disabled: groupDisabled, defaultValue, value, readOnly, onChange, className, isPreview, renderPreview, previewClassName: previewClassNameProp, previewStyle, dataSource, labelAlign } = props, others = __rest(props, ["size", "prefix", "direction", "children", "disabled", "defaultValue", "value", "readOnly", "onChange", "className", "isPreview", "renderPreview", "previewClassName", "previewStyle", "dataSource", "labelAlign"]);
    const [groupValue, setGroupValue] = useState(getInitValue(props));
    const isControlled = 'value' in props;
    const previewClassName = classNames(previewClassNameProp, `${prefix}form-item-input--preview-${size}`);
    const groupCls = classNames(`${prefix}radio-group`, `${prefix}radio-group--${direction}`, `${prefix}radio-group--${labelAlign}-${size}`, className);
    useEffect(() => {
        const newValue = getInitValue(props);
        if (isControlled) {
            setGroupValue(newValue);
        }
    }, [value, groupValue]);
    const handleChange = (selected, radioValue, e, isDisabled) => {
        if (!isDisabled && !readOnly) {
            if (!isControlled) {
                setGroupValue(radioValue);
            }
            if (selected && isFunction(onChange)) {
                onChange(radioValue, e);
            }
        }
    };
    let content;
    let ds = dataSource;
    if (!ds && Children.count(children) > 0) {
        ds = getDataSourceFromChildren(children);
    }
    if (isValidArray(ds)) {
        content = ds.map((item, index) => {
            let itemData = {
                style: {},
                value: null,
                checked: false,
                label: '',
                text: '',
                disabled: false,
                size,
            };
            const { onClick: itemOnClick, onChange: itemOnChange, className: itemClassName, label: itemLabel, text: itemText } = item, itemRest = __rest(item, ["onClick", "onChange", "className", "label", "text"]);
            if (isString(item) || isNumber(item)) {
                itemData.value = item;
            }
            else {
                itemData = Object.assign(Object.assign({}, itemData), itemRest);
            }
            const isDisabled = groupDisabled || itemData.disabled;
            const label = itemLabel || itemText || itemData.value;
            const isLast = index === ds.length - 1;
            return (createElement(Radio, Object.assign({}, itemData, { key: `radio_${index}`, className: classNames(itemClassName, {
                    [`${prefix}radio-item--${direction}-${size}`]: !isLast,
                }), disabled: isDisabled, checked: itemData.checked || itemData.value === groupValue, onChange: (selected, e) => {
                    if (isFunction(itemOnChange)) {
                        itemOnChange(selected, e);
                    }
                    handleChange(selected, itemData.value, e, isDisabled);
                }, onClick: itemOnClick }), label));
        });
    }
    if (isPreview) {
        const arr = getItemsFromDataSource(ds, groupValue);
        let previewItem = {};
        if (isValidArray(arr)) {
            previewItem = arr[0];
        }
        if (isFunction(renderPreview)) {
            return (createElement(View, { className: previewClassName, style: previewStyle }, renderPreview(previewItem)));
        }
        return (createElement(Text, { className: previewClassName, style: previewStyle }, previewItem.label || previewItem.text));
    }
    return (createElement(View, Object.assign({ ref: ref, className: groupCls }, others), content));
};
RadioGroup.displayName = 'Radio.Group';
export default forwardRef(RadioGroup);
