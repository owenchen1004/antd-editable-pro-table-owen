import { __rest } from "tslib";
import { createElement, Component, createRef } from 'rax';
import View from '../view';
import { previewImage } from '@uni/image';
import { isWeb } from '@uni/env';
import { isMiniappPlatform } from '../utils';
import { guid } from '../utils/hooks';
import HtmlParser from './html-parser';
import Node from './node';
import { getVideoContext } from './util';
class RichText extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            nodes: [],
        };
        this.imgList = [];
        this.videos = {};
        this.plugins = [];
        this.ref = createRef();
        this.wrapTable = () => {
            const rootNode = this.ref.current;
            if (rootNode) {
                const tables = rootNode.getElementsByTagName('table');
                Array.from(tables).forEach((tableNode) => {
                    const tmp = document.createElement('div');
                    tmp.style.overflowX = 'auto';
                    tmp.style.padding = '1px';
                    tmp.appendChild(tableNode.cloneNode(true));
                    tableNode.parentNode.insertBefore(tmp, tableNode);
                    tableNode.remove();
                });
            }
        };
        this.replaceErrorImg = () => {
            const rootNode = this.ref.current;
            if (rootNode) {
                [...rootNode.getElementsByTagName('img')].forEach((img) => {
                    if (img && img.addEventListener) {
                        img.addEventListener('error', () => {
                            img.src = this.props.errorImage;
                        });
                    }
                });
            }
        };
        this.parseHtmlText = (text) => {
            const nodes = new HtmlParser(this).parse(text);
            this.setState({
                nodes,
            });
        };
        this.handleImageClick = (i) => {
            if (this.props.enableImagePreview) {
                previewImage({
                    urls: this.imgList,
                    current: i || 0,
                }).then(() => {
                });
            }
        };
        this.handleImageError = (src, i) => {
            const { errorImage } = this.props;
            this.imgList[i] = errorImage;
        };
        this.handleVideoLoad = (id) => {
            this.videos[id] = getVideoContext(id);
        };
        this.handleVideoPlay = (id) => {
            if (this.props.pauseVideo) {
                Object.entries(this.videos).forEach(([videoId, ctx]) => {
                    if (videoId !== id && ctx && ctx.pause) {
                        ctx.pause();
                    }
                });
            }
        };
    }
    componentWillMount() {
        if (isMiniappPlatform) {
            const { text } = this.props;
            this.parseHtmlText(text);
        }
    }
    componentWillReceiveProps(nextProps) {
        if (isMiniappPlatform) {
            const { text } = nextProps;
            this.parseHtmlText(text);
        }
    }
    componentDidMount() {
        if (isWeb) {
            this.afterWebRender();
        }
    }
    componentDidUpdate(prevProps) {
        if (isWeb && this.props.text !== prevProps.text) {
            this.afterWebRender();
        }
    }
    afterWebRender() {
        const { enableTableScroll, errorImage } = this.props;
        if (enableTableScroll) {
            this.wrapTable();
        }
        if (errorImage) {
            this.replaceErrorImg();
        }
    }
    render() {
        const _a = this.props, { style, lazyLoad, text } = _a, otherProps = __rest(_a, ["style", "lazyLoad", "text"]);
        return (createElement(View, { id: `mtRichTextRoot-${guid()}`, ref: this.ref, className: `${this.props.prefix}rich-text`, style: style }, isMiniappPlatform ? (createElement(Node, Object.assign({ lazyLoad: lazyLoad, nodes: this.state.nodes, onImageClick: this.handleImageClick, onImgError: this.handleImageError, onVideoLoad: this.handleVideoLoad, onVideoPlay: this.handleVideoPlay }, otherProps))) : (createElement("div", { dangerouslySetInnerHTML: { __html: text || '' } }))));
    }
}
RichText.defaultProps = {
    prefix: 'mt-',
    text: '',
    errorImage: 'https://gw.alicdn.com/imgextra/i4/O1CN014BzOrR1EjHycne0VV_!!6000000000387-2-tps-200-200.png',
    lazyLoad: false,
    enableImagePreview: true,
    useAnchor: false,
    pauseVideo: true,
    enableTableScroll: false,
    tagStyle: {
        table: 'box-sizing: border-box; ',
        li: 'margin: 5px 0;',
        img: 'width: auto',
    },
};
export default RichText;
