import { __rest } from "tslib";
import { createElement, Component } from 'rax';
import classNames from 'classnames';
import Image from './image';
import Link from './link';
import Video from './video';
import { convertStyle } from './util';
import { isStrictMiniApp } from '../utils';
const ExternalNode = (props) => {
    const { item, className, onImageClick, onImgError, onVideoLoad, onVideoPlay, errorImage, style, lazyLoad } = props;
    const { name, attrs, src, text, i } = item;
    const _a = attrs || {}, { id = '', href, class: itemClass } = _a, restAttrs = __rest(_a, ["id", "href", "class"]);
    if (text) {
        return createElement("text", { className: "_text" }, text);
    }
    switch (name) {
        case 'a':
            return (createElement(Link, { className: classNames(itemClass, className), hoverClass: "_hover", href: href, style: style },
                createElement(ExternalNode, { item: Object.assign({ name: 'div' }, item) })));
        case 'br':
            return (createElement("text", null, `
      `));
        case 'img':
        case 'image':
            return (createElement(Image, Object.assign({}, restAttrs, { className: classNames(className, itemClass), errorImage: errorImage, imgIndex: i, onClick: () => {
                    if (!item.a) {
                        onImageClick(i);
                    }
                }, style: style, onError: onImgError, lazyLoad: lazyLoad })));
        case 'video':
            return (createElement(Video, Object.assign({}, restAttrs, { id: id, className: classNames('_video', itemClass, className), src: Array.isArray(src) ? src.join('') : '', style: Object.assign(Object.assign({}, style), (isStrictMiniApp ? { display: 'grid' } : null)), onLoad: onVideoLoad, onPlay: onVideoPlay })));
        default:
            return (createElement("rich-text", { id: id, style: Object.assign({ display: 'inline' }, style), nodes: [item] }));
    }
};
class RichTextNode extends Component {
    render() {
        const _a = this.props, { nodes } = _a, otherProps = __rest(_a, ["nodes"]);
        return nodes.map((item, index) => {
            const { attrs = {} } = item;
            const { style = '', href = '', class: nodeClassName } = attrs, otherAttrs = __rest(attrs, ["style", "href", "class"]);
            if (item.name === 'a') {
                return (createElement(Link, Object.assign({ key: index }, otherAttrs, otherProps, { className: classNames(`_${item.name}`, nodeClassName), style: convertStyle(style), href: href }),
                    createElement(RichTextNode, Object.assign({ nodes: item.children }, otherProps))));
            }
            if (item.children) {
                return (createElement("view", Object.assign({ key: index }, otherAttrs, { className: classNames(`_${item.name}`, nodeClassName), style: convertStyle(style) }),
                    createElement(RichTextNode, Object.assign({ nodes: item.children }, otherProps))));
            }
            return (createElement(ExternalNode, Object.assign({ key: index }, otherProps, { className: classNames(`_${item.name}`, nodeClassName), item: item, style: convertStyle(style) })));
        });
    }
}
export default RichTextNode;
