import { __rest } from "tslib";
import { createElement, forwardRef, useRef, } from 'rax';
import classNames from 'classnames';
import { isStrictMiniApp } from '../utils';
import './styles/index.css';
const View = forwardRef((props, ref) => {
    const selfRef = useRef(null);
    const { onFirstAppear, prefix = 'mt-', className, hasSafeArea, onAppear, withoutTouch = true } = props, rest = __rest(props, ["onFirstAppear", "prefix", "className", "hasSafeArea", "onAppear", "withoutTouch"]);
    const newClsName = classNames(className, {
        [`${prefix}view-safe-area`]: hasSafeArea,
    });
    if (isStrictMiniApp) {
        return withoutTouch ? (createElement("view", Object.assign({}, rest, { className: newClsName, onAppear: onAppear, onDisappear: rest.onDisappear, onFirstAppear: onFirstAppear, ref: ref }))) : (createElement("div", Object.assign({}, rest, { className: newClsName, onAppear: onAppear, onDisappear: rest.onDisappear, onFirstAppear: onFirstAppear, ref: ref })));
    }
    let handleAppear = onAppear;
    if (onFirstAppear) {
        handleAppear = (event) => {
            if (onAppear) {
                onAppear(event);
            }
            if (!selfRef.triggeredAppear) {
                if (onFirstAppear) {
                    onFirstAppear(event);
                }
            }
            else {
                selfRef.triggeredAppear = true;
            }
        };
    }
    return createElement("div", Object.assign({}, rest, { className: newClsName, onAppear: handleAppear, ref: ref }));
});
View.displayName = 'View';
export default View;
