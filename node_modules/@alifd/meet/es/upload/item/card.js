import { createElement, memo } from 'rax';
import classNames from 'classnames';
import View from '../../view';
import Icon from '../../icon';
import Progress from '../../progress';
const Card = memo((props) => {
    const { file, onClick, onReUpload, onRemove, hasRemove = true, progressProps = {}, style, reUpload } = props;
    const clsPrefix = props.prefix || 'mt-upload';
    return (createElement(View, { key: file.uid, className: classNames(`${clsPrefix}-item`, `${clsPrefix}-item--card`, `${clsPrefix}-item--${file.state}`), style: style },
        file.state !== 'error' &&
            (file.imgURL ? (createElement(View, { className: `${clsPrefix}-item-preview`, onClick: (e) => onClick && onClick(file, e), style: {
                    backgroundImage: `url(${file.imgURL})`,
                } })) : (createElement(View, { className: `${clsPrefix}-item-waiting` },
                createElement(Icon, { className: `${clsPrefix}-item-icon`, name: "picture" })))),
        file.state === 'uploading' && (createElement(Progress, Object.assign({ className: `${clsPrefix}-item-progress`, percent: file.percent || 0 }, progressProps))),
        file.state === 'error' && (createElement(View, { className: `${clsPrefix}-item-error`, onClick: () => onReUpload && onReUpload(file) },
            createElement(Icon, { className: classNames(`${clsPrefix}-item-icon`, `${clsPrefix}-item-icon--small`, `${clsPrefix}-item-icon--error`), name: "upload" }),
            reUpload)),
        (file.state === 'done' || file.state === 'error') && hasRemove && (createElement(View, { className: `${clsPrefix}-item-remove`, onClick: () => onRemove && onRemove(file) },
            createElement(Icon, { className: `${clsPrefix}-item-remove-icon`, name: "minus" })))));
});
export default Card;
