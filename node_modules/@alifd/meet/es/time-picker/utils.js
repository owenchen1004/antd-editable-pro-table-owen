import dayjs from 'dayjs';
import defaultLang from '../locale/lang/zh-cn';
import { cloneDate, checkDateRange, RANGE_CHECK_RESULT, getRealRange } from '../utils/date';
export const DEFAULT_FORMAT = 'HH:mm:ss';
export function range(min, max, step) {
    const result = [];
    for (let i = min; i <= max; i += step) {
        result.push(i);
    }
    return result;
}
export function rangeOptions(min, max, step, format) {
    return range(min, max, step).map((it) => {
        return {
            label: format(it),
            value: it,
        };
    });
}
export function getTimeOption(props) {
    const { format = DEFAULT_FORMAT } = props;
    const hasHour = format.includes('H') || format.includes('h');
    const hasMinute = format.includes('m');
    const hasSecond = format.includes('s');
    const use12Hours = hasHour && format.includes('h');
    return { hasHour, hasMinute, hasSecond, use12Hours };
}
export function getColumns(curValue, options, props) {
    const { hasHour, hasMinute, hasSecond, use12Hours } = options;
    const { hourStep = 1, minuteStep = 1, secondStep = 1, disabledHours = () => { }, disabledMinutes = () => { }, disabledSeconds = () => { }, locale = defaultLang.TimePicker, validRange: validRangeProp, } = props;
    const validRange = getRealRange(options, props, validRangeProp);
    const dataSource = [];
    const isInRange = (type, n) => {
        if (!validRange) {
            return true;
        }
        const checkOptions = {
            hasHour: true,
            hasMinute: false,
            hasSecond: false,
            use12Hours: false,
        };
        const d = cloneDate(curValue);
        if (type === 'h') {
            d.setHours(n);
        }
        else if (type === 'm') {
            checkOptions.hasMinute = true;
            d.setMinutes(n);
        }
        else if (type === 's') {
            checkOptions.hasMinute = true;
            checkOptions.hasSecond = true;
            d.setSeconds(n);
        }
        return (checkDateRange(d, {
            time: checkOptions,
        }, validRange) === RANGE_CHECK_RESULT.IN_RANGE);
    };
    const rules = [
        {
            enable: hasHour,
            min: 0,
            max: use12Hours ? 11 : 23,
            step: hourStep,
            format: (n) => dayjs()
                .hour(n)
                .format(use12Hours ? 'h' : 'H') + locale.hour,
            filter: (n) => isInRange('h', n) && !disabledHours(n),
        },
        {
            enable: hasMinute,
            min: 0,
            max: 59,
            step: minuteStep,
            format: (n) => n + locale.minute,
            filter: (n) => isInRange('m', n) && !disabledMinutes(n),
        },
        {
            enable: hasSecond,
            min: 0,
            max: 59,
            step: secondStep,
            format: (n) => n + locale.second,
            filter: (n) => isInRange('s', n) && !disabledSeconds(n),
        },
    ];
    rules.forEach((rule) => {
        if (!rule.enable) {
            return;
        }
        let opts = rangeOptions(rule.min, rule.max, rule.step, rule.format);
        if (rule.filter) {
            opts = opts.filter((it) => rule.filter(it.value));
        }
        dataSource.push(opts);
    });
    if (use12Hours) {
        dataSource.push([
            {
                label: locale.am,
                value: 'am',
            },
            {
                label: locale.pm,
                value: 'pm',
            },
        ]);
    }
    return dataSource;
}
export function dateToPicker(d, options) {
    const { hasHour, hasMinute, hasSecond, use12Hours } = options;
    const result = [];
    if (hasHour) {
        const h = d.getHours();
        result.push(use12Hours ? h % 12 : h);
    }
    if (hasMinute) {
        result.push(d.getMinutes());
    }
    if (hasSecond) {
        result.push(d.getSeconds());
    }
    if (use12Hours) {
        result.push(d.getHours() >= 12 ? 'pm' : 'am');
    }
    return result;
}
export function pickerToDate(values, options) {
    const { hasHour, hasMinute, hasSecond, use12Hours } = options;
    const d = new Date();
    if (hasHour) {
        const h = values.shift();
        if (use12Hours) {
            const isAm = values.pop() === 'am';
            if (isAm) {
                d.setHours(h);
            }
            else {
                d.setHours(h + 12);
            }
        }
        else {
            d.setHours(h);
        }
    }
    else {
        d.setHours(0);
    }
    if (hasMinute) {
        d.setMinutes(values.shift());
    }
    else {
        d.setMinutes(0);
    }
    if (hasSecond) {
        d.setSeconds(values.shift());
    }
    else {
        d.setSeconds(0);
    }
    d.setMilliseconds(0);
    return d;
}
