import { __rest } from "tslib";
import { createElement, forwardRef, useContext, useEffect, useState } from 'rax';
import dayjs from 'dayjs';
import View from '../view';
import { ItemContext } from '../form';
import SelectDrawer from '../select-drawer';
import EmbedPicker from './embed-picker';
import { isFunction } from '../utils';
import { isValidDate, toDate } from '../utils/date';
const TimePicker = (props, ref) => {
    const { prefix = 'mt-', value: valueProp, defaultValue, size: sizeProp, align: alignProp, iconType, placeholder, format, hasClear, disabled, readOnly, onChange = () => { }, onClear = () => { }, onCancel = () => { }, className, zIndex } = props, others = __rest(props, ["prefix", "value", "defaultValue", "size", "align", "iconType", "placeholder", "format", "hasClear", "disabled", "readOnly", "onChange", "onClear", "onCancel", "className", "zIndex"]);
    const [value, setValue] = useState(toDate(valueProp || defaultValue));
    const [pickerValue, setPickerValue] = useState(value || new Date());
    const { isInsideForm, contentAlign, size: contextSize } = useContext(ItemContext);
    const align = alignProp || (isInsideForm ? contentAlign : 'left');
    const size = sizeProp || (isInsideForm ? contextSize : 'medium');
    const isControlled = 'value' in props;
    const handleOk = () => {
        const newValue = pickerValue;
        if (onChange) {
            onChange(newValue);
        }
        if (!isControlled) {
            setValue(newValue);
        }
    };
    useEffect(() => {
        if ('value' in props) {
            const newValue = toDate(valueProp || defaultValue);
            if (!isValidDate(newValue)) {
                setValue(undefined);
                return;
            }
            else if (newValue === value) {
                return;
            }
            setValue(newValue);
            setPickerValue(newValue);
        }
    }, [valueProp]);
    const handleCancel = (reason) => {
        setPickerValue(value || new Date());
        if (isFunction(onCancel)) {
            onCancel(reason);
        }
    };
    const handleChange = (d) => setPickerValue(d);
    const handleClear = () => {
        if (!isControlled) {
            setPickerValue(new Date());
            setValue(undefined);
        }
        if (onClear) {
            onClear();
        }
        if (onChange) {
            onChange(undefined);
        }
    };
    return (createElement(SelectDrawer, { disableScroll: true, hasClear: hasClear, content: value ? dayjs(value).format(format || 'HH:mm') : '', align: align, size: size, iconType: iconType, placeholder: placeholder, disabled: disabled, readOnly: readOnly, className: className, zIndex: zIndex, onOk: handleOk, onCancel: handleCancel, onClear: handleClear, ref: ref },
        createElement(View, { className: `${prefix}timepicker-container`, "disable-scroll": true },
            createElement(EmbedPicker, Object.assign({}, others, { prefix: prefix, value: pickerValue, format: format || 'HH:mm', onChange: handleChange })))));
};
TimePicker.displayName = 'TimePicker';
export default forwardRef(TimePicker);
