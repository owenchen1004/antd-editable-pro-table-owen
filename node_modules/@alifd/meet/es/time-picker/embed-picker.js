import { __rest } from "tslib";
import { createElement, forwardRef } from 'rax';
import dayjs from 'dayjs';
import Picker from '../picker';
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
import { getNearestDate, getRangeDate, getRealRange, isValidDate, toDate } from '../utils/date';
import { useValue } from '../utils/hooks';
import { dateToPicker, DEFAULT_FORMAT, getColumns, getTimeOption, pickerToDate } from './utils';
const EmbedPicker = (props, ref) => {
    const { prefix = 'mt-', value: valueProp, defaultValue, onChange, className, hourStep, minuteStep, secondStep, format = DEFAULT_FORMAT, disabledHours, disabledMinutes, disabledSeconds, validRange: validRangeProp } = props, others = __rest(props, ["prefix", "value", "defaultValue", "onChange", "className", "hourStep", "minuteStep", "secondStep", "format", "disabledHours", "disabledMinutes", "disabledSeconds", "validRange"]);
    const options = getTimeOption(props);
    const validRange = getRealRange(options, props, validRangeProp);
    const locale = useLocale('TimePicker', others, defaultLang.TimePicker);
    const [value, setValue, isControlled] = useValue(props, new Date(), {
        fitValue: (v) => {
            const d = toDate(v);
            const x = getRangeDate(isValidDate(d) ? d : new Date(), {
                time: options,
            }, validRange);
            if (validRange && (secondStep !== 1 || minuteStep !== 1 || hourStep !== 1)) {
                const xt = dayjs(x).format(format);
                if (xt !== dayjs(validRange[0]).format(format) && xt !== dayjs(validRange[1]).format(format)) {
                    return getNearestDate(options, props, x, 'auto');
                }
            }
            return x;
        },
        compare: (a, b) => a.getTime() === b.getTime(),
    });
    const dataSource = getColumns(value, options, Object.assign(Object.assign({}, props), { locale }));
    const handleChange = (values) => {
        const d = getRangeDate(pickerToDate(values, options), {
            time: options,
        }, validRange);
        if (onChange) {
            onChange(d);
        }
        if (!isControlled) {
            setValue(d);
        }
    };
    const pickerValue = dateToPicker(value, options);
    return (createElement(Picker, { ref: ref, className: className, prefix: prefix, value: pickerValue, data: dataSource, onChange: handleChange }));
};
export default forwardRef(EmbedPicker);
