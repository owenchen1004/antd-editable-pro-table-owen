import { __rest } from "tslib";
import { createElement } from 'rax';
import classNames from 'classnames';
import View from '../view';
import Icon from '../icon';
import { isInvalidValue, isNumber, isValidArray, noop } from '../utils';
const ARROW_ICON_MAP = {
    right: 'arrow-right',
    up: 'arrow-up',
    down: 'arrow-down',
    loading: 'loading',
};
const Card = (props) => {
    const { prefix = 'mt-', showHeadDivider = true, media, arrow, extra, title, className, headerClassName, headerStyle, bodyClassName, footerClassName, contentHeight, bodyStyle = {}, footerStyle = {}, actions, children, onHeaderClick = noop, onBodyClick = noop } = props, others = __rest(props, ["prefix", "showHeadDivider", "media", "arrow", "extra", "title", "className", "headerClassName", "headerStyle", "bodyClassName", "footerClassName", "contentHeight", "bodyStyle", "footerStyle", "actions", "children", "onHeaderClick", "onBodyClick"]);
    const clsPrefix = `${prefix}card`;
    const clses = {
        card: classNames(className, clsPrefix),
        header: classNames(`${clsPrefix}-header`, headerClassName, {
            [`${clsPrefix}-header--no-divider`]: !showHeadDivider,
        }),
        title: `${clsPrefix}-title`,
        media: `${clsPrefix}-media`,
        extra: `${clsPrefix}-extra`,
        arrow: `${clsPrefix}-arrow`,
        body: classNames(`${clsPrefix}-body`, bodyClassName),
        footer: classNames(`${clsPrefix}-footer`, footerClassName),
    };
    const _bodyStyle = bodyStyle;
    if (isNumber(contentHeight) && contentHeight >= 0) {
        _bodyStyle.height = contentHeight;
    }
    return (createElement(View, Object.assign({ className: clses.card }, others),
        !isInvalidValue(title) && !!title ? (createElement(View, { className: clses.header, onClick: onHeaderClick, style: headerStyle },
            media ? createElement(View, { className: clses.media }, media) : null,
            createElement(View, { className: clses.title }, title),
            extra ? createElement(View, { className: clses.extra }, extra) : null,
            Object.keys(ARROW_ICON_MAP).indexOf(arrow) > -1 ? (createElement(Icon, { className: clses.arrow, type: ARROW_ICON_MAP[arrow], size: "s" })) : null)) : null,
        children ? (createElement(View, { className: clses.body, style: _bodyStyle, onClick: onBodyClick }, children)) : null,
        isValidArray(actions) ? (createElement(View, { className: clses.footer, style: footerStyle }, actions)) : null));
};
Card.displayName = 'Card';
export default Card;
