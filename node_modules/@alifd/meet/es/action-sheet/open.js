import { __rest } from "tslib";
import { Component, createElement } from 'rax';
import { renderToRoot } from '../utils/render';
import { isFunction } from '../utils';
import ActionSheet from './action-sheet';
class ActionSheetWrapper extends Component {
    constructor(props) {
        super(props);
        this.handleClick = (option, index, e) => {
            if (this.props.onClick) {
                this.props.onClick(option, index, e);
            }
        };
        this.handleClose = (reason) => {
            this.setState({
                visible: false,
            });
            if (this.props.onClose) {
                this.props.onClose(reason);
            }
        };
        this.state = {
            visible: true,
        };
    }
    render() {
        const _a = this.props, { message, options } = _a, others = __rest(_a, ["message", "options"]);
        const { visible } = this.state;
        return (createElement(ActionSheet, Object.assign({ visible: visible }, others, { disablePortal: true, message: message, options: options, onClose: this.handleClose, onClick: this.handleClick })));
    }
}
ActionSheetWrapper.defaultProps = {
    message: '',
    options: [],
    onClick: () => { },
    onClose: () => { },
};
export default function (options) {
    const { onClose } = options, others = __rest(options, ["onClose"]);
    let hide = null;
    const handleClose = (v) => {
        if (isFunction(onClose)) {
            onClose(v);
        }
        setTimeout(() => {
            hide();
        }, 300);
    };
    hide = renderToRoot(createElement(ActionSheetWrapper, Object.assign({}, others, { onClose: handleClose })));
    return {
        close: () => hide(),
    };
}
