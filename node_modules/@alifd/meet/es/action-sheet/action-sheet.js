import { __rest } from "tslib";
import { createElement, forwardRef, Fragment, useCallback, useMemo } from 'rax';
import classNames from 'classnames';
import Image from 'rax-image';
import Text from 'rax-text';
import View from '../view';
import SafeArea from '../safe-area';
import Badge from '../badge';
import Drawer from '../drawer';
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
import { isString } from '../utils';
const ActionSheet = (props, ref) => {
    const { prefix = 'mt-', message, options, visible = false, fullWidth = true, showCancel = true, maskClosable = true, destructiveIndex, cancelText, align: alignProps, disabledIndexes, onClick, onClose, className } = props, others = __rest(props, ["prefix", "message", "options", "visible", "fullWidth", "showCancel", "maskClosable", "destructiveIndex", "cancelText", "align", "disabledIndexes", "onClick", "onClose", "className"]);
    const locale = useLocale('ActionSheet', others, defaultLang.ActionSheet);
    const handleOptionClick = useCallback((option, index, e) => {
        if (onClick) {
            onClick(option, index, e);
        }
        if (onClose) {
            onClose(index, e);
        }
    }, [onClick, onClose]);
    const clsPrefix = `${prefix}actionsheet`;
    const buttons = useMemo(() => {
        if (!options) {
            return null;
        }
        const len = options.length;
        return options.map((option, index) => {
            const disabled = disabledIndexes ? disabledIndexes.indexOf(index) > -1 : false;
            let content = null;
            const align = alignProps || (typeof option === 'object' && option.icon ? 'left' : 'center');
            if (isString(option)) {
                content = createElement(Text, { className: `${clsPrefix}-option-text ${clsPrefix}-option--${align}` }, option);
            }
            else if (typeof option === 'object') {
                const { badge, icon, text, badgeType } = option;
                content = (createElement(Fragment, null,
                    icon ? (createElement(Image, { source: {
                            uri: icon,
                        }, className: `${clsPrefix}-icon` })) : null,
                    createElement(View, { className: `${clsPrefix}-option-content ${clsPrefix}-option--${align}` },
                        createElement(Text, { className: `${clsPrefix}-option-text` }, text),
                        badge ? createElement(Badge, { className: `${clsPrefix}-badge`, count: badge, dot: badgeType === 'dot' }) : null)));
            }
            return (createElement(View, { key: `${clsPrefix}-option-${index}`, onClick: (e) => {
                    if (!disabled) {
                        handleOptionClick(option, index, e);
                    }
                }, className: classNames(`${clsPrefix}-option`, {
                    [`${clsPrefix}-option--destructive`]: destructiveIndex === index,
                    [`${clsPrefix}-option--disabled`]: disabled,
                    [`${clsPrefix}-option--advanced`]: typeof option === 'object' && option.icon,
                    [`${clsPrefix}-option--last`]: index === len - 1,
                }) }, content));
        });
    }, [options, clsPrefix, disabledIndexes, destructiveIndex, alignProps, handleOptionClick]);
    const handleMaskClose = useCallback((r, e) => onClose && onClose('mask', e), [onClose]);
    const handleCancelClose = useCallback((e) => onClose && onClose('cancel', e), [onClose]);
    return (createElement(Drawer, Object.assign({}, others, { ref: ref, visible: visible, closeMode: maskClosable ? ['mask'] : [], className: classNames(`${clsPrefix}-drawer`, className), placement: "bottom", onClose: handleMaskClose, disableScroll: true }),
        createElement(View, { className: classNames(`${clsPrefix}`, { [`${clsPrefix}--fullwidth`]: fullWidth }) },
            message ? (createElement(Text, { className: `${clsPrefix}-msg`, numberOfLines: 1 }, message)) : null,
            createElement(View, { className: classNames(`${clsPrefix}-option-list`) }, buttons),
            showCancel ? (createElement(View, { className: classNames(`${clsPrefix}-option`, `${clsPrefix}-cancel`), onClick: handleCancelClose },
                createElement(Text, { className: `${clsPrefix}-option-text` }, cancelText || locale.cancel || 'Cancel'))) : null,
            createElement(SafeArea, { className: classNames(`${clsPrefix}-safe-area`, {
                    [`${clsPrefix}-safe-area--fullwidth`]: fullWidth,
                }) }))));
};
ActionSheet.displayName = 'ActionSheet';
export default forwardRef(ActionSheet);
