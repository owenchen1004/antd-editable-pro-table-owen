import { createElement, useEffect, useState } from 'rax';
import Text from 'rax-text';
import Button from '../../button/button';
import Drawer from '../../drawer/drawer';
import List from '../../list';
import { findInArray } from '../../utils';
import View from '../../view';
import Option from '../option';
import SafeArea from '../../safe-area';
import { removeItemFromArray } from '../util';
export default function SelectedListDrawer(props) {
    const { prefix, innerValue, locale } = props;
    const { visible, onOk, onCancel } = props;
    const clsPrefix = `${prefix}select`;
    const [selectedList, setSelectedList] = useState([]);
    const handleOk = () => onOk(selectedList);
    const handleItemClick = (item) => {
        const isSelected = findInArray(selectedList, (it) => it.value === item.value);
        if (isSelected) {
            const arr = removeItemFromArray(selectedList, item.value);
            setSelectedList(arr);
        }
        else {
            setSelectedList([...selectedList, item]);
        }
    };
    useEffect(() => setSelectedList(innerValue), [innerValue]);
    return (createElement(Drawer, { visible: visible, closeMode: ['mask'], className: `${clsPrefix}-confirm-drawer`, containerClassName: `${clsPrefix}-confirm-drawer-container`, onClose: onCancel },
        createElement(View, { className: `${clsPrefix}-confirm-drawer-header` },
            createElement(Text, { className: `${clsPrefix}-confirm-total` },
                locale.totalPrefixText,
                " ",
                selectedList.length,
                " ",
                locale.totalSuffixText),
            createElement(Button, { type: "primary", model: "text", onClick: handleOk }, locale.secondaryOkText)),
        createElement(View, { className: `${clsPrefix}-confirm-drawer-body` },
            createElement(List, null, innerValue.map((item) => {
                const selected = findInArray(selectedList, (it) => it.value === item.value);
                return (createElement(Option, { selected: selected, key: item.value, onClick: () => handleItemClick(item) }, item.label));
            }))),
        createElement(SafeArea, { className: `${clsPrefix}-safe-area` })));
}
SelectedListDrawer.displayName = 'SelectedListDrawer';
