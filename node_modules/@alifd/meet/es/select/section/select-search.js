import { createElement, forwardRef, useContext, useImperativeHandle, useState } from 'rax';
import Search from '../../search';
import { isFunction } from '../../utils';
import View from '../../view';
import SelectContext from '../context';
const SelectSearch = (props, ref) => {
    const { prefix, locale, setSearchValue, value: searchValue, innerValue, onSearch: contextSearch } = useContext(SelectContext);
    const { onSearch } = props;
    const [value, setValue] = useState('');
    useImperativeHandle(ref, () => ({
        setValue(v) {
            setValue(v);
            setSearchValue(v);
        },
    }));
    const handleSearch = (v) => {
        setValue(v);
        setSearchValue(v);
        if (isFunction(onSearch)) {
            onSearch(v);
        }
        if (isFunction(contextSearch)) {
            contextSearch(v, searchValue, innerValue);
        }
    };
    return (createElement(View, { className: `${prefix}select-search-wrapper`, style: { width: '100%', height: '100rpx' } },
        createElement(Search, { placeholder: locale.searchTipText, value: value, hasClear: true, onChange: handleSearch })));
};
export default forwardRef(SelectSearch);
