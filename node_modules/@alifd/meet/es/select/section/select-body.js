import { createElement, useContext } from 'rax';
import List from '../../list';
import Menu from '../../menu';
import Button from '../../button';
import TagSelect from '../../tag-select';
import { findInArray, isFunction, isNil, isValidArray, mergeDataSource, replaceMessage } from '../../utils';
import View from '../../view';
import SelectContext from '../context';
import Typography from '../../typography';
import Option from '../option';
import { defaultLocalFilter, isSelected, removeItemFromArray } from '../util';
const { Text } = Typography;
const sort = (arr, value) => {
    const selectedArr = [];
    const unSelectedArr = [];
    arr.forEach((item) => {
        if (isSelected(value, item.value)) {
            selectedArr.push(item);
        }
        else {
            unSelectedArr.push(item);
        }
    });
    return [...selectedArr, ...unSelectedArr];
};
const SelectBody = (props) => {
    const { prefix, size, displayType, disabled, mode, dataSource, filterLocal = true, stickyOnTop = true, filter = defaultLocalFilter, searchValue, innerValue, value, transferSearchToOption, onChange, onSearchAdd, } = useContext(SelectContext);
    const { searchToOptionBtnText = '', emptySearchText = '' } = props;
    const renderWithTag = displayType === 'tag';
    const renderWithMenu = !renderWithTag && mode === 'single';
    const clsPrefix = `${prefix}select`;
    let filteredDataSource = filterLocal
        ? mergeDataSource(dataSource, [...value, ...innerValue]).filter((item) => filter(searchValue, item))
        : dataSource;
    if (mode === 'multiple' && stickyOnTop) {
        filteredDataSource = sort(filteredDataSource, value);
    }
    if (renderWithMenu) {
        return (createElement(Menu, { prefix: prefix, size: size, selectMode: "single", dataSource: filteredDataSource, selectedKeys: innerValue.map((it) => it.value), onItemClick: (_, item) => {
                const { onClick } = item;
                if (isFunction(onClick)) {
                    onClick(item.value);
                }
                onChange([{ label: item.label, value: item.value }]);
            } }));
    }
    if (renderWithTag) {
        return (createElement(View, { className: `${prefix}select--tag-${size}` },
            createElement(TagSelect, { prefix: prefix, mode: mode, size: size, value: innerValue.map((it) => it.value), dataSource: filteredDataSource, onChange: (v) => {
                    if (isNil(v)) {
                        onChange([]);
                        return;
                    }
                    const newValue = Array.isArray(v) ? v : [v];
                    const newItems = newValue.map((x) => findInArray(filteredDataSource, (item) => item.value === x));
                    onChange(newItems);
                } })));
    }
    const options = filteredDataSource.map((it) => (createElement(Option, Object.assign({ key: it.value, selected: isSelected(innerValue, it.value), disabled: disabled || it.disabled, onClick: () => {
            const selectedItem = findInArray(innerValue, (item) => item.value === it.value);
            if (selectedItem) {
                onChange(removeItemFromArray(innerValue, selectedItem.value));
            }
            else {
                onChange([
                    ...innerValue,
                    {
                        label: it.label,
                        value: it.value,
                    },
                ]);
            }
        } }, it), it.label)));
    return transferSearchToOption ? (createElement(List, null,
        searchValue && !findInArray(filteredDataSource, (it) => `${it.label}` === `${searchValue}`) && (createElement(Option, { isNew: true, onClick: () => {
                if (onSearchAdd) {
                    onSearchAdd(searchValue, innerValue);
                }
                onChange([
                    ...innerValue,
                    {
                        label: searchValue,
                        value: searchValue,
                        userAdd: true,
                    },
                ]);
            } },
            createElement(View, { style: {
                    display: 'flex',
                    flexDirection: 'row',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                } },
                createElement("span", null, searchValue),
                createElement(Button, { size: "small", type: "primary", model: "outline" }, searchToOptionBtnText)))),
        options)) : isValidArray(filteredDataSource) ? (createElement(List, null, options)) : (createElement(View, { className: `${clsPrefix}-search-empty` },
        createElement(Text, { className: `${clsPrefix}-search-empty-tip`, type: "body-2" }, replaceMessage(emptySearchText, { searchVal: searchValue }))));
};
export default SelectBody;
