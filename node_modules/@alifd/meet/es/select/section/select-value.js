import { createElement, useRef, useContext } from 'rax';
import classNames from 'classnames';
import { ItemContext } from '../../form';
import TagSelect from '../../tag-select';
import View from '../../view';
import Tag from '../../tag';
import { guid } from '../../utils/hooks';
const SelectValue = (props) => {
    const { items, prefix, displayType, size: sizeProp, disabled, type } = props;
    const { isInsideForm, labelAlign, size: contextSize } = useContext(ItemContext);
    const inlineMode = displayType === 'tag' && isInsideForm && labelAlign === 'inset';
    const clsPrefix = `${prefix}select`;
    const isInverse = type === 'inverse';
    const size = sizeProp || (isInsideForm ? contextSize : 'medium');
    const ref = useRef(guid('select-val-'));
    switch (displayType) {
        case 'tag':
            return (createElement(TagSelect, { disabled: disabled, isPreview: true, inlineMode: inlineMode, prefix: prefix, size: size, dataSource: items }));
        case 'tag-value':
            return (createElement(View, { className: classNames(`${clsPrefix}-tag-value`, {
                    [`${clsPrefix}-value--inverse`]: isInverse,
                    [`${clsPrefix}-value--disabled`]: disabled,
                    [`${clsPrefix}-value--inverse-disabled`]: disabled && isInverse,
                }) }, items.map((val) => (createElement(Tag, { key: `${ref.current}-${val}`, className: `${clsPrefix}-tag-item`, type: "primary", size: size }, `${val}`)))));
        default:
            return (createElement(View, { className: classNames({
                    [`${clsPrefix}-value--inverse`]: isInverse,
                    [`${clsPrefix}-value--disabled`]: disabled,
                    [`${clsPrefix}-value--inverse-disabled`]: disabled && isInverse,
                }) }, items.join(',')));
    }
};
export default SelectValue;
