import classNames from 'classnames';
import { createElement, forwardRef } from 'rax';
import Text from 'rax-text';
import { isFunction } from '../utils';
import View from '../view';
import BaseSelect from './base-select';
import { getPreviewValue } from './util';
const Select = (props, ref) => {
    const { isPreview, previewClassName: previewClassNameProp, previewStyle, renderPreview, prefix = 'mt-', size = 'medium', } = props;
    const values = getPreviewValue(props);
    const previewClassName = classNames(previewClassNameProp, `${prefix}form-item-input--preview-${size}`);
    if (isPreview) {
        if (isFunction(renderPreview)) {
            return (createElement(View, { className: previewClassName, style: previewStyle }, renderPreview(values, props)));
        }
        let directRenderVal = '';
        if (Array.isArray(values)) {
            directRenderVal = values.map((v) => v.label).join(',');
        }
        else if (values && values.label) {
            directRenderVal = values.label;
        }
        return (createElement(Text, { className: previewClassName, style: previewStyle }, directRenderVal));
    }
    return createElement(BaseSelect, Object.assign({}, props, { ref: ref }));
};
Select.displayName = 'Select';
export default forwardRef(Select);
