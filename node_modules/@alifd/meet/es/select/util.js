import { createElement } from 'rax';
import Children from 'rax-children';
import { isWeb } from '@uni/env';
import { findInArray, getDataSourceFromChildren, isUndef, isValidArray, windowHeight, isMiniappPlatform, } from '../utils';
import SelectValue from './section/select-value';
export function removeItemFromArray(arr = [], val = '') {
    return arr.filter((v) => v.value !== val);
}
export function getInitValues(props) {
    const { defaultValue, value } = props;
    let initValues;
    if ('value' in props) {
        initValues = value;
    }
    else if (!isUndef(defaultValue)) {
        initValues = defaultValue;
    }
    if (!Array.isArray(initValues)) {
        if (!isUndef(initValues)) {
            initValues = [initValues];
        }
        else {
            initValues = [];
        }
    }
    return initValues;
}
export function getPreviewValue(props) {
    const { useDetailValue, children, dataSource, mode } = props;
    const initValues = getInitValues(props);
    let ds = dataSource || [];
    let arr = [];
    if (!dataSource && Children.count(children) > 0) {
        ds = getDataSourceFromChildren(children);
    }
    if (useDetailValue && isValidArray(initValues)) {
        arr = initValues;
    }
    else if (isValidArray(initValues)) {
        arr = initValues.map((v) => {
            const rs = ds.find((it) => it.value === v);
            return (rs || {
                label: v,
                value: v,
            });
        });
    }
    if (mode === 'single') {
        return isValidArray(arr) ? arr[0] : '';
    }
    return arr;
}
export function getScrollHeight() {
    if (isWeb) {
        return `${(screen.availHeight - 200) / (screen.width / 750)}rpx`;
    }
    else if (isMiniappPlatform) {
        return windowHeight - 100;
    }
    return 0;
}
export function innerRenderSelection(items, values) {
    const labels = !Array.isArray(items) && items.label ? [items.label] : items.map((item) => item.label);
    if (labels.length === 0) {
        return null;
    }
    return createElement(SelectValue, Object.assign(Object.assign({}, values), { items: labels }));
}
export function isSelected(curItems, value) {
    const rs = findInArray(curItems, (item) => item.value === value);
    return !!rs;
}
export function isEqualItems(arr1 = [], arr2 = [], strictMode = false) {
    if (!Array.isArray(arr1) || !Array.isArray(arr2) || arr1.length !== arr2.length) {
        return false;
    }
    let filterFn = (item) => item.value;
    if (strictMode) {
        filterFn = (item) => item.label + item.value;
    }
    return (arr1
        .map(filterFn)
        .sort()
        .toString() ===
        arr2
            .map(filterFn)
            .sort()
            .toString());
}
export function getValidEvtValues({ selectedItems, useDetailValue, isSingle }) {
    let value = isSingle ? null : [];
    let items = isSingle ? {} : [];
    if (isValidArray(selectedItems)) {
        value = selectedItems[0].value;
        if (useDetailValue) {
            value = selectedItems;
        }
        else if (!isSingle) {
            value = selectedItems.map((item) => item.value);
        }
        items = isSingle ? selectedItems[0] : selectedItems;
    }
    return {
        value,
        items,
    };
}
export function defaultLocalFilter(searchText, item) {
    try {
        return new RegExp(searchText).test(item.label);
    }
    catch (e) {
        return item.label.includes(searchText);
    }
}
