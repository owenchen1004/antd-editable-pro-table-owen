import { __awaiter, __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, useEffect } from 'rax';
import Canvas from 'rax-canvas';
import createContext from 'universal-canvas-context';
import { nextTick } from '../utils';
import { useGuid } from '../utils/hooks';
import View from '../view';
import { progressBackgroundColor, progressCircleFontSize, progressCircleWidthSize, progressiveColor, progressSize, statusColor, } from './utils';
const CircleProgress = (props, ref) => {
    const { prefix = 'mt-', percent = 0, color, size = 'medium', backgroundColor, progressive = false, state = 'normal', text, className } = props, others = __rest(props, ["prefix", "percent", "color", "size", "backgroundColor", "progressive", "state", "text", "className"]);
    const canvasId = useGuid('progress-');
    const progressiveColorEnabled = () => {
        if (progressive) {
            return progressiveColor(percent);
        }
        else {
            return color || statusColor(state);
        }
    };
    const drawBaseCircle = (ctx, x, y, r) => {
        ctx.save();
        ctx.beginPath();
        ctx.strokeStyle = progressBackgroundColor(backgroundColor);
        ctx.lineWidth = progressSize(size) / 2;
        ctx.arc(x, y, r, 0, Math.PI * 2, false);
        ctx.stroke();
        ctx.closePath();
        ctx.restore();
    };
    const drawCircle = (ctx, x, y, r, n, rad) => {
        ctx.save();
        ctx.beginPath();
        ctx.strokeStyle = progressiveColorEnabled();
        ctx.lineWidth = progressSize(size) / 2;
        ctx.arc(x, y, r, -Math.PI / 2, -Math.PI / 2 + n * rad, false);
        ctx.lineCap = 'round';
        ctx.stroke();
        ctx.restore();
    };
    const drawText = (ctx, x, y, r, n) => {
        ctx.save();
        ctx.font = `${progressCircleFontSize(size)}px HelveticaNeue`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(text || `${n.toFixed(0)}%`, x, y);
        ctx.restore();
    };
    useEffect(() => {
        (() => __awaiter(void 0, void 0, void 0, function* () {
            const context = yield createContext(canvasId, '2d');
            const elementSize = progressCircleWidthSize(size) * 2;
            const centerX = progressCircleWidthSize(size);
            const centerY = centerX;
            const rad = (Math.PI * 2) / 100;
            drawBaseCircle(context, centerX, centerY, centerX - progressSize(size) / 2);
            drawCircle(context, centerX, centerY, centerX - progressSize(size) / 2, percent, rad);
            drawText(context, centerX, centerY, centerX - progressSize(size) / 2, percent);
            if (context.draw) {
                context.draw();
            }
            nextTick(() => {
                if (context.clearRect) {
                    context.clearRect(0, 0, elementSize, elementSize);
                }
                drawBaseCircle(context, centerX, centerY, centerX - progressSize(size) / 2);
                drawCircle(context, centerX, centerY, centerX - progressSize(size) / 2, percent, rad);
                drawText(context, centerX, centerY, centerX - progressSize(size) / 2, percent);
                if (context.draw) {
                    context.draw();
                }
            });
        }))();
    }, [percent, color, size, state, progressive, backgroundColor]);
    const canvasSize = progressCircleWidthSize(size) * 2;
    return (createElement(View, Object.assign({}, others, { ref: ref, className: classNames(`${prefix}progress`, `${prefix}progress-circle`, className) }),
        createElement(Canvas, { id: canvasId, width: canvasSize, height: canvasSize, style: {
                width: `${canvasSize}px`,
                height: `${canvasSize}px`,
            } })));
};
export default forwardRef(CircleProgress);
