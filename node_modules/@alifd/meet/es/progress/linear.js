import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef } from 'rax';
import View from '../view';
import { progressBackgroundColor, progressiveColor, progressSize, statusColor } from './utils';
import { isNumber } from '../utils';
const LinearProgress = (props, ref) => {
    const { prefix = 'mt-', percent = 0, color, size = 'medium', backgroundColor, progressive = false, state = 'normal', className } = props, others = __rest(props, ["prefix", "percent", "color", "size", "backgroundColor", "progressive", "state", "className"]);
    const progressiveColorEnabled = () => {
        if (progressive) {
            return progressiveColor(percent);
        }
        else {
            return color || statusColor(state);
        }
    };
    const trackStyle = {
        height: progressSize(size),
        backgroundColor: progressBackgroundColor(backgroundColor),
    };
    const barStyle = {
        height: progressSize(size),
        backgroundColor: progressiveColorEnabled(),
        width: `${percent}%`,
    };
    if (isNumber(size) && size > 0) {
        const borderRadiusVal = `${size / 2}rpx`;
        trackStyle.borderRadius = borderRadiusVal;
        barStyle.borderRadius = borderRadiusVal;
    }
    const clsPrefix = `${prefix}progress`;
    return (createElement(View, Object.assign({ ref: ref }, others, { className: classNames(clsPrefix, `${clsPrefix}-line--${size}`, `${clsPrefix}-line-${size}-corner`, className) }),
        createElement(View, { className: classNames(`${clsPrefix}-track`, `${clsPrefix}-line-${size}-corner`), style: trackStyle },
            createElement(View, { className: classNames(`${clsPrefix}-line-bar`, `${clsPrefix}-line-${size}-corner`), style: barStyle }))));
};
export default forwardRef(LinearProgress);
