import { __rest } from "tslib";
import { createElement, forwardRef, useEffect, useState } from 'rax';
import classNames from 'classnames';
import View from '../view';
import Icon from '../icon';
import Button from '../button';
import Checkbox from '../checkbox';
import { changeCheckedItem, checkAllData, filterTransferValue, getDataStatus, setCheckedItem, setListDisabled, } from './utils';
const Transfer = (props, ref) => {
    const { dataSource = [], value = [], titles = [], tabIndex = 0, defaultValue = [], tabChange = () => { }, disabled = false, leftDisabled = false, rightDisabled = false, notFoundContent = 'Not Found', defaultLeftChecked = [], defaultRightChecked = [], onChange = () => { }, buttonText = 'Transfer to', selectItemText = 'Item', style = {} } = props, others = __rest(props, ["dataSource", "value", "titles", "tabIndex", "defaultValue", "tabChange", "disabled", "leftDisabled", "rightDisabled", "notFoundContent", "defaultLeftChecked", "defaultRightChecked", "onChange", "buttonText", "selectItemText", "style"]);
    const rightValue = props.value || defaultValue || [];
    const [currentTabIndex, setTabIndex] = useState(tabIndex);
    let { leftList, rightList } = filterTransferValue(dataSource, rightValue);
    if ('defaultLeftChecked' in props) {
        leftList = setCheckedItem(leftList, defaultLeftChecked);
    }
    if ('defaultRightChecked' in props) {
        rightList = setCheckedItem(rightList, defaultRightChecked);
    }
    const useStateLeft = useState(leftList);
    let transferLeftList = useStateLeft[0];
    const setTransferLeftList = useStateLeft[1];
    const useStateRight = useState(rightList);
    let transferRightList = useStateRight[0];
    const setTransferRightList = useStateRight[1];
    if (leftDisabled) {
        transferLeftList = setListDisabled(transferLeftList);
    }
    if (rightDisabled) {
        transferRightList = setListDisabled(transferRightList);
    }
    if (disabled) {
        transferLeftList = setListDisabled(transferLeftList);
        transferRightList = setListDisabled(transferRightList);
    }
    const transferButtonText = currentTabIndex === 0 ? titles[1] : titles[0];
    const transferList = currentTabIndex === 0 ? transferLeftList : transferRightList;
    const { listDataSize, disabledSize, checkedSize, isCheckAll } = getDataStatus(transferList);
    const prefix = 'mt-';
    const classNameObj = {
        transferCls: classNames(`${prefix}transfer`),
        tabCls: classNames(`${prefix}transfer-tab`),
        tabMainWrap: classNames(`${prefix}transfer-tab-main`),
        tabItemCls: classNames(`${prefix}transfer-tab-main-item`),
        tabIconWrapCls: classNames(`${prefix}transfer-tab-icon-wrap`),
        tabIconCls: classNames(`${prefix}transfer-tab-icon-wrap-icon`),
        tabItemActiveCls: classNames(`${prefix}transfer-tab-main-item`, `${prefix}transfer-tab-main-item--selected`),
        transferList: classNames(`${prefix}transfer-list`, `${prefix}transfer-list--selected`),
        transferItem: classNames(`${prefix}transfer-list-item`),
        transferTips: classNames(`${prefix}transfer-select-tip`),
        checkbox: classNames(`${prefix}transfer-checkbox`),
        transferListScroll: classNames(`${prefix}transfer-list-scroll`),
        transferEmptyContent: classNames(`${prefix}transfer-empty-content`),
        transferButton: classNames(`${prefix}transfer-button`),
    };
    const handleClickTab = (e, item, index) => {
        setTabIndex(index);
        if (tabChange) {
            tabChange(e, item, index);
        }
    };
    const handleClickItem = (checked, e, item, index) => {
        if (currentTabIndex === 0) {
            const newTransferLeftList = transferLeftList.map((obj) => (Object.assign({}, obj)));
            newTransferLeftList[index].isChecked = checked;
            setTransferLeftList(newTransferLeftList);
        }
        else {
            const newTransferRightList = transferRightList.map((obj) => (Object.assign({}, obj)));
            newTransferRightList[index].isChecked = checked;
            setTransferRightList(newTransferRightList);
        }
    };
    const handleClickSelectTip = (checked, e) => {
        if (currentTabIndex === 0) {
            const newTransferLeftList = checkAllData(transferLeftList, checked);
            setTransferLeftList([...newTransferLeftList]);
        }
        else {
            const newTransferRightList = checkAllData(transferRightList, checked);
            setTransferRightList([...newTransferRightList]);
        }
    };
    const handleChangeButton = (e) => {
        const tabsIndex = currentTabIndex === 0 ? 1 : 0;
        const startList = currentTabIndex === 0 ? transferLeftList : transferRightList;
        const endList = currentTabIndex === 0 ? transferRightList : transferLeftList;
        const { initList, initValue, goalList, goalValue, changeList, changeListValue } = changeCheckedItem(startList, endList);
        const leftData = currentTabIndex === 0 ? initList : goalList;
        const rightData = currentTabIndex === 0 ? goalList : initList;
        setTransferLeftList([...leftData]);
        setTransferRightList([...rightData]);
        setTabIndex(tabsIndex);
        if (onChange) {
            onChange(currentTabIndex === 0 ? goalValue : initValue, currentTabIndex === 0 ? goalList : initList, {
                leftValue: currentTabIndex === 0 ? initValue : goalValue,
                leftData: currentTabIndex === 0 ? initList : goalList,
                movedValue: changeListValue,
                movedData: changeList,
                redirection: currentTabIndex === 0 ? 'right' : 'left',
            });
        }
    };
    useEffect(() => {
        if ('value' in props) {
            if (useStateLeft[0].toString() !== leftList.toString()) {
                setTransferLeftList(leftList);
            }
            if (useStateRight[0].toString() !== rightList.toString()) {
                setTransferRightList(rightList);
            }
        }
    }, [value, props.dataSource]);
    return (createElement(View, Object.assign({}, others, { ref: ref, className: classNameObj.transferCls, style: props.style }),
        createElement(View, { className: classNameObj.tabCls },
            createElement(View, { className: classNameObj.tabMainWrap }, titles.map((item, index) => {
                return (createElement(View, { className: currentTabIndex === index ? classNameObj.tabItemActiveCls : classNameObj.tabItemCls, key: index, onClick: (e) => handleClickTab(e, item, index) }, item));
            })),
            createElement(View, { className: classNameObj.tabIconWrapCls },
                createElement(Icon, { name: "switch", className: classNameObj.tabIconCls }))),
        createElement(View, { className: classNameObj.transferList },
            listDataSize > 0 ? (createElement(View, { className: classNameObj.transferTips },
                createElement(Checkbox, { size: "medium", disabled: disabledSize === listDataSize, checked: isCheckAll, indeterminate: !!(!isCheckAll && checkedSize > 0), onChange: (checked, e) => handleClickSelectTip(checked, e) },
                    checkedSize > 0 ? `${checkedSize}/` : '',
                    listDataSize,
                    " ",
                    selectItemText))) : null,
            createElement(View, { className: classNameObj.transferListScroll },
                transferList.map((item, index) => {
                    return (createElement(View, { className: classNameObj.transferItem, key: index },
                        createElement(Checkbox, { size: "medium", className: classNameObj.checkbox, disabled: item.disabled, checked: item.isChecked, onChange: (checked, e) => handleClickItem(checked, e, item, index) }, item.label)));
                }),
                listDataSize <= 0 ? createElement(View, { className: classNameObj.transferEmptyContent }, notFoundContent) : null)),
        createElement(View, { className: classNameObj.transferButton },
            createElement(Button, { type: "primary", size: "large", disabled: disabledSize === listDataSize || checkedSize === 0, fullWidth: true, onClick: (e) => handleChangeButton(e) },
                buttonText,
                " ",
                transferButtonText))));
};
Transfer.displayName = 'Transfer';
export default forwardRef(Transfer);
