import { createElement, useState, useEffect, Fragment } from 'rax';
import classNames from 'classnames';
import dayjs from 'dayjs';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import { EmbedPicker } from '../time-picker';
import { isFunction } from '../utils';
import { isValidDate } from '../utils/date';
export default function CalendarTimePicker(props) {
    const { prefix = 'mt-', value, format = 'HH:mm:ss', label, onPickerToggle, onChange } = props;
    const [showPicker, setShowPicker] = useState(false);
    const [curTime, setTime] = useState(isValidDate(value) ? value : new Date());
    const clsPrefix = `${prefix}calendar-tp`;
    useEffect(() => {
        if (isValidDate(value)) {
            setTime(value);
        }
    }, [value]);
    const handlePickerChange = (date) => {
        const d = dayjs(date);
        const h = d.hour();
        const m = d.minute();
        const s = d.second();
        const newDate = dayjs(curTime)
            .hour(h)
            .minute(m)
            .second(s);
        if (isFunction(onChange)) {
            onChange(newDate.toDate());
        }
    };
    const handleTimeClick = () => {
        const nextState = !showPicker;
        if (isFunction(onPickerToggle)) {
            onPickerToggle(nextState);
        }
        setShowPicker(nextState);
    };
    return (createElement(Fragment, null,
        showPicker ? (createElement(EmbedPicker, { className: `${clsPrefix}-picker`, format: format, value: curTime, onChange: handlePickerChange })) : null,
        createElement(View, { className: `${clsPrefix}` },
            createElement(View, { className: `${clsPrefix}-row` },
                createElement(Text, { className: `${clsPrefix}-label` }, label),
                createElement(View, { className: classNames(`${clsPrefix}-wrapper`, {
                        [`${clsPrefix}-wrapper--active`]: showPicker,
                    }), onClick: handleTimeClick },
                    createElement(Text, { className: `${clsPrefix}-time` }, dayjs(curTime).format(format)),
                    createElement(Icon, { className: classNames(`${clsPrefix}-arrow`, {
                            [`${clsPrefix}-arrow--active`]: showPicker,
                        }), name: "arrow-down" }))))));
}
