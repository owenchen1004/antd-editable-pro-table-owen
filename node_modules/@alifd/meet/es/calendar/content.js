import classNames from 'classnames';
import dayjs from 'dayjs';
import { createElement, Fragment } from 'rax';
import Text from 'rax-text';
import View from '../view';
import { getCellStatus, getDateCellStatus, getCurrentMonthList, getDayList, getMonthList, isHaveDate } from './utils';
import { CellStatusType } from './types';
const YEAR_ROW_CELLS = 3;
const MONTH_ROW_CELLS = 7;
const CalendarContent = (props) => {
    const { selectedDate, visibleDate, mode, type, maxDate, minDate, onDateChange = () => { }, disabledDate, enableTimePicker, locale, prefix, renderCellBottom, renderCellRight, dateCellRender, monthCellRender, firstDay = 0, } = props;
    const onItemClick = (newDate) => {
        if (!newDate) {
            return;
        }
        if (type === 'multi') {
            if (!Array.isArray(selectedDate)) {
                if (onDateChange) {
                    onDateChange([newDate], newDate);
                }
                return;
            }
            const vIndex = isHaveDate(newDate, selectedDate);
            if (vIndex === -1) {
                selectedDate.push(newDate);
                if (onDateChange) {
                    onDateChange(selectedDate, newDate);
                }
                return;
            }
            selectedDate.splice(vIndex, 1);
            if (onDateChange) {
                onDateChange(selectedDate, newDate);
            }
            return;
        }
        if (type === 'range') {
            if (!Array.isArray(selectedDate)) {
                return;
            }
            if (selectedDate.length === 0) {
                if (onDateChange) {
                    onDateChange([newDate], newDate);
                }
                return;
            }
            if (selectedDate.length === 2) {
                if (onDateChange) {
                    onDateChange([newDate], newDate);
                }
                return;
            }
            if (newDate.getTime() < selectedDate[0].getTime()) {
                if (onDateChange) {
                    onDateChange([newDate, selectedDate[0]], newDate);
                }
                return;
            }
            if (onDateChange) {
                onDateChange([selectedDate[0], newDate], newDate);
            }
            return;
        }
        if (onDateChange) {
            onDateChange(newDate, newDate);
        }
        return;
    };
    const renderTopArea = () => {
        if (mode === 'year') {
            return null;
        }
        const headPrefix = `${prefix}calendar-content-top`;
        const weeks = getDayList(locale);
        const tops = [];
        for (let i = 0; i < weeks.length; i++) {
            const index = firstDay + i > 6 ? firstDay + i - 7 : firstDay + i;
            if (!weeks[index]) {
                continue;
            }
            tops.push(createElement(Text, { className: `${headPrefix}-item`, key: `${headPrefix}-item-${weeks[index].value}` }, weeks[index].label));
        }
        return createElement(View, { className: `${headPrefix}` }, tops);
    };
    const renderYearContent = () => {
        const totalMonths = getMonthList(visibleDate, locale);
        const rowCount = totalMonths.length / YEAR_ROW_CELLS;
        const rows = [];
        for (let i = 0; i < rowCount; i++) {
            const datas = totalMonths.slice(i * YEAR_ROW_CELLS, (i + 1) * YEAR_ROW_CELLS);
            rows.push(renderRow(datas, i === 0 ? true : false, i));
        }
        const headPrefix = `${prefix}calendar-content-real`;
        return createElement(View, { className: classNames(`${headPrefix}`, `${headPrefix}-year`) }, rows);
    };
    const renderYearCell = (cellDate, isFirstLine) => {
        let cellType = getCellStatus(cellDate && cellDate.value, selectedDate, mode, type, disabledDate, maxDate, minDate, 'year');
        const cellPrefix = `${prefix}calendar-cell`;
        if (cellType === CellStatusType.begin) {
            if (Object.prototype.toString.call(selectedDate) === '[object Array]') {
                if (selectedDate.length === 1) {
                    cellType = CellStatusType.selected;
                }
            }
        }
        return (createElement(View, { key: cellDate && cellDate.label, className: classNames(cellPrefix, `${cellPrefix}-${mode}`, {
                [`${cellPrefix}-${mode}-${cellType}`]: isFirstLine === false,
                [`${cellPrefix}-${mode}-firstline-${cellType}`]: isFirstLine === true,
            }), onClick: () => {
                if (cellType === CellStatusType.disabled) {
                    return;
                }
                if (onItemClick) {
                    onItemClick(cellDate && cellDate.value);
                }
            } },
            createElement(Text, { className: classNames(`${cellPrefix}-${mode}-text-${cellType}`) }, cellDate && cellDate.label)));
    };
    const renderDateCell = (cellDate, rowPrefix, rowCount, cellPrefix, cellType, realDisable) => {
        return (createElement(View, { key: `date-cell-${cellDate.label}`, className: classNames(`${cellPrefix}${rowPrefix}`, `${cellPrefix}-${mode}`, {
                [`${cellPrefix}-${mode}--short`]: rowCount === 6,
            }), onClick: () => {
                if (realDisable) {
                    return;
                }
                if (onItemClick) {
                    onItemClick(cellDate && cellDate.value);
                }
            } },
            createElement(View, { className: classNames(`${cellPrefix}-left-${cellType}`, `${cellPrefix}${rowPrefix}-left-${cellType}`) }),
            createElement(View, { className: classNames(`${cellPrefix}-right-${cellType}`, `${cellPrefix}${rowPrefix}-right-${cellType}`) }),
            createElement(Text, { className: classNames(`${cellPrefix}-text`, `${cellPrefix}-text-${cellType}`, `${cellPrefix}${rowPrefix}-text-${cellType}`, {
                    [`${cellPrefix}-text--short`]: rowCount === 6,
                }) }, cellDate && cellDate.label),
            renderCellBottom ? (createElement(View, { className: classNames(`${cellPrefix}-contain-bottom-${cellType}`, `${cellPrefix}${rowPrefix}-contain-bottom-${cellType}`) }, renderCellBottom(cellDate && cellDate.value))) : null,
            renderCellRight ? (createElement(View, { className: classNames(`${cellPrefix}-contain-right-${cellType}`, `${cellPrefix}${rowPrefix}-contain-right-${cellType}`) }, renderCellRight(cellDate && cellDate.value))) : null));
    };
    const renderDateContent = (cells, datas, i, firstLine, rowCount) => {
        const cellPrefix = `${prefix}calendar-cell`;
        const [cellType, realDisable] = getDateCellStatus({
            cellDate: datas[i],
            selectedDate,
            mode,
            type,
            disabledDate,
            maxDate,
            minDate,
            visibleDate,
        });
        let rowPrefix = '';
        const rowBegin = i === 0;
        const rowEnd = i === datas.length - 1;
        if (rowBegin) {
            rowPrefix = '-row-begin';
        }
        if (rowEnd) {
            rowPrefix = '-row-end';
        }
        const dateCellClassName = {
            cell: classNames(`${cellPrefix}${rowPrefix}`, `${cellPrefix}-${mode}`, {
                [`${cellPrefix}-${mode}--short`]: rowCount === 6,
            }),
            cellLeft: classNames(`${cellPrefix}-left-${cellType}`, `${cellPrefix}${rowPrefix}-left-${cellType}`),
            cellRight: classNames(`${cellPrefix}-right-${cellType}`, `${cellPrefix}${rowPrefix}-right-${cellType}`),
            cellLabel: classNames(`${cellPrefix}-text`, `${cellPrefix}-text-${cellType}`, `${cellPrefix}${rowPrefix}-text-${cellType}`, {
                [`${cellPrefix}-text--short`]: rowCount === 6,
            }),
            containRight: classNames(`${cellPrefix}-contain-right-${cellType}`, `${cellPrefix}${rowPrefix}-contain-right-${cellType}`),
            containBottom: classNames(`${cellPrefix}-contain-bottom-${cellType}`, `${cellPrefix}${rowPrefix}-contain-bottom-${cellType}`),
        };
        const dateCellContext = {
            firstLine,
            rowCount,
            cellType,
            disabled: realDisable,
        };
        if (dateCellRender) {
            cells.push(createElement(Fragment, { key: i }, dateCellRender(datas[i] && datas[i].value, {
                dateCellClassName,
                onClick: () => onItemClick(datas[i] && datas[i].value),
                defaultDateCell: renderDateCell(datas[i], rowPrefix, rowCount, cellPrefix, cellType, realDisable),
                context: dateCellContext,
            })));
        }
        else {
            cells.push(renderDateCell(datas[i], rowPrefix, rowCount, cellPrefix, cellType, realDisable));
        }
    };
    const renderRow = (datas = [], firstLine, key, rowCount = 5) => {
        const cells = [];
        for (let i = 0; i < datas.length; i++) {
            if (!datas[i]) {
                continue;
            }
            if (mode === 'year') {
                if (monthCellRender) {
                    cells.push(createElement(Fragment, { key: i }, monthCellRender(datas[i] && datas[i].value)));
                }
                else {
                    cells.push(createElement(Fragment, { key: i }, renderYearCell(datas[i], firstLine)));
                }
            }
            else {
                renderDateContent(cells, datas, i, firstLine, rowCount);
            }
        }
        const headPrefix = `${prefix}calendar-content-row`;
        return (createElement(View, { key: `${headPrefix}-${mode}-${key}`, className: classNames(`${headPrefix}`, `${headPrefix}-${mode}`, {
                [`${headPrefix}--short`]: rowCount === 6,
            }) }, cells));
    };
    const renderMonthContent = () => {
        const totalDays = getCurrentMonthList(visibleDate, locale);
        const rowCount = totalDays.length / MONTH_ROW_CELLS;
        const rows = [];
        for (let i = 0; i < rowCount; i++) {
            const datas = totalDays.slice(i * MONTH_ROW_CELLS, (i + 1) * MONTH_ROW_CELLS);
            rows.push(renderRow(datas, i === 0 ? true : false, i, rowCount));
        }
        const headPrefix = `${prefix}calendar-content-real`;
        return createElement(View, { className: classNames(`${headPrefix}`, `${headPrefix}-month`) }, rows);
    };
    const renderWeekContent = () => {
        const rows = [];
        const fD = dayjs(visibleDate).day(firstDay);
        const datas = new Array(7).fill(0).map((key, index) => {
            const day = fD.add(index, 'day');
            return {
                label: day.date().toString(),
                value: new Date(day.valueOf()),
            };
        });
        rows.push(renderRow(datas, true, 0));
        const headPrefix = `${prefix}calendar-content-real`;
        return createElement(View, { className: classNames(`${headPrefix}`, `${headPrefix}-week`) }, rows);
    };
    const renRealContent = () => {
        let rContent = null;
        switch (mode) {
            case 'year':
                rContent = renderYearContent();
                break;
            case 'week':
                rContent = renderWeekContent();
                break;
            case 'month':
            default:
                rContent = renderMonthContent();
                break;
        }
        return rContent;
    };
    const top = renderTopArea();
    const content = renRealContent();
    return (createElement(View, { className: classNames(`${prefix}calendar-content`, `${prefix}calendar-content-${mode}`, {
            [`${prefix}calendar-content--no-bottom`]: enableTimePicker,
        }) },
        top,
        content));
};
export default CalendarContent;
