import { createElement, Fragment, useState } from 'rax';
import dayjs from 'dayjs';
import classNames from 'classnames';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import Button from '../button';
import { EmbedMonthPicker, EmbedYearPicker } from '../date-picker';
import { HeaderType } from './types';
import { formatNumber, updateMonth, updateWeek, updateYear } from './utils';
const formatTitle = (date, mode) => {
    if (!date) {
        return '';
    }
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    if (mode === 'month' || mode === 'week') {
        return `${formatNumber(year)}.${formatNumber(month)}`;
    }
    return formatNumber(year);
};
const CalendarHeader = (props) => {
    const { prefix = 'mt-', date, mode, type, maxDate, minDate, enableYearPicker: enableYearPickerProp = false, enableTimePicker, disabledDate, renderHeadLeft, renderHeadRight, locale, onDateChange = () => { }, onModeChange = () => { }, onPickerShow = () => { }, } = props;
    const [showPicker, setShowPicker] = useState(false);
    const enableYearPicker = type === HeaderType.select || enableYearPickerProp;
    const datePickerProps = {
        value: date,
        disabledDate,
        onChange: (v) => {
            const d = dayjs(v);
            const y = d.get('year');
            const m = d.get('month');
            const newDate = dayjs()
                .year(y)
                .month(m)
                .date(1);
            onDateChange(newDate.toDate(), false, 'picker');
        },
    };
    const clsPrefix = `${prefix}calendar`;
    const clses = {
        picker: classNames({
            [`${clsPrefix}-header-picker`]: !enableTimePicker,
            [`${clsPrefix}-header-picker--with-time`]: enableTimePicker,
        }),
    };
    const togglePicker = () => {
        if (!enableYearPicker) {
            return;
        }
        const nextState = !showPicker;
        setShowPicker(nextState);
        if (onPickerShow) {
            onPickerShow(nextState);
        }
    };
    const renderSelectedHeader = () => {
        const headPrefix = `${prefix}calendar-header`;
        return (createElement(Fragment, null,
            createElement(View, { className: classNames(`${headPrefix}`, `${headPrefix}-select`) },
                createElement(View, { className: `${headPrefix}-select-title-container ${headPrefix}-select-title-container-${mode}`, onClick: togglePicker },
                    createElement(Text, { className: classNames(`${headPrefix}-select-title`, {
                            [`${headPrefix}-select-title--highlight`]: showPicker,
                        }) }, dayjs(date).format(mode === 'year' ? 'YYYY' : 'YYYY.MM')),
                    createElement(Icon, { name: "arrow-down", size: "xs", className: showPicker ? `${prefix}calendar-header-arrow-up` : `${prefix}calendar-header-arrow` })),
                createElement(View, { className: `${headPrefix}-select-button-container` },
                    createElement(Button.Group, { size: "small" },
                        createElement(Button, { disabled: enableYearPicker && showPicker, type: mode === 'month' ? 'primary' : 'normal', onClick: () => {
                                if (onModeChange) {
                                    onModeChange('month');
                                }
                            } }, (locale && locale.month) || '月'),
                        createElement(Button, { disabled: enableYearPicker && showPicker, type: mode === 'year' ? 'primary' : 'normal', onClick: () => {
                                if (onModeChange) {
                                    onModeChange('year');
                                }
                            } }, (locale && locale.year) || '年')))),
            showPicker ? (createElement(EmbedMonthPicker, Object.assign({ className: clses.picker, validRange: [minDate, maxDate] }, datePickerProps))) : null));
    };
    const renderNormalHeader = () => {
        const headPrefix = `${prefix}calendar-header`;
        let leftYearIcon = null;
        let rightYearIcon = null;
        if (!enableYearPickerProp) {
            leftYearIcon = (createElement(Icon, { className: classNames(`${headPrefix}-normal-icon double`, {
                    [`${headPrefix}-normal-icon-disabled`]: showPicker,
                }), name: "arrow-double-left", onClick: () => {
                    if (showPicker) {
                        return;
                    }
                    if (onDateChange) {
                        if (mode !== 'week') {
                            onDateChange(updateYear(date, false, maxDate, minDate), false, 'year');
                        }
                        else {
                            onDateChange(updateMonth(date, false, maxDate, minDate), false, 'month');
                        }
                    }
                } }));
            rightYearIcon = (createElement(Icon, { className: classNames(`${headPrefix}-normal-icon double`, {
                    [`${headPrefix}-normal-icon-disabled`]: showPicker,
                }), name: "arrow-double-right", onClick: () => {
                    if (showPicker) {
                        return;
                    }
                    if (onDateChange) {
                        if (mode !== 'week') {
                            onDateChange(updateYear(date, true, maxDate, minDate), true, 'year');
                        }
                        else {
                            onDateChange(updateMonth(date, true, maxDate, minDate), true, 'month');
                        }
                    }
                } }));
        }
        if (renderHeadLeft) {
            leftYearIcon = renderHeadLeft();
        }
        if (renderHeadRight) {
            rightYearIcon = renderHeadRight();
        }
        return (createElement(Fragment, null,
            createElement(View, { className: classNames(`${headPrefix}`, `${headPrefix}-normal`, {
                    [`${headPrefix}-normal--highlighted`]: showPicker,
                }) },
                createElement(View, { className: `${headPrefix}-normal-left-container` },
                    leftYearIcon,
                    createElement(Icon, { className: classNames(`${headPrefix}-normal-icon`, {
                            [`${headPrefix}-normal-icon-disabled`]: showPicker,
                            [`${headPrefix}-normal-icon--only`]: !leftYearIcon,
                        }), name: "arrow-left", onClick: () => {
                            if (showPicker) {
                                return;
                            }
                            if (onDateChange) {
                                if (mode !== 'week') {
                                    onDateChange(updateMonth(date, false, maxDate, minDate), false, 'month');
                                }
                                else {
                                    onDateChange(updateWeek(date, false, maxDate, minDate), false, 'week');
                                }
                            }
                        } })),
                createElement(View, { className: `${headPrefix}-normal-title-text-wrapper`, onClick: togglePicker },
                    createElement(Text, { className: classNames(`${headPrefix}-normal-title-text`, {
                            [`${headPrefix}-normal-title-text--highlighted`]: showPicker,
                        }), onClick: () => { } }, showPicker ? formatTitle(date, mode) : formatTitle(date, mode)),
                    enableYearPicker ? (createElement(Icon, { name: "arrow-down", size: "xs", className: showPicker ? `${prefix}calendar-header-arrow-up` : `${prefix}calendar-header-arrow` })) : null),
                createElement(View, { className: `${headPrefix}-normal-right-container` },
                    createElement(Icon, { className: classNames(`${headPrefix}-normal-icon`, {
                            [`${headPrefix}-normal-icon-disabled`]: showPicker,
                            [`${headPrefix}-normal-icon--only`]: !rightYearIcon,
                        }), name: "arrow-right", onClick: () => {
                            if (showPicker) {
                                return;
                            }
                            if (onDateChange) {
                                if (mode !== 'week') {
                                    onDateChange(updateMonth(date, true, maxDate, minDate), true, 'month');
                                }
                                else {
                                    onDateChange(updateWeek(date, true, maxDate, minDate), true, 'week');
                                }
                            }
                        } }),
                    rightYearIcon)),
            showPicker ? (createElement(Fragment, null, mode === 'year' ? (createElement(EmbedYearPicker, Object.assign({ className: clses.picker, validRange: [minDate, maxDate] }, datePickerProps))) : (createElement(EmbedMonthPicker, Object.assign({ className: clses.picker, validRange: [minDate, maxDate] }, datePickerProps))))) : null));
    };
    return type === HeaderType.select ? renderSelectedHeader() : renderNormalHeader();
};
export default CalendarHeader;
