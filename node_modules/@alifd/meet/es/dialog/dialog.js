import { __rest } from "tslib";
import { createElement, forwardRef, Fragment, useCallback, useMemo, useEffect } from 'rax';
import classNames from 'classnames';
import Text from 'rax-text';
import { vibrateLong } from '@uni/vibrate';
import View from '../view';
import Icon from '../icon';
import SafeArea from '../safe-area';
import Button from '../button';
import Modal from '../modal';
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
import { isBoolean, isString, isValidArray } from '../utils';
const FooterWrapper = (wrapperProps) => {
    const { centered, children } = wrapperProps, others = __rest(wrapperProps, ["centered", "children"]);
    if (centered) {
        return createElement(View, Object.assign({}, others), children);
    }
    return createElement(Fragment, null, children);
};
const MESSAGE_TYPE = {
    alert: 'warning',
    confirm: 'help',
    success: 'success',
    error: 'error',
    warning: 'warning',
    notice: 'prompt',
    help: 'help',
};
const Dialog = (props, ref) => {
    const { prefix = 'mt-', visible = false, type = 'normal', platform = 'ios', title: titleProp, content, contentClassName, closeMode: closeModeProp, footerActions: footerActionsProp, vibrative = false, footer = true, centered = false, okProps = { text: '' }, cancelProps = { text: '' }, className, showIcon: showIconProp, children, onOk = () => { }, onCancel = () => { }, onClose = () => { } } = props, others = __rest(props, ["prefix", "visible", "type", "platform", "title", "content", "contentClassName", "closeMode", "footerActions", "vibrative", "footer", "centered", "okProps", "cancelProps", "className", "showIcon", "children", "onOk", "onCancel", "onClose"]);
    const showIcon = showIconProp === true ? true : !centered;
    const closeMode = useMemo(() => {
        if (closeModeProp) {
            return closeModeProp;
        }
        return centered ? ['ok', 'mask', 'cancel'] : ['close', 'ok', 'mask', 'cancel'];
    }, [closeModeProp, centered]);
    const footerActions = useMemo(() => {
        if (footerActionsProp) {
            return footerActionsProp;
        }
        if (['alert', 'success', 'error', 'notice', 'warning', 'help'].indexOf(type) > -1) {
            return ['ok'];
        }
        return ['cancel', 'ok'];
    }, [footerActionsProp, type]);
    const iconName = useMemo(() => MESSAGE_TYPE[type] || '', [type]);
    const locale = useLocale('Dialog', others, defaultLang.Dialog);
    const clsPrefix = `${prefix}dialog`;
    const closable = closeMode.includes('close');
    const clses = useMemo(() => ({
        dialog: classNames(`${clsPrefix}`, className, {
            [`${clsPrefix}--centered`]: centered,
        }),
        header: classNames(`${clsPrefix}-header`, {
            [`${clsPrefix}-header--centered`]: centered,
        }),
        closeWrapper: classNames(`${clsPrefix}-close-wrapper`, {
            [`${clsPrefix}-close-wrapper--content`]: !titleProp && closable,
            [`${clsPrefix}-close-wrapper--centered`]: centered && closable,
        }),
        close: classNames(`${clsPrefix}-close`, {
            [`${clsPrefix}-close--centered`]: centered,
        }),
        container: classNames(`${clsPrefix}-container`, {
            [`${clsPrefix}-container--centered ${clsPrefix}-container--${platform}`]: centered,
        }),
        icon: classNames({
            [`${clsPrefix}-icon`]: true,
            [`${clsPrefix}-icon--${type}`]: true,
            [`${clsPrefix}-icon--centered`]: centered,
        }),
        title: classNames(`${clsPrefix}-title`, {
            [`${clsPrefix}-title--centered`]: centered,
            [`${clsPrefix}-title--${platform}`]: platform && centered,
            [`${clsPrefix}-title--fullwidth`]: titleProp && closable,
        }),
        content: classNames(contentClassName, {
            [`${clsPrefix}-content`]: !centered,
            [`${clsPrefix}-content--centered ${clsPrefix}-content--centered-${platform}`]: centered,
        }),
        innerContent: classNames(`${clsPrefix}-inner-content`, {
            [`${clsPrefix}-inner-content--fullwidth`]: !closable || (closable && titleProp),
            [`${clsPrefix}-inner-content--centered`]: centered,
        }),
        footer: classNames({
            [`${clsPrefix}-footer`]: !centered,
            [`${clsPrefix}-footer--centered ${clsPrefix}-footer--centered-${platform}`]: centered,
        }),
    }), [clsPrefix, className, centered, closable, titleProp, platform]);
    const okBtnText = okProps.text || locale.ok;
    const cancelText = cancelProps.text || locale.cancel;
    const handleIconClose = useCallback((e) => {
        if (closable) {
            onClose('close', e);
        }
    }, [closable, onClose]);
    const renderInnerContent = () => {
        let innerContent = content;
        if (isString(content)) {
            innerContent = createElement(Text, { className: `${clsPrefix}-content-text` }, content);
        }
        else if (children) {
            innerContent = children;
        }
        return innerContent;
    };
    const renderTitle = () => {
        let title = titleProp || null;
        if (title) {
            title = isString(title) ? (createElement(Text, { className: clses.title, numberOfLines: 3 }, title)) : (createElement(View, { className: clses.title }, title));
        }
        return title;
    };
    useEffect(() => {
        if (visible === true && vibrative === true) {
            vibrateLong({}).then(() => { });
        }
    }, [visible]);
    const renderFooter = () => {
        const wrapperClassName = classNames(`${clsPrefix}-btn-col`, `${clsPrefix}-btn-col--${platform}`);
        const emptyFooter = null;
        if (footer) {
            if (!isBoolean(footer)) {
                return createElement(View, { className: clses.footer }, footer);
            }
            else if (isValidArray(footerActions)) {
                return (createElement(View, { className: clses.footer }, footerActions.map((actionType, index) => {
                    let buttonProps = okProps;
                    if (typeof actionType === 'object') {
                        buttonProps = actionType;
                    }
                    else if (actionType === 'cancel') {
                        buttonProps = cancelProps;
                    }
                    const { text, className: btnClassNameProp, model, onClick: _onClick } = buttonProps, restProps = __rest(buttonProps, ["text", "className", "model", "onClick"]);
                    const isFirst = index === 0;
                    const isCancel = actionType === 'cancel';
                    const btnClassName = classNames(btnClassNameProp, {
                        [`${clsPrefix}-btn`]: !centered,
                        [`${clsPrefix}-btn--centered`]: centered,
                        [`${clsPrefix}-btn--centered-${actionType}`]: centered,
                    });
                    let btnModel = model || 'text';
                    if (!centered && !model) {
                        btnModel = isCancel ? 'outline' : 'solid';
                    }
                    let btnText;
                    if (text) {
                        btnText = text;
                    }
                    else if (isCancel) {
                        btnText = cancelText;
                    }
                    else {
                        btnText = okBtnText;
                    }
                    return (createElement(FooterWrapper, { key: `mt_dialog_${index}`, centered: centered, className: centered ? wrapperClassName : '' },
                        !isFirst ? createElement(View, { className: `${clsPrefix}-footer-gap` }) : null,
                        createElement(Button, Object.assign({ key: `mt_dialog_${index}`, type: "primary", size: "large", model: btnModel }, restProps, { className: btnClassName, onClick: (e) => {
                                if (isString(actionType)) {
                                    if (isCancel) {
                                        onCancel(e);
                                    }
                                    else {
                                        onOk(e);
                                    }
                                    if (closeMode.includes(actionType)) {
                                        onClose(actionType, e);
                                    }
                                }
                                else if (actionType.onClick) {
                                    actionType.onClick(e);
                                }
                            } }), btnText)));
                })));
            }
        }
        return emptyFooter;
    };
    const titleEl = renderTitle();
    const showHeader = titleEl || (!centered && iconName) || (closable && titleProp);
    return (createElement(Modal, Object.assign({}, others, { ref: ref, visible: visible, maskClosable: closeMode.includes('mask'), placement: centered === true ? 'center' : 'bottom', containerClassName: clses.dialog, onClose: onClose }),
        createElement(View, { className: clses.container },
            showIcon && centered && iconName ? createElement(Icon, { name: iconName, className: clses.icon, size: "xxl" }) : null,
            createElement(View, { className: `${clsPrefix}-main` },
                showHeader ? (createElement(View, { className: clses.header },
                    showIcon && !centered && iconName ? createElement(Icon, { name: iconName, className: clses.icon, size: "s" }) : null,
                    titleEl,
                    closable && titleProp ? (createElement(View, { className: clses.closeWrapper },
                        createElement(Icon, { name: "close", className: clses.close, size: "xxs", onClick: handleIconClose }))) : null)) : null,
                createElement(View, { className: clses.content },
                    createElement(View, { className: clses.innerContent }, renderInnerContent()),
                    !titleProp && closable ? (createElement(View, { className: clses.closeWrapper },
                        createElement(Icon, { name: "close", className: clses.close, size: "xxs", onClick: handleIconClose }))) : null))),
        renderFooter(),
        !centered ? createElement(SafeArea, null) : null));
};
Dialog.displayName = 'Dialog';
export default forwardRef(Dialog);
