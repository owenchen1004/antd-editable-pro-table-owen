import { createElement, useState } from 'rax';
import { renderToRoot } from '../utils/render';
import Dialog from './dialog';
const DialogWrapper = (props) => {
    const { onClose } = props;
    const [visible, setVisible] = useState(true);
    const handleClose = (reason, e) => {
        setVisible(false);
        setTimeout(() => {
            if (onClose) {
                onClose(reason, e);
            }
        }, 300);
    };
    return createElement(Dialog, Object.assign({}, props, { onClose: handleClose, visible: visible, disablePortal: true }));
};
const hideStack = [];
const methodFactory = (type) => (props) => {
    return show(Object.assign(Object.assign({}, props), { type }));
};
export const show = (props) => {
    const emptyFn = () => { };
    let { onClose = emptyFn } = props;
    const hideCurrent = renderToRoot(createElement(DialogWrapper, Object.assign({}, props, { onClose: (reason, e) => {
            onClose(reason, e);
            onClose = emptyFn;
            hideCurrent();
        } })), () => onClose('api', null));
    hideStack.push(hideCurrent);
    return {
        hide: hideCurrent,
    };
};
export const hide = () => {
    while (hideStack.length) {
        const h = hideStack.pop();
        if (h) {
            h.call(null);
        }
    }
};
export const alert = methodFactory('alert');
export const confirm = methodFactory('confirm');
export const success = methodFactory('success');
export const error = methodFactory('error');
export const notice = methodFactory('notice');
export const warning = methodFactory('warning');
export const help = methodFactory('help');
