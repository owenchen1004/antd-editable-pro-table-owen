import { __rest } from "tslib";
import { createElement, forwardRef, Fragment, useCallback, useMemo, } from 'rax';
import classNames from 'classnames';
import Children from 'rax-children';
import cloneElement from 'rax-clone-element';
import isValidElement from 'rax-is-valid-element';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import { isBoolean, isFunction, isNil } from '../utils';
const createChildren = (children, classes, prefix, size) => {
    const count = Children.count(children);
    return Children.map(children, (child, index) => {
        if (isNil(child) || isBoolean(child)) {
            return null;
        }
        const key = child.key || `mt-button-${index}`;
        if (isValidElement(child)) {
            if (child.type === Text) {
                return cloneElement(child, {
                    key,
                    className: classNames(classes.textCls, child.props.className),
                    style: child.props.style || {},
                });
            }
            else if (child.type === Icon) {
                return cloneElement(child, {
                    key,
                    className: classNames(classes.iconCls, child.props.className, {
                        [`${prefix}button-icon--${size}-first`]: index === 0,
                        [`${prefix}button-icon--${size}-last`]: index === count - 1,
                    }),
                    style: child.props.style || {},
                });
            }
            else {
                return cloneElement(child, {
                    key,
                });
            }
        }
        else {
            return (createElement(Text, { key: key, className: classes.textCls }, child));
        }
    });
};
const Button = (props, ref) => {
    const { prefix = 'mt-', type: typeProp = 'normal', size = 'medium', fullWidth = false, disabled = false, loading = false, text = false, warning = false, children, model: modelProp = 'solid', className, component = View, onClick = () => { }, onDisabledClick } = props, others = __rest(props, ["prefix", "type", "size", "fullWidth", "disabled", "loading", "text", "warning", "children", "model", "className", "component", "onClick", "onDisabledClick"]);
    const [type, model] = useMemo(() => {
        let nType = typeProp;
        let nModel = modelProp;
        if (typeProp === 'secondary') {
            nType = 'primary';
            nModel = 'outline';
        }
        if (text) {
            nModel = 'text';
        }
        if (warning) {
            nType = 'warning';
        }
        return [nType, nModel];
    }, [typeProp, modelProp, warning, text]);
    const textCls = `${prefix}button-font--${size}`;
    const iconCls = `${prefix}button-font--${size}`;
    const classes = {
        textCls,
        iconCls,
    };
    const handleClick = useCallback((e) => {
        if (disabled) {
            if (isFunction(onDisabledClick)) {
                onDisabledClick(e);
            }
            return;
        }
        onClick(e);
    }, [disabled, onDisabledClick, onClick]);
    return createElement(component, Object.assign(Object.assign({ ref }, others), { className: classNames(className, `${prefix}button`, `${prefix}button--${size}`, `${prefix}button--${type}-${model}`, {
            [`${prefix}button--fullwidth`]: fullWidth,
            [`${prefix}button--${type}-${model}-disabled`]: disabled,
        }), onClick: handleClick }), createElement(Fragment, null,
        loading ? (createElement(Icon, { key: "prefix-icon", className: classNames(iconCls, `${prefix}button-icon--${size}-first`), name: "loading" })) : null,
        createChildren(children, classes, prefix, size)));
};
Button.displayName = 'Button';
export default forwardRef(Button);
