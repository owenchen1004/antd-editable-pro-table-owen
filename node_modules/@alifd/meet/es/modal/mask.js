import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, useEffect, useState } from 'rax';
import { isWeb } from '@uni/env';
import View from '../view';
const Mask = (props, ref) => {
    const { prefix = 'mt-', className, visible, view } = props, others = __rest(props, ["prefix", "className", "visible", "view"]);
    const [show, setShow] = useState(visible);
    const clsPrefix = `${prefix}modal`;
    const clsDisableScroll = `${clsPrefix}-mask--disable-scroll`;
    useEffect(() => {
        if (!visible && show) {
            const t1 = setTimeout(() => {
                setShow(false);
            }, 100);
            return () => {
                clearTimeout(t1);
            };
        }
        else {
            setShow(visible);
        }
        const tryRemoveDisableScrollCls = () => {
            const activeMasks = document.getElementsByClassName(`${clsPrefix}-mask--active`);
            if (activeMasks.length === 0) {
                document.body.classList.remove(clsDisableScroll);
            }
        };
        if (isWeb) {
            if (visible) {
                document.body.classList.add(clsDisableScroll);
            }
            else {
                tryRemoveDisableScrollCls();
            }
            return () => {
                tryRemoveDisableScrollCls();
            };
        }
    }, [visible]);
    if (!show) {
        return null;
    }
    return (createElement(View, Object.assign({ ref: ref }, others, { "disable-scroll": true, catchTouchMove: true, className: classNames(className, `${clsPrefix}-mask`, {
            [`${clsPrefix}-mask--active`]: visible,
            [`${clsPrefix}-mask--inactive`]: !visible,
        }) })));
};
Mask.displayName = 'Modal.Mask';
export default forwardRef(Mask);
