import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, useEffect, useState } from 'rax';
import Portal from 'rax-portal';
import View from '../view';
import Mask from './mask';
import { isNumber } from '../utils';
const Modal = (props, ref) => {
    const { prefix = 'mt-', view = false, visible = false, container, disablePortal = false, placement = 'center', className = '', maskClassName = '', containerClassName = '', containerStyle = {}, showMask = true, maskClosable = true, usePortal = true, disableScroll = false, onMaskClick = () => { }, onClose = () => { }, onVisibleChange = () => { }, children, zIndex, style: styleProp = {} } = props, others = __rest(props, ["prefix", "view", "visible", "container", "disablePortal", "placement", "className", "maskClassName", "containerClassName", "containerStyle", "showMask", "maskClosable", "usePortal", "disableScroll", "onMaskClick", "onClose", "onVisibleChange", "children", "zIndex", "style"]);
    const [show, setShow] = useState(props.visible);
    useEffect(() => {
        if (show && !visible) {
            const t1 = setTimeout(() => setShow(false), 300);
            return () => clearTimeout(t1);
        }
        else {
            setShow(visible);
            onVisibleChange(visible);
        }
    }, [visible]);
    const handleMaskClick = (e) => {
        if (onMaskClick) {
            onMaskClick(e);
        }
        if (maskClosable && onClose) {
            onClose('mask', e);
            onVisibleChange(false, 'mask');
        }
    };
    const clsPrefix = `${prefix}modal`;
    const modalContainer = (createElement(View, Object.assign({}, others, { ref: ref, className: classNames(containerClassName, `${clsPrefix}-container`, `${clsPrefix}-container--${placement}`, {
            [`${clsPrefix}-container--${placement}-active`]: visible,
            [`${clsPrefix}-container--${placement}-inactive`]: !visible,
        }), style: Object.assign(Object.assign({}, styleProp), containerStyle) }), children));
    const element = show ? (createElement(View, { "disable-scroll": disableScroll, catchTouchMove: disableScroll, className: classNames(className, `${clsPrefix}`, `${clsPrefix}--${placement}`, {
            [`${clsPrefix}--no-portal`]: !usePortal,
        }), ref: ref, style: isNumber(zIndex) ? { zIndex } : null },
        showMask ? createElement(Mask, { ref: ref, className: maskClassName, visible: visible, onClick: handleMaskClick }) : null,
        modalContainer)) : null;
    if (disablePortal || view) {
        return element;
    }
    if (!usePortal) {
        return (createElement(View, { ref: ref, className: `${clsPrefix}-theme-wrapper` }, element));
    }
    return createElement(Portal, { container: container }, element);
};
Modal.displayName = 'Modal';
export default forwardRef(Modal);
