import { __rest } from "tslib";
import { createElement, forwardRef, useState } from 'rax';
import classNames from 'classnames';
import cloneElement from 'rax-clone-element';
import Image from 'rax-image';
import View from '../view';
import Icon from '../icon';
import { isStrictMiniApp, isString } from '../utils';
const Avatar = (props, ref) => {
    const { prefix = 'mt-', size = 'medium', shape = 'circle', src, alt, srcSet, className, icon = null, onError = () => { }, onClick = () => { } } = props, others = __rest(props, ["prefix", "size", "shape", "src", "alt", "srcSet", "className", "icon", "onError", "onClick"]);
    let { children } = props;
    const [isImgExist, setImgExist] = useState(true);
    const iconCls = `${prefix}avatar-icon--${size}`;
    const handleError = (err) => {
        if (!isStrictMiniApp) {
            onError(err);
            setImgExist(false);
        }
    };
    if (src) {
        if (isImgExist) {
            const source = {
                uri: src,
            };
            children = createElement(Image, { src: src, source: source, srcSet: srcSet, alt: alt, onError: handleError });
        }
        else if (alt) {
            children = isString(alt) ? alt.substr(0, 2) : children;
        }
    }
    else if (isString(icon)) {
        children = createElement(Icon, { className: iconCls, name: icon });
    }
    else if (icon) {
        children = cloneElement(icon, {
            className: iconCls,
        });
    }
    else {
        children = isString(children) ? children.substr(0, 2) : children;
    }
    return (createElement(View, Object.assign({ ref: ref }, others, { className: classNames(className, `${prefix}avatar`, `${prefix}avatar--${size}`, `${prefix}avatar--${shape}`), onClick: onClick }), children));
};
Avatar.displayName = 'Avatar';
export default forwardRef(Avatar);
