import { __rest } from "tslib";
import { createElement, forwardRef, useContext } from 'rax';
import classnames from 'classnames';
import Icon from '../icon';
import List from '../list';
import MenuContext from './menu-context';
import { isInvalidValue } from '../utils';
const MenuItem = (props, ref) => {
    const context = useContext(MenuContext);
    const { className, children, disabled, itemKey, title } = props, others = __rest(props, ["className", "children", "disabled", "itemKey", "title"]);
    const { prefix, selectMode, selectedKeys, onClickItem, onSelect } = context;
    const selected = !isInvalidValue(itemKey) && selectedKeys.includes(itemKey);
    const handleClick = (e) => {
        onClickItem(itemKey, props, e);
        if (selectMode) {
            onSelect(!selected, props);
        }
    };
    return (createElement(List.Item, Object.assign({}, others, { ref: ref, className: classnames(`${prefix}menu-item`, className, {
            [`${prefix}menu-item--disabled`]: disabled,
        }), title: children || title, disabled: disabled, extra: selected ? createElement(Icon, { name: "select" }) : null, onClick: handleClick })));
};
export default forwardRef(MenuItem);
