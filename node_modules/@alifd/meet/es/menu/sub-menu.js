import { __rest } from "tslib";
import { createElement, forwardRef, useContext } from 'rax';
import classnames from 'classnames';
import List from '../list';
import View from '../view';
import MenuContext from './menu-context';
import { DEFAULT_INLINE_INDENT } from './constant';
const SubMenu = (props, ref) => {
    const context = useContext(MenuContext);
    const { className, containerClassName, containerStyle, children, label, loading, keyPath, depth = 1 } = props, others = __rest(props, ["className", "containerClassName", "containerStyle", "children", "label", "loading", "keyPath", "depth"]);
    const { prefix, inlineIndent = DEFAULT_INLINE_INDENT, openKeys, onOpen } = context;
    const open = keyPath && openKeys.includes(keyPath);
    const handleOpen = () => {
        if (!loading) {
            onOpen({
                key: keyPath,
                open: !open,
            });
        }
    };
    return (createElement(View, Object.assign({}, others, { ref: ref, className: containerClassName, style: containerStyle }),
        createElement(List.Item, { className: classnames(`${prefix}menu-sub-menu`, className, {
                [`${prefix}menu-sub-menu--loading`]: loading,
            }), title: label, arrow: loading ? 'loading' : open ? 'up' : 'down', onClick: handleOpen }),
        createElement(View, { className: classnames(`${prefix}menu-sub-menu-list`, {
                [`${prefix}menu-sub-menu-list--open`]: open,
            }), style: {
                textIndent: `${inlineIndent * 2 * depth}rpx`,
            } }, children)));
};
export default forwardRef(SubMenu);
