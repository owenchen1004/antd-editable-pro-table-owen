import { isMiniApp, isWeChatMiniProgram, isByteDanceMicroApp, isWeb } from '@uni/env';
import { isUndef } from './fp';
function formatVersion(v) {
    return String(v).replace(/_/g, '.');
}
function getOSInfo(ua) {
    const OSList = {
        ios: /(like Mac OS X)/i,
        android: /Android/i,
        wp: /Windows Phone/i,
        bb: /(BlackBerry)|(RIM)/i,
        win: /(Windows 95)|(Win95)|(Windows_95)|(Windows ME)|(Windows 98)|(Win98)|(Windows NT 5.0)|(Windows 2000)|(Windows NT)|(WinNT)|(Windows XP)/i,
        linux: /(Linux)|(X11)/i,
        macos: /(Mac_PowerPC)|(Macintosh)/i,
        robot: /(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(ia_archiver)/i,
    };
    const os = {
        name: 'unknown',
        version: '0.0.0',
    };
    if (/Windows\sPhone\s(?:OS\s)?([\d.]+)/.test(ua)) {
        os.version = RegExp.$1;
    }
    else if (/Safari/.test(ua) && /Android[\s/]([\d.]+)/.test(ua)) {
        os.version = RegExp.$1;
    }
    else if (/(iPhone|iPad|iPod)/.test(ua) && /OS ([\d_.]+) like Mac OS X/.test(ua)) {
        os.version = RegExp.$1;
    }
    os.version = formatVersion(os.version);
    for (const _osName in OSList) {
        const Reg = OSList[_osName];
        if (Reg.test(ua)) {
            os.name = _osName;
            break;
        }
    }
    return os;
}
export const isStrictMiniApp = isMiniApp && !isWeb;
export const isStrictWechatMiniProgram = isWeChatMiniProgram && !isWeb;
export const isStrictByteDanceMicroApp = isByteDanceMicroApp && !isWeb;
export const isMiniappPlatform = !isWeb && (isMiniApp || isWeChatMiniProgram || isByteDanceMicroApp);
let systemInfo;
if (isStrictMiniApp) {
    systemInfo = my.getSystemInfoSync();
}
else if (isStrictWechatMiniProgram) {
    systemInfo = wx.getSystemInfoSync();
}
else if (isStrictByteDanceMicroApp) {
    systemInfo = tt.getSystemInfoSync();
}
let name = 'unknown';
let version = '0.0.0';
if (isStrictWechatMiniProgram) {
    const { system } = systemInfo;
    name = system.split(' ')[0].toLowerCase();
    version = system.split(' ')[1];
}
else if (isStrictMiniApp) {
    const { system, platform } = systemInfo;
    name = platform.toLowerCase();
    version = system;
}
else if (isStrictByteDanceMicroApp) {
    const { system, platform } = systemInfo;
    name = platform.toLowerCase();
    version = system;
}
else {
    const UA = isUndef(navigator) ? '' : navigator.userAgent;
    const info = getOSInfo(UA);
    name = info.name;
    version = info.version;
}
export { systemInfo };
export const screenWidth = systemInfo && !isUndef(systemInfo.screenWidth) ? systemInfo.screenWidth : window.screen.width;
export const screenHeight = systemInfo && !isUndef(systemInfo.screenHeight) ? systemInfo.screenHeight : window.screen.height;
export const windowWidth = systemInfo && !isUndef(systemInfo.windowWidth) ? systemInfo.windowWidth : document.documentElement.clientWidth;
export const windowHeight = systemInfo && !isUndef(systemInfo.windowHeight) ? systemInfo.windowHeight : document.documentElement.clientHeight;
export const dpr = systemInfo && (systemInfo.devicePixelRatio || systemInfo.pixelRatio)
    ? systemInfo.devicePixelRatio || systemInfo.pixelRatio
    : window.devicePixelRatio;
export const osName = name;
export const osVersion = version;
export const isIOS = name === 'ios';
export const isAndroid = name === 'android';
export const screenRate = screenWidth / 750;
export const screenPixelRatio = isMiniappPlatform ? 1 : windowWidth / 750;
export const isProduction = () => {
    const PRODUCTION_ENV = 'production';
    let result = false;
    try {
        if (process.env.NODE_ENV === PRODUCTION_ENV) {
            result = true;
        }
    }
    catch (err) {
    }
    return result;
};
