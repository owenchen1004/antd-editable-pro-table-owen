import { render, shared } from 'rax';
import unmountComponentAtNode from 'rax-unmount-component-at-node';
import DriverUniversal from 'driver-universal';
import { isStrictByteDanceMicroApp, isStrictWechatMiniProgram } from './env';
let provider = null;
export function onProviderMount(p) {
    provider = p;
}
export function onProviderUnMount() {
    provider = null;
}
function renderWithProvider(element, onHide) {
    return provider.addPortal({
        element,
        onHide,
    });
}
function renderWithDriver(element, onHide) {
    var _a;
    if (!shared || !shared.Host || !shared.Host.driver) {
        console.warn('shared.Host.driver is invalid, using DriverUniversal instead.');
    }
    const driver = ((_a = shared === null || shared === void 0 ? void 0 : shared.Host) === null || _a === void 0 ? void 0 : _a.driver) || DriverUniversal;
    const root = document.createElement('div');
    let hid = false;
    const hide = () => {
        if (hid) {
            return;
        }
        try {
            hid = true;
            unmountComponentAtNode(root);
            document.body.removeChild(root);
            if (onHide) {
                onHide();
            }
        }
        catch (e) {
            throw new Error('remove element error');
        }
    };
    if (isStrictWechatMiniProgram || isStrictByteDanceMicroApp) {
        render(element, root, {
            driver: Object.assign(Object.assign({}, driver), { afterRender: () => {
                    try {
                        if (isStrictWechatMiniProgram || isStrictByteDanceMicroApp) {
                            setTimeout(() => {
                                document.body.appendChild(root);
                            });
                        }
                        else {
                            document.body.appendChild(root);
                        }
                    }
                    catch (e) {
                        console.warn(e);
                    }
                } }),
        });
    }
    else {
        document.body.appendChild(root);
        render(element, root, { driver });
    }
    return hide;
}
export function renderToRoot(element, onHide) {
    if (provider) {
        return renderWithProvider(element, onHide);
    }
    return renderWithDriver(element, onHide);
}
