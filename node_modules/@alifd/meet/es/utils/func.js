import { __rest } from "tslib";
import { screenRate } from './env';
import Children from 'rax-children';
import { findInArray } from './fp';
export function makeChain(...fns) {
    if (fns.length === 1) {
        return fns[0];
    }
    return function chainedFunction(...args) {
        let i = 0;
        const j = fns.length;
        for (; i < j; i++) {
            if (fns[i] && fns[i].apply) {
                fns[i].apply(this, args);
            }
        }
    };
}
export function px2rpx(val) {
    return val / screenRate;
}
export function stopPropagation(e) {
    if (!e) {
        return;
    }
    if (e.stopPropagation) {
        e.stopPropagation();
        return;
    }
    if (typeof e.originalEvent === 'object' && e.originalEvent.stopPropagation) {
        e.originalEvent.stopPropagation();
    }
}
export function getDataSourceFromChildren(children) {
    if (!children) {
        return [];
    }
    return Children.map(children, (child) => {
        const _a = child.props, { value, text, children: childText } = _a, rest = __rest(_a, ["value", "text", "children"]);
        return Object.assign({ value, label: childText || text }, rest);
    });
}
export function getDataSource(dataSource, children) {
    let ds = dataSource;
    if (!dataSource && Children.count(children) > 0) {
        ds = getDataSourceFromChildren(children);
    }
    return ds || [];
}
export function mergeDataSource(ds1, ds2) {
    const tmpArr = [];
    ds2.forEach((it) => {
        if ((it === null || it === void 0 ? void 0 : it.value) && !findInArray([...ds1, ...tmpArr], (_it) => _it.value === it.value)) {
            tmpArr.push(it);
        }
    });
    return [...tmpArr, ...ds1];
}
