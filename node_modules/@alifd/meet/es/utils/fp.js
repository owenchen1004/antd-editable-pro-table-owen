export function noop() { }
export function get(source, path, defaultValue) {
    const paths = path.replace(/\[(\d+)]/g, '.$1').split('.');
    let result = source;
    for (const p of paths) {
        result = Object(result)[p];
        if (result === undefined) {
            return defaultValue;
        }
    }
    return result;
}
export function isValidArray(obj) {
    return Array.isArray(obj) && obj.length > 0;
}
export function findInArray(arr = [], fn) {
    let ret = null;
    if (isValidArray(arr)) {
        arr.forEach((item, index) => {
            if (!ret && fn(item, index)) {
                ret = item;
            }
        });
    }
    return ret;
}
export function range(start, end, step) {
    const ret = [];
    if (!end && !step) {
        end = start;
        start = 0;
        step = 1;
    }
    else if (!end) {
        end = 0;
    }
    else if (!step) {
        step = 1;
    }
    if (end <= start || step < 1) {
        return ret;
    }
    for (let i = start; i < end; i = i + step) {
        ret.push(i);
    }
    return ret;
}
export function isString(str) {
    return typeof str === 'string';
}
export function isNumber(num) {
    if (num === '' || num === null) {
        return false;
    }
    return (typeof num === 'number' && !isNaN(num)) || !isNaN(Number(num));
}
export function isUndef(obj) {
    return typeof obj === 'undefined';
}
export function isFunction(fn) {
    return typeof fn === 'function';
}
export function isBoolean(val) {
    return typeof val === 'boolean';
}
export function isNil(val) {
    return typeof val === 'undefined' || val === null;
}
export function isInvalidValue(val) {
    return isNil(val) || val === '';
}
export const nextTick = (handler) => {
    if (typeof requestAnimationFrame !== 'undefined') {
        requestAnimationFrame(handler);
        return;
    }
    if (typeof setTimeout !== 'undefined') {
        setTimeout(handler, 0);
        return;
    }
    handler();
};
export function removeFromArray(arr = [], val = '') {
    return arr.filter((v) => v !== val);
}
export function replaceMessage(template, kv) {
    return template.replace(/\${\w+}/g, (str) => {
        const key = str.slice(2, -1);
        return kv[key];
    });
}
export function getValueFromEvents(e) {
    if (!isUndef(e.value)) {
        return e.value;
    }
    if (get(e, 'target.value')) {
        return e.target.value;
    }
    if (get(e, 'detail.value')) {
        return e.target.value;
    }
    if (get(e, 'originalEvent.detail.value')) {
        return e.originalEvent.detail.value;
    }
}
export function getNotUndef(...values) {
    for (const it of values) {
        if (!isUndef(it)) {
            return it;
        }
    }
}
