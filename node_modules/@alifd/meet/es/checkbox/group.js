import { __rest } from "tslib";
import { createElement, forwardRef, useCallback } from 'rax';
import classNames from 'classnames';
import Children from 'rax-children';
import Text from 'rax-text';
import View from '../view';
import Checkbox from './checkbox';
import { getDataSourceFromChildren, isFunction, isNumber, isString, isValidArray } from '../utils';
import { useValue } from '../utils/hooks';
import { getItemsFromDataSource } from '../utils/tree';
const CheckboxGroup = (props, ref) => {
    const { size = 'medium', prefix = 'mt-', direction = 'ver', defaultValue, dataSource, className, onChange, disabled, children, readOnly, value: valueProp, labelAlign, isPreview, renderPreview, previewClassName: previewClassNameProp, previewStyle } = props, others = __rest(props, ["size", "prefix", "direction", "defaultValue", "dataSource", "className", "onChange", "disabled", "children", "readOnly", "value", "labelAlign", "isPreview", "renderPreview", "previewClassName", "previewStyle"]);
    const previewClassName = classNames(previewClassNameProp, `${prefix}form-item-input--preview-${size}`);
    const [value, setValue, isControlled] = useValue(props, [], {
        fitValue: (v) => {
            if (v && !Array.isArray(v)) {
                return [v];
            }
            if (!isValidArray(v)) {
                return [];
            }
            return v;
        },
        compare: (a, b) => {
            return a.toString() === b.toString();
        },
    });
    const handleChange = useCallback((selected, checkBoxValue, e) => {
        if (!selected) {
            const index = value.indexOf(checkBoxValue);
            const newGroup = [...value];
            if (index >= 0) {
                newGroup.splice(index, 1);
                if (!isControlled) {
                    setValue(newGroup);
                }
            }
            if (!disabled && !readOnly && onChange) {
                onChange(newGroup, e);
            }
        }
        if (!disabled && !readOnly && selected) {
            const newGroup = [...value, checkBoxValue];
            if (!isControlled) {
                setValue(newGroup);
            }
            if (onChange) {
                onChange(newGroup, e);
            }
        }
    }, [value, setValue, isControlled, onChange]);
    let content;
    let ds = dataSource;
    if (!ds && Children.count(children) > 0) {
        ds = getDataSourceFromChildren(children);
    }
    if (isValidArray(ds)) {
        content = ds.map((item, index) => {
            let itemData = {
                style: {},
                value: null,
                checked: false,
                label: '',
                text: '',
                disabled: false,
                size,
            };
            const { onClick: itemOnClick, onChange: itemOnChange, className: itemClassName, label: itemLabel, text: itemText } = item, itemRest = __rest(item, ["onClick", "onChange", "className", "label", "text"]);
            if (isString(item) || isNumber(item)) {
                itemData.value = item;
            }
            else {
                itemData = Object.assign(Object.assign({}, itemData), itemRest);
            }
            const label = itemLabel || itemText || itemData.value;
            const isLast = index === ds.length - 1;
            return (createElement(Checkbox, Object.assign({}, itemData, { key: `meet_ck_${index}`, className: classNames(itemClassName, {
                    [`${prefix}checkbox-item--${direction}-${size}`]: !isLast,
                }), style: itemData.style, onChange: (selected, e) => handleChange(selected, itemData.value, e), checked: itemData.checked || value.includes(itemData.value), disabled: disabled || itemData.disabled, onClick: itemOnClick }), label));
        });
    }
    if (isPreview) {
        if (isFunction(renderPreview)) {
            return (createElement(View, { className: previewClassName, style: previewStyle }, renderPreview(getItemsFromDataSource(ds, value))));
        }
        return (createElement(Text, { className: previewClassName, style: previewStyle }, getItemsFromDataSource(ds, value)
            .map((v) => v.label || v.text)
            .join(',')));
    }
    return (createElement(View, Object.assign({ ref: ref, className: classNames(className, `${prefix}checkbox-group`, `${prefix}checkbox-group--${direction}`, `${prefix}checkbox-group--${labelAlign}-${size}`) }, others), content));
};
CheckboxGroup.displayName = 'Checkbox.Group';
export default forwardRef(CheckboxGroup);
