import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, useCallback } from 'rax';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import { isString, isUndef } from '../utils';
import { useValue } from '../utils/hooks';
const Checkbox = (props, ref) => {
    const { size = 'medium', prefix = 'mt-', children, checked: _checked, indeterminate: _indeterminate, disabled, className, defaultChecked: _defaultChecked, defaultIndeterminate: _defaultIndeterminate, checkIcon = 'select', indeterminateIcon = 'semi-select', readOnly, onChange, value, label, text } = props, others = __rest(props, ["size", "prefix", "children", "checked", "indeterminate", "disabled", "className", "defaultChecked", "defaultIndeterminate", "checkIcon", "indeterminateIcon", "readOnly", "onChange", "value", "label", "text"]);
    const [checked, setChecked, isCheckedControlled] = useValue(props, false, {
        valueName: 'checked',
    });
    const [indeterminate, setIndeterminate, isIndeterminateControlled] = useValue(props, false, {
        valueName: 'indeterminate',
    });
    const state = 'normal';
    const selectedPrefix = !indeterminate && checked ? '--selected' : '--unselected';
    const disabledPrefix = disabled ? '-disabled' : '';
    const indeterminatePrefix = indeterminate ? '-indeterminate' : '';
    const statePrefix = state !== 'normal' ? `-${state}` : '';
    const iconCls = classNames(`${prefix}checkbox-icon`, `${prefix}checkbox-icon--${size}`, `${prefix}checkbox-icon${selectedPrefix}${indeterminatePrefix}${disabledPrefix}`);
    const textCls = classNames(`${prefix}checkbox-text`, `${prefix}checkbox-text--${size}`, `${prefix}checkbox-text${selectedPrefix}${indeterminatePrefix}${disabledPrefix}`);
    const handleClick = useCallback((e) => {
        if (disabled || readOnly) {
            return;
        }
        let newChecked = null;
        if (indeterminate) {
            if (isIndeterminateControlled) {
                if (onChange) {
                    onChange(!checked, e);
                }
                return;
            }
            else {
                setIndeterminate(false);
                newChecked = true;
            }
        }
        if (newChecked === null) {
            newChecked = !checked;
        }
        if (!isCheckedControlled) {
            setChecked(newChecked);
        }
        if (onChange) {
            onChange(newChecked, e);
        }
    }, [
        onChange,
        disabled,
        readOnly,
        checked,
        setChecked,
        isCheckedControlled,
        indeterminate,
        setIndeterminate,
        isIndeterminateControlled,
    ]);
    const renderChildren = (c) => {
        if (isString(c)) {
            return createElement(Text, { className: textCls }, children);
        }
        else if (!isUndef(c)) {
            return createElement(View, { className: textCls }, children);
        }
        return null;
    };
    return (createElement(View, Object.assign({ ref: ref }, others, { className: classNames(`${prefix}checkbox-container`, `${prefix}checkbox-container--${size}`, className), onClick: handleClick }),
        createElement(View, { className: classNames(`${prefix}checkbox-circle`, `${prefix}checkbox-circle--${size}`, `${prefix}checkbox-circle${selectedPrefix}${indeterminatePrefix}${statePrefix}${disabledPrefix}`) },
            indeterminate && createElement(Icon, { name: indeterminateIcon, className: iconCls }),
            checked && !indeterminate && createElement(Icon, { name: checkIcon, className: iconCls })),
        renderChildren(children)));
};
Checkbox.displayName = 'Checkbox';
export default forwardRef(Checkbox);
