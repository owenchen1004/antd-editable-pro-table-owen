import { Component, createElement } from 'rax';
import Form, { Item, Context } from '../form';
export default class FieldElement extends Component {
    constructor(props) {
        super(props);
        this.field = undefined;
        this.renderPreview = this.renderPreview.bind(this);
    }
    getValueName() {
        return 'value';
    }
    getValue() {
        var _a;
        const name = this.getValueName();
        if (name in this.props) {
            return this.props[name];
        }
        return (_a = this.field) === null || _a === void 0 ? void 0 : _a.getValue(this.props.name);
    }
    setValue(value) {
        var _a;
        return (_a = this.field) === null || _a === void 0 ? void 0 : _a.setValue(this.props.name, value);
    }
    renderPreview(value) {
        return value;
    }
    renderControl() {
        return '请重载 renderControl';
    }
    getProps() {
        return this.props;
    }
    componentWillUnmount() {
        this.field = undefined;
    }
    render() {
        return (createElement(Context.Consumer, null, (ctx) => {
            if (ctx.field && this.field !== ctx.field) {
                this.field = ctx.field;
                this.forceUpdate();
            }
            const item = (createElement(Item, Object.assign({ valuePropName: this.getValueName(), renderPreview: this.renderPreview }, this.getProps()), this.renderControl()));
            if (ctx.form) {
                return item;
            }
            else {
                return (createElement(Form, { saveField: (field) => {
                        this.field = field;
                        this.forceUpdate();
                    } }, item));
            }
        }));
    }
}
FieldElement.displayName = 'Field';
