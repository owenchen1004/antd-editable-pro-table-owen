import { __rest } from "tslib";
import { createElement, forwardRef, Fragment, useContext } from 'rax';
import classNames from 'classnames';
import isValidElement from 'rax-is-valid-element';
import Text from 'rax-text';
import View from '../view';
import Icon from '../icon';
import { TabContext } from './tab';
import { useGuid } from '../utils/hooks';
import { isString } from '../utils';
const TabItem = (props, ref) => {
    const { prefix = 'mt-', className, size, itemKey, title = '', icon = '', children, onClick = () => { }, renderContent = null } = props, others = __rest(props, ["prefix", "className", "size", "itemKey", "title", "icon", "children", "onClick", "renderContent"]);
    const { activeKey, change, fullWidth, shape, activeLineType } = useContext(TabContext);
    const active = `${activeKey}` === `${itemKey}`;
    const clsPrefix = `${prefix}tab-item`;
    const curItemId = useGuid('tab-item-');
    const clses = {
        tab: classNames(clsPrefix, `${clsPrefix}--${size}`, `${clsPrefix}--${shape}`, {
            [`${clsPrefix}--active`]: active,
            [`${clsPrefix}--active-${shape}`]: active,
            [`${clsPrefix}--fullwidth`]: fullWidth,
        }, className),
        activeLine: classNames(`${clsPrefix}-active-line`, `${clsPrefix}-active-line--${activeLineType}`, `${clsPrefix}-active-line--${activeLineType}-${size}`),
        tabIcon: classNames(`${clsPrefix}-icon`, `${clsPrefix}-icon--${size}`, `${clsPrefix}-icon--${shape}`, {
            [`${clsPrefix}-icon--active`]: active,
            [`${clsPrefix}-icon--active-${shape}`]: active,
        }),
        tabText: classNames(`${clsPrefix}-text`, `${clsPrefix}-text--${size}`, `${clsPrefix}-text--${shape}`, {
            [`${clsPrefix}-text--active`]: active,
            [`${clsPrefix}-text--active-${size}`]: active && shape !== 'capsule',
            [`${clsPrefix}-text--active-${shape}`]: active,
        }),
    };
    const renderTitle = () => {
        if (isValidElement(title)) {
            return createElement(View, null, title);
        }
        else if (isString(title)) {
            return (createElement(Text, { numberOfLines: 1, className: clses.tabText }, title));
        }
        return null;
    };
    const handleClick = (e) => {
        if (onClick) {
            onClick(Object.assign(Object.assign({}, e), { itemKey }));
        }
        change(itemKey);
    };
    return (createElement(View, Object.assign({}, others, { id: curItemId, ref: ref, className: clses.tab, onClick: handleClick }),
        renderContent ? (renderContent({
            title,
            icon,
            active,
        })) : (createElement(Fragment, null,
            icon ? createElement(Icon, { className: clses.tabIcon, name: icon }) : null,
            renderTitle())),
        shape !== 'capsule' && (createElement(View, { className: classNames(clses.activeLine, {
                [`${clsPrefix}-active-line--enter`]: active,
                [`${clsPrefix}-active-line--exit`]: !active,
            }) }))));
};
TabItem.displayName = 'Tab.Item';
export default forwardRef(TabItem);
