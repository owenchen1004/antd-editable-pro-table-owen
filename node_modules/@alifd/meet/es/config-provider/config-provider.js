import { Component, createElement, Fragment } from 'rax';
import Portal from 'rax-portal';
import { Context as LocaleContext, LocaleProvider } from '../locale';
import { guid } from '../utils/hooks';
import { onProviderMount, onProviderUnMount } from '../utils/render';
class ConfigProvider extends Component {
    constructor(props) {
        super(props);
        this.state = {
            portals: [],
        };
    }
    componentDidMount() {
        if (!this.props.disablePortal) {
            onProviderMount(this);
        }
    }
    componentDidUpdate(prevProps) {
        if (this.props.disablePortal !== prevProps.disablePortal) {
            if (this.props.disablePortal) {
                onProviderUnMount();
            }
            else {
                onProviderMount(this);
            }
        }
    }
    componentWillUnmount() {
        onProviderUnMount();
    }
    addPortal(item) {
        const id = guid('portal-');
        const arr = [...this.state.portals];
        arr.push(Object.assign(Object.assign({}, item), { id }));
        this.setState({
            portals: arr,
        });
        return () => {
            const i = this.state.portals.find((it) => it.id === id);
            if (i) {
                const a = [...this.state.portals];
                a.splice(a.indexOf(i), 1);
                this.setState({
                    portals: a,
                });
                if (i.onHide) {
                    i.onHide();
                }
            }
        };
    }
    render() {
        const { portals } = this.state;
        const { locale, children } = this.props;
        return (createElement(LocaleProvider, { locale: locale },
            createElement(Fragment, null,
                portals.length > 0 && (createElement(Portal, null, portals.map((it) => (createElement(Fragment, { key: it.id }, it.element))))),
                children)));
    }
}
ConfigProvider.Consumer = ({ children }) => {
    return (createElement(LocaleContext.Consumer, null, ({ locale }) => {
        return children ? children({ locale }) : null;
    }));
};
export default ConfigProvider;
