import { __rest } from "tslib";
import { createElement, forwardRef } from 'rax';
import classNames from 'classnames';
import View from '../../view';
import Icon from '../../icon';
import ListItemCaption from './caption';
import ItemContent from './content';
import { ListItemAction, ListItemMedia } from './media';
import ItemTitle from './title';
import { isFunction, isString } from '../../utils';
const arrowIconMap = {
    right: 'arrow-right',
    up: 'arrow-up',
    down: 'arrow-down',
    loading: 'loading',
};
const renderExtra = (ext) => {
    if (isString(ext)) {
        return createElement(ListItemCaption, null, ext);
    }
    else if (ext) {
        return ext;
    }
    return null;
};
const ListItem = (props, ref) => {
    const { children, prefix = 'mt-', arrow, media, title, subTitle, description, extra, className, onClick, disabled = false } = props, others = __rest(props, ["children", "prefix", "arrow", "media", "title", "subTitle", "description", "extra", "className", "onClick", "disabled"]);
    return (createElement(View, Object.assign({}, others, { className: classNames(`${prefix}list-item`, {
            [`${prefix}list-item--clickable`]: isFunction(onClick),
            [`${prefix}list-item--disabled`]: disabled,
        }, className), ref: ref, onClick: (...args) => {
            if (!disabled && onClick) {
                onClick(...args);
            }
        } }),
        media ? createElement(ListItemMedia, null, media) : null,
        createElement(View, { className: `${prefix}list-item-container` },
            title || description ? (createElement(ItemContent, null,
                title ? createElement(ItemTitle, null, title) : null,
                subTitle ? createElement(ListItemCaption, null, subTitle) : null,
                description ? createElement(ListItemCaption, null, description) : null)) : null,
            extra || isString(arrow) ? (createElement(ListItemAction, null,
                renderExtra(extra),
                isString(arrow) ? (createElement(Icon, { size: "xs", className: `${prefix}list-item-icon`, name: arrowIconMap[arrow] })) : null)) : null,
            children)));
};
ListItem.displayName = 'ListItem';
export default forwardRef(ListItem);
