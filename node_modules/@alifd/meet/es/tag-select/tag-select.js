import { createElement, forwardRef, useContext } from 'rax';
import classNames from 'classnames';
import View from '../view';
import { ItemContext } from '../form';
import Tag from '../tag';
import { useValue } from '../utils/hooks';
const { Selectable } = Tag;
const TagSelect = (props, ref) => {
    const { prefix = 'mt-', isPreview, className, dataSource = [], mode = 'single', onChange, size: sizeProp, disabled, inlineMode = false, } = props;
    const { isInsideForm, size: contextSize } = useContext(ItemContext);
    const size = sizeProp || (isInsideForm ? contextSize : 'medium');
    const [value, setValue, isControlled] = useValue(props, [], {
        fitValue: (v) => {
            return Array.isArray(v) ? v : [v];
        },
        compare: (a, b) => {
            return a.join(',') === b.join(',');
        },
    });
    const handleClick = (v) => {
        if (isPreview) {
            return;
        }
        if (mode === 'single') {
            const hasChecked = value.includes(v);
            if (isControlled) {
                if (onChange) {
                    onChange(hasChecked ? undefined : v);
                }
            }
            else {
                setValue(hasChecked ? [] : [v]);
            }
        }
        else {
            const newValue = [...value];
            if (newValue.includes(v)) {
                newValue.splice(newValue.indexOf(v), 1);
            }
            else {
                newValue.push(v);
            }
            if (isControlled) {
                if (onChange) {
                    onChange(newValue);
                }
            }
            else {
                setValue(newValue);
            }
        }
    };
    let tagType;
    if (isPreview) {
        tagType = 'primary';
    }
    else {
        tagType = mode === 'single' ? 'primary' : 'normal';
    }
    const clsPrefix = `${prefix}tag-select`;
    return (createElement(View, { className: classNames(clsPrefix, `${clsPrefix}--${size}`, className, {
            [`${clsPrefix}--inline`]: inlineMode,
        }), ref: ref }, dataSource.map((it) => {
        const v = typeof it === 'object' ? it.value : it;
        const label = typeof it === 'object' ? it.label : it;
        const itemDisabled = disabled || (typeof it === 'object' ? it.disabled : false);
        return (createElement(Selectable, { key: v, size: size, type: tagType, disabled: itemDisabled, onChange: handleClick.bind(null, v), checked: isPreview ? false : value.includes(v) }, label));
    })));
};
export default forwardRef(TagSelect);
