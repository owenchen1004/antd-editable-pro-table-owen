import { __rest } from "tslib";
import { createElement, forwardRef, useEffect, useState, } from 'rax';
import classNames from 'classnames';
import { vibrateShort } from '@uni/vibrate';
import View from '../view';
import Icon from '../icon';
import { isUndef } from '../utils';
const getCheckedState = (props) => {
    return isUndef(props.checked) ? !!props.defaultChecked : !!props.checked;
};
const Switch = (props, ref) => {
    const { prefix = 'mt-', className, style, size = 'medium', defaultChecked = false, checked, disabled = false, readOnly = false, loading = false, vibrative = true, onChange } = props, others = __rest(props, ["prefix", "className", "style", "size", "defaultChecked", "checked", "disabled", "readOnly", "loading", "vibrative", "onChange"]);
    const initChecked = getCheckedState(props);
    const [hasChecked, setChecked] = useState(initChecked);
    const checkedPrefix = hasChecked ? '-checked' : '';
    const disabledPrefix = disabled ? '-disabled' : '';
    const switchClassNames = classNames(`${prefix}switch`, `${prefix}switch--${size}`, {
        [`${prefix}switch-${disabledPrefix}${checkedPrefix}`]: hasChecked || disabled,
    }, className);
    const switchKnobClassNames = classNames(`${prefix}switch-knob`, `${prefix}switch-knob--${size}${checkedPrefix}`);
    const switchLoadingClassNames = classNames(`${prefix}switch-knob-loading`, `${prefix}switch-knob-loading--${size}`);
    const onSwitchTap = (e) => {
        if (disabled || readOnly) {
            return;
        }
        const checkedValue = !hasChecked;
        if (vibrative) {
            vibrateShort({}).then(() => { });
        }
        if (!('checked' in props)) {
            setChecked(checkedValue);
        }
        if (onChange) {
            onChange(checkedValue, e);
        }
    };
    useEffect(() => {
        if (initChecked !== hasChecked) {
            setChecked(initChecked);
        }
    }, [checked]);
    return (createElement(View, Object.assign({ className: switchClassNames, style: style, onClick: onSwitchTap }, others),
        createElement(View, { className: switchKnobClassNames }, loading ? createElement(Icon, { className: switchLoadingClassNames, name: "loading" }) : null)));
};
Switch.displayName = 'Switch';
export default forwardRef(Switch);
