import { __rest } from "tslib";
import { createElement, forwardRef } from 'rax';
import classNames from 'classnames';
import Children from 'rax-children';
import Text from 'rax-text';
import View from '../view';
const Badge = (props, ref) => {
    const { overflowCount = 99, className, count = 0, dot = false, children, content = '', prefix = 'mt-' } = props, others = __rest(props, ["overflowCount", "className", "count", "dot", "children", "content", "prefix"]);
    const type = dot ? 'dot' : 'normal';
    const auto = Children.count(children) > 0;
    let sup = count;
    sup = Number(count);
    if (!isNaN(sup) && sup !== 0) {
        sup = sup > overflowCount ? `${overflowCount}+` : sup;
    }
    else {
        sup = count;
    }
    const BadgeComponent = sup === 0 && type === 'normal' && !content ? null : (createElement(View, { className: classNames({
            [`${prefix}badge--custom`]: content,
            [`${prefix}badge-content`]: !content,
            [`${prefix}badge-content--${type}`]: !content,
            [`${prefix}badge-content--auto`]: auto,
        }) }, content ? content : dot ? null : createElement(Text, { className: `${prefix}badge-text` }, sup)));
    return (createElement(View, Object.assign({}, others, { ref: ref, className: classNames(className, `${prefix}badge`, `${prefix}badge--${type}`, {
            [`${prefix}badge--auto`]: auto,
        }) }),
        children,
        BadgeComponent));
};
Badge.displayName = 'Badge';
export default forwardRef(Badge);
