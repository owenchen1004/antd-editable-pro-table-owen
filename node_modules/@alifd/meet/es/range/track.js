import classNames from 'classnames';
import { createElement, forwardRef, useMemo } from 'rax';
import View from '../view';
import { handleMarks, isInRange, unit } from './utils';
const Track = (props, ref) => {
    const { size, prefix, min, max, ratio, disabled, marks, rangeWidth, marksPosition } = props;
    const statePrefix = disabled ? '--disabled' : '';
    const [markItems, labelItems] = useMemo(() => {
        const markEl = [];
        const labelEl = [];
        const getKey = (key) => {
            if (marks instanceof Object && !Array.isArray(marks)) {
                return marks[key];
            }
            return key;
        };
        handleMarks(marks, min, max).forEach((key) => {
            const left = ((key - min) / (max - min)) * rangeWidth;
            const isActive = isInRange((key - min) / (max - min), ratio);
            markEl.push(createElement(View, { key: `mark-${key}`, className: classNames(`${prefix}range--mark`, isActive ? `${prefix}range--mark--active` : '', isActive ? `${prefix}range--mark${statePrefix}` : ''), style: {
                    left: left + unit,
                } }));
            labelEl.push(createElement(View, { key: `label-${key}`, className: classNames([
                    `${prefix}range--label`,
                    `${prefix}range--label--${marksPosition}`,
                    {
                        [`${prefix}range--label--active`]: isActive,
                    },
                ]), style: {
                    left: left + unit,
                } }, getKey(key)));
        });
        return [markEl, labelEl];
    }, [marks, min, max, ratio, rangeWidth, prefix, statePrefix]);
    const selectedLeft = ratio.length === 2 ? ratio[0] * rangeWidth : 0;
    const width = ratio.length === 2 ? Math.abs(ratio[1] - ratio[0]) * rangeWidth : ratio[0] * rangeWidth;
    return (createElement(View, { ref: ref, className: classNames(`${prefix}range--track`, `${prefix}range--track--${size}`, `${prefix}range--track${statePrefix}`) },
        createElement(View, { ref: ref, className: classNames(`${prefix}range--track--selected`, `${prefix}range--track--${size}`, `${prefix}range--track--selected${statePrefix}`), style: {
                left: selectedLeft + unit,
                width: width + unit,
            } }),
        createElement(View, { style: { position: 'static' } }, markItems),
        createElement(View, { style: { position: 'static' } }, labelItems)));
};
export default forwardRef(Track);
