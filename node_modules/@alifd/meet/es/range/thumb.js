import classNames from 'classnames';
import { createElement, forwardRef, Fragment } from 'rax';
import Text from 'rax-text';
import View from '../view';
import { unit } from './utils';
import { isNil } from '../utils';
const Thumb = (props, ref) => {
    const { prefix, size = 'medium', offset = 0, isActive, tooltipVisible, disabled = false, value, id } = props;
    let display;
    if (!isNil(tooltipVisible)) {
        display = tooltipVisible ? 'flex' : 'none';
    }
    else {
        display = isActive ? 'flex' : 'none';
    }
    const statePrefix = disabled ? '--disabled' : '';
    const thumbCls = classNames(`${prefix}range--thumb`, `${prefix}range--thumb--${size}`, {
        [`${prefix}range--thumb--active`]: isActive,
        [`${prefix}range${statePrefix}--thumb`]: isActive,
        [`${prefix}range${statePrefix}--thumb`]: !isActive,
    });
    return (createElement(View, { className: thumbCls, style: {
            left: offset + unit,
        }, id: id, ref: ref }, display === 'flex' && (createElement(Fragment, null,
        createElement(View, { className: classNames([`${prefix}range--tooltip`, `${prefix}range--tooltip-${size}-left`]) },
            createElement(Text, null, `${value}`),
            createElement(View, { className: `${prefix}range--tooltip--arrow` }))))));
};
export default forwardRef(Thumb);
