import { getComponentRect, px2rem } from './dom';
import { isNumber } from '../utils';
export const unit = 'rpx';
export function pauseEvent(e) {
    e.stopPropagation();
}
function isMouseEvent(e) {
    return e.pageX;
}
function isTouchEvent(e) {
    return typeof e.changedTouches !== 'undefined';
}
export function getTouchPosition(e) {
    let x = 0;
    if (isMouseEvent(e)) {
        x = e.pageX;
    }
    if (isTouchEvent(e)) {
        x = e.changedTouches[0].pageX;
    }
    return px2rem(x);
}
export function getNodeRect(id) {
    return new Promise((resolve) => {
        getComponentRect(id, (e) => {
            resolve(e.size);
        }, true);
    });
}
export function getPrecision(step) {
    const stepString = step.toString();
    let precision = 0;
    if (stepString.indexOf('.') >= 0) {
        precision = stepString.length - stepString.indexOf('.') - 1;
    }
    return precision;
}
export function getClosestThumbIndex(position, thumbs) {
    const keys = Object.keys(thumbs);
    if (keys.length === 1) {
        return Promise.resolve(0);
    }
    let index = 0;
    return Promise.all(keys.map((key) => getNodeRect(thumbs[key]))).then((rects) => {
        if (Math.abs(rects[0].left - position) > Math.abs(rects[1].left - position)) {
            index = 1;
        }
        return +keys[index];
    });
}
export function handleMarks(marks, min, max) {
    if (marks instanceof Array) {
        return [...marks];
    }
    else if (marks instanceof Object) {
        return Object.keys(marks)
            .map(parseFloat)
            .sort((a, b) => a - b);
    }
    else if (isNumber(marks)) {
        const range = max - min;
        const num = range / marks;
        let current = min;
        const arr = [];
        while (current <= max) {
            arr.push(Number(current.toFixed(2)));
            current += num;
        }
        return arr;
    }
    else {
        return [];
    }
}
export function isInRange(value, range) {
    if (range.length === 1) {
        range.unshift(0);
    }
    return value >= range[0] && value <= range[1];
}
export function noop() { }
