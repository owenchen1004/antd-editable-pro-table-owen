import { __rest } from "tslib";
import { createElement, forwardRef } from 'rax';
import classNames from 'classnames';
import View from '../view';
import CreateChildren from './create-children';
import { isString } from '../utils';
const Tag = (props, ref) => {
    const { prefix = 'mt-', size = 'medium', type = 'normal', disabled = false, onClick = () => { }, style = {}, children, color, textColor: textColorProp, className } = props, others = __rest(props, ["prefix", "size", "type", "disabled", "onClick", "style", "children", "color", "textColor", "className"]);
    const textCls = `${prefix}tag-font--${size}`;
    const iconCls = `${prefix}tag-font--${size}`;
    const classes = {
        textCls,
        iconCls,
    };
    const cssType = type === 'normal' ? 'outline' : 'solid';
    const tagCls = classNames(className, `${prefix}tag`, `${prefix}tag--${size}`, `${prefix}tag--readonly-${size}`, `${prefix}tag--normal-${cssType}`, {
        [`${prefix}tag--normal-${cssType}-disabled`]: disabled,
    });
    const handleClick = (e) => {
        if (disabled) {
            return;
        }
        if (onClick) {
            onClick(e);
        }
    };
    let textColor = textColorProp;
    if (isString(color) && !textColor) {
        if (type === 'primary') {
            textColor = '#fff';
        }
        else {
            textColor = color;
        }
    }
    const newStyle = Object.assign(Object.assign(Object.assign({}, (isString(color) && type === 'primary' ? { backgroundColor: color } : { borderColor: color })), (isString(textColor) ? { color: textColor } : null)), style);
    return (createElement(View, Object.assign({}, others, { ref: ref, className: tagCls, onClick: handleClick, style: newStyle }), CreateChildren(children, classes, prefix, size)));
};
Tag.displayName = 'Tag';
export default forwardRef(Tag);
