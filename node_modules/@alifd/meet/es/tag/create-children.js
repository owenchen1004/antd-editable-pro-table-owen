import { createElement } from 'rax';
import classNames from 'classnames';
import Children from 'rax-children';
import isValidElement from 'rax-is-valid-element';
import cloneElement from 'rax-clone-element';
import Text from 'rax-text';
import Icon from '../icon';
import { isBoolean, isNil, isNumber, isString } from '../utils';
const CreateChildren = (children, classes, prefix, size) => {
    const count = Children.count(children);
    return Children.map(children, (child, index) => {
        if (isNil(child) || isBoolean(child)) {
            return null;
        }
        const key = child.key || `mt-tag-${index}`;
        if (isNumber(child) || isString(child)) {
            return (createElement(Text, { key: key, className: classes.textCls }, child));
        }
        if (!isValidElement(child)) {
            return child;
        }
        switch (true) {
            case child.type === Text:
                return cloneElement(child, {
                    key,
                    className: classes.textCls,
                    style: child.props.style || {},
                });
            case child.type === Icon:
                return cloneElement(child, {
                    key,
                    className: classNames(classes.iconCls, {
                        [`${prefix}tag-icon--${size}-first`]: index === 0,
                        [`${prefix}tag-icon--${size}-last`]: index === count - 1,
                    }),
                    style: child.props.style || {},
                });
            default:
                return cloneElement(child, {
                    key,
                });
        }
    });
};
export default CreateChildren;
