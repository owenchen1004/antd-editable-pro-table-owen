import { __rest } from "tslib";
import { createElement, forwardRef, useState } from 'rax';
import classNames from 'classnames';
import View from '../view';
import Icon from '../icon';
import CreateChildren from './create-children';
import { stopPropagation } from '../utils';
const ClosableTag = (props, ref) => {
    const { prefix = 'mt-', size = 'medium', type = 'normal', closeArea = 'tail', disabled = false, onClose = () => { }, onClick = () => { }, afterClose = () => { }, style = {}, children, className } = props, others = __rest(props, ["prefix", "size", "type", "closeArea", "disabled", "onClose", "onClick", "afterClose", "style", "children", "className"]);
    const shape = 'closable';
    const [closed, setClosed] = useState(false);
    const textCls = `${prefix}tag-font--${size}`;
    const iconCls = `${prefix}tag-font--${size}`;
    const classes = {
        textCls,
        iconCls,
    };
    const cssType = type === 'normal' ? 'outline' : 'solid';
    const tagCls = classNames(className, `${prefix}tag`, `${prefix}tag--${size}`, `${prefix}tag--${shape}-${cssType}`, {
        [`${prefix}tag--${shape}-${cssType}-disabled`]: disabled,
    });
    const closeCls = classNames(`${prefix}tag--closable-close`);
    const closeIconCls = classNames(`${prefix}tag-icon--${size}-close`);
    const handleClose = (e) => {
        stopPropagation(e);
        if (disabled) {
            return;
        }
        const isClosed = !(onClose && onClose() === false);
        setClosed(isClosed);
        afterClose(e);
    };
    const handleClick = (e) => {
        if (disabled) {
            return;
        }
        if (closeArea === 'tag') {
            handleClose(e);
        }
        onClick(e);
    };
    if (closed) {
        return null;
    }
    return (createElement(View, Object.assign({}, others, { ref: ref, className: tagCls, onClick: handleClick, style: props.style }),
        CreateChildren(children, classes, prefix, size),
        shape === 'closable' ? (createElement(View, { className: closeCls, onClick: handleClose },
            createElement(Icon, { name: "close", className: closeIconCls }))) : null));
};
ClosableTag.displayName = 'ClosableTag';
export default forwardRef(ClosableTag);
