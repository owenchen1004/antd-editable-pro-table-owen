import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, useEffect, useState } from 'rax';
import View from '../view';
import Icon from '../icon';
import CreateChildren from './create-children';
const getInitCheckedValue = (props) => {
    if ('checked' in props) {
        return props.checked;
    }
    else if (props.defaultChecked) {
        return props.defaultChecked;
    }
    else {
        return false;
    }
};
const SelectableTag = (props, ref) => {
    const { prefix = 'mt-', size = 'medium', type = 'normal', disabled = false, checked = false, defaultChecked = false, onChange = () => { }, style = {}, children, className } = props, others = __rest(props, ["prefix", "size", "type", "disabled", "checked", "defaultChecked", "onChange", "style", "children", "className"]);
    const shape = 'selectable';
    const initCheckedValue = getInitCheckedValue(props);
    const [hasChecked, setChecked] = useState(initCheckedValue);
    const textCls = `${prefix}tag-font--${size}`;
    const iconCls = `${prefix}tag-font--${size}`;
    const classes = {
        textCls,
        iconCls,
    };
    const cssType = type === 'normal' ? 'outline' : 'solid';
    const tagCls = classNames(className, `${prefix}tag`, `${prefix}tag--${size}`, `${prefix}tag--${shape}-${cssType}`, {
        [`${prefix}tag--${shape}-${cssType}-selected-disabled`]: disabled && hasChecked,
        [`${prefix}tag--${shape}-${cssType}-disabled`]: disabled,
        [`${prefix}tag--${shape}-${cssType}-selected`]: hasChecked,
    });
    const selectCls = classNames(`${prefix}tag--selectable-select`);
    const selectIconCls = classNames(`${prefix}tag-icon--${size}-select`, {
        [`${prefix}tag--${shape}-${cssType}-icon-selected-disabled`]: disabled && hasChecked,
    });
    const handleClick = (e) => {
        if (disabled) {
            return;
        }
        if (onChange) {
            onChange(!hasChecked, e);
        }
        if (!('checked' in props)) {
            setChecked(!hasChecked);
        }
    };
    useEffect(() => {
        if ('checked' in props) {
            setChecked(checked);
        }
    }, [checked]);
    return (createElement(View, Object.assign({}, others, { ref: ref, className: tagCls, onClick: handleClick, style: props.style }),
        CreateChildren(children, classes, prefix, size),
        type === 'normal' && hasChecked ? (createElement(View, { className: selectCls, onChange: handleClick },
            createElement(Icon, { name: "select", className: selectIconCls }))) : null));
};
SelectableTag.displayName = 'SelectableTag';
export default forwardRef(SelectableTag);
