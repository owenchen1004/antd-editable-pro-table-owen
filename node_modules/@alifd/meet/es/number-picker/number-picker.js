import { __awaiter, __rest } from "tslib";
import { createElement, forwardRef, useEffect, useRef, useState } from 'rax';
import classNames from 'classnames';
import TextInput from 'rax-textinput';
import { isWeb } from '@uni/env';
import View from '../view';
import Icon from '../icon';
import Button from '../button';
import { getValueFromEvents, isFunction, isInvalidValue, isMiniappPlatform, isStrictMiniApp, isStrictWechatMiniProgram, isUndef, isNumber, } from '../utils';
import { useDeprecated, useGuid } from '../utils/hooks';
import { clamp, getDefaultValue, toNumber } from './utils';
const MAX_NUMBER_PICKER_THRESHOLD = 9999999;
const isIOSH5 = isWeb && window.navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);
function getInitInputValue(props) {
    let initialValue;
    if ('value' in props) {
        initialValue = props.value;
    }
    else if (!isUndef(props.defaultValue)) {
        initialValue = props.defaultValue;
    }
    return !isInvalidValue(initialValue) ? toNumber(initialValue) : '';
}
function isDecreaseDisabled(value, min) {
    if (!isNumber(value)) {
        return false;
    }
    return min !== -Infinity && value <= min;
}
function isIncreaseDisabled(value, max) {
    if (!isNumber(value)) {
        return false;
    }
    return max !== Infinity && value >= max;
}
function getPrecision(precision, step) {
    if (typeof precision !== 'number' || precision < 0) {
        precision = 0;
    }
    const stepString = step.toString();
    let pcs = 0;
    if (stepString.indexOf('.') >= 0) {
        pcs = stepString.length - stepString.indexOf('.') - 1;
    }
    return Math.max(pcs, precision);
}
function getPrecisionFactor(precision) {
    return Math.pow(10, precision);
}
function hackChrome(value, precision) {
    if (precision > 0) {
        return Number(Number(value).toFixed(precision));
    }
    return value;
}
const NumberPicker = (props, ref) => {
    const { className, prefix = 'mt-', size = 'medium', value, defaultValue, max = MAX_NUMBER_PICKER_THRESHOLD, min = -MAX_NUMBER_PICKER_THRESHOLD, step = 1, keybordType: _k1, keyboardType: _k2, readOnly = false, disabled = false, hideButton = false, enableNative, precision: precisionProp = 0, focused: focusedProp = false, controlled = false, inputStyle = {}, onBeforeChange = () => Promise.resolve(), onDisableClick: onDisableClickProp, onDisabledClick: onDisabledClickProp, onChange = () => { }, style = {}, onInput = () => { }, onFocus = () => { }, onBlur = () => { }, onCorrect = () => { } } = props, others = __rest(props, ["className", "prefix", "size", "value", "defaultValue", "max", "min", "step", "keybordType", "keyboardType", "readOnly", "disabled", "hideButton", "enableNative", "precision", "focused", "controlled", "inputStyle", "onBeforeChange", "onDisableClick", "onDisabledClick", "onChange", "style", "onInput", "onFocus", "onBlur", "onCorrect"]);
    const clsPrefix = `${prefix}numberpicker`;
    const isControlled = 'value' in props;
    const onDisabledClick = onDisabledClickProp || onDisableClickProp;
    const precision = getPrecision(precisionProp, step);
    const factor = getPrecisionFactor(precision);
    const inputRef = useRef(null);
    const defaultValAtEmpty = getDefaultValue(min, max, MAX_NUMBER_PICKER_THRESHOLD);
    const [focused, setFocused] = useState(!!props.focused);
    const [inputValue, setInputValue] = useState(getInitInputValue(props));
    const inputId = useGuid('mt-np-input-');
    const [decreaseDisabled, setDecreaseDisabled] = useState(isDecreaseDisabled(inputValue, min));
    const [increaseDisabled, setIncreaseDisabled] = useState(isIncreaseDisabled(inputValue, max));
    const keyboardType = useDeprecated('NumberPicker', props, 'keybordType', 'keyboardType', 'number-pad');
    useEffect(() => {
        const fn = () => {
            if (isControlled) {
                if (isInvalidValue(value)) {
                    setInputValue('');
                    updateInputVal('');
                }
                else {
                    setInputValue(toNumber(props.value));
                    updateInputVal(props.value);
                }
            }
        };
        if (isMiniappPlatform) {
            setTimeout(fn, 100);
        }
        else {
            fn();
        }
    });
    useEffect(() => {
        setDecreaseDisabled(isDecreaseDisabled(inputValue, min));
        setIncreaseDisabled(isIncreaseDisabled(inputValue, max));
    }, [inputValue, max, min]);
    function handleChange(numValue, e) {
        return __awaiter(this, void 0, void 0, function* () {
            if (readOnly) {
                return;
            }
            try {
                yield onBeforeChange(numValue);
            }
            catch (error) {
                throw error;
            }
            doChange(numValue, e);
        });
    }
    function doChange(val, e) {
        if (!isControlled) {
            setInputValue(val);
        }
        onChange(val, e);
    }
    function handleFocus(e) {
        setFocused(true);
        if (isFunction(onFocus)) {
            onFocus(e);
        }
    }
    function updateInputVal(newVal) {
        const cur = inputRef.current;
        if (isWeb && cur && cur._nativeNode) {
            cur._nativeNode.value = '';
            cur._nativeNode.value = newVal;
        }
        else if (isStrictWechatMiniProgram || isStrictMiniApp) {
            const input = document.querySelector(`#${inputId}`);
            input.value = '';
            input.value = toNumber(newVal);
        }
    }
    function handleBlur(e) {
        const val = toNumber(getValueFromEvents(e));
        if (isFunction(onBlur)) {
            onBlur(e);
        }
        if (isInvalidValue(val)) {
            setFocused(false);
            handleChange('', Object.assign(Object.assign({}, e), { originalValue: getValueFromEvents(e) }));
            return;
        }
        const limitedValue = clamp(val, min, max);
        if (!isControlled) {
            updateInputVal(limitedValue);
        }
        let result = (factor * limitedValue) / factor;
        result = hackChrome(result, precision);
        if (val !== result) {
            if (!isControlled) {
                updateInputVal(result);
            }
            onCorrect(result, val);
        }
        setFocused(false);
        handleChange(result, Object.assign(Object.assign({}, e), { originalValue: getValueFromEvents(e) }));
    }
    function handleInput(e) {
        if (isFunction(onInput)) {
            const val = toNumber(getValueFromEvents(e));
            onInput(val, e);
        }
    }
    function handleDecrease(e) {
        if (isInvalidValue(inputValue)) {
            handleChange(defaultValAtEmpty, e);
            return;
        }
        const newValue = clamp(inputValue - step, min, max);
        let result = (factor * newValue) / factor;
        result = hackChrome(result, precision);
        if (newValue !== result && isFunction(onCorrect)) {
            onCorrect(result, newValue);
        }
        handleChange(result, e);
    }
    function handleIncrease(e) {
        if (isInvalidValue(inputValue)) {
            handleChange(defaultValAtEmpty, e);
            return;
        }
        const newValue = clamp(inputValue + step, min, max);
        let result = (factor * newValue) / factor;
        result = hackChrome(result, precision);
        if (newValue !== result && isFunction(onCorrect)) {
            onCorrect(result, newValue);
        }
        handleChange(result, e);
    }
    const handleDisableClick = (actionType, e) => {
        if (isFunction(onDisabledClick)) {
            onDisabledClick(actionType, e);
        }
    };
    const classNameObj = {
        numberPicker: classNames(`${clsPrefix}`, `${clsPrefix}--${size}`),
        textInput: classNames(`${clsPrefix}-input`, `${clsPrefix}-input--${size}`, {
            [`${clsPrefix}-input--focused`]: focused,
            [`${clsPrefix}-input--disabled`]: !isIOSH5 && disabled,
            [`${clsPrefix}-input--readonly`]: readOnly,
            [`${clsPrefix}-input--no-button`]: hideButton,
        }),
        decrease: classNames(`${clsPrefix}-button`, `${clsPrefix}-button-decrease`, `${clsPrefix}-button--${size}`, {
            [`${clsPrefix}-button--disabled`]: disabled || decreaseDisabled,
        }),
        decreaseIcon: classNames(`${clsPrefix}-button-icon`, `${clsPrefix}-button-icon--${size}`, {
            [`${clsPrefix}-button-icon--disabled`]: disabled || decreaseDisabled,
        }),
        increase: classNames(`${clsPrefix}-button`, `${clsPrefix}-button-increase`, `${clsPrefix}-button--${size}`, {
            [`${clsPrefix}-button--disabled`]: disabled || increaseDisabled,
        }),
        increaseIcon: classNames(`${clsPrefix}-button-icon`, `${clsPrefix}-button-icon--${size}`, {
            [`${clsPrefix}-button-icon--disabled`]: disabled || increaseDisabled,
        }),
    };
    return (createElement(View, Object.assign({ style: style, className: classNames(classNameObj.numberPicker, className), ref: ref }, others),
        !hideButton ? (createElement(Button, { disabled: disabled || decreaseDisabled, type: "normal", model: "outline", size: size, className: classNameObj.decrease, onClick: handleDecrease, onDisabledClick: (e) => {
                handleDisableClick('decrease', e);
            } },
            createElement(Icon, { name: "minus", className: classNameObj.decreaseIcon }))) : null,
        createElement(TextInput, { id: inputId, className: classNameObj.textInput, ref: inputRef, value: `${inputValue}`, editable: !disabled && !readOnly, keyboardType: keyboardType, enableNative: enableNative === true, onFocus: handleFocus, onBlur: handleBlur, onInput: handleInput, style: inputStyle, controlled: controlled }),
        !hideButton ? (createElement(Button, { disabled: disabled || increaseDisabled, type: "normal", model: "outline", size: size, className: classNameObj.increase, onClick: handleIncrease, onDisabledClick: (e) => {
                handleDisableClick('increase', e);
            } },
            createElement(Icon, { name: "add", className: classNameObj.increaseIcon }))) : null));
};
NumberPicker.displayName = 'NumberPicker';
export default forwardRef(NumberPicker);
