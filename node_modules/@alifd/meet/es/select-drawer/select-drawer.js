import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, forwardRef, Fragment, useCallback, useContext, useImperativeHandle, useState, } from 'rax';
import Text from 'rax-text';
import View from '../view';
import SafeArea from '../safe-area';
import Icon from '../icon';
import Drawer from '../drawer';
import Button from '../button';
import BottomButton from '../bottom-button';
import { ItemContext } from '../form';
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
import { isString, stopPropagation } from '../utils';
import { getValidChildren } from '../utils/children';
const SelectDrawer = (props, ref) => {
    const { prefix = 'mt-', align: alignProp, children, drawerTitle = '', iconType = 'arrow-right', content = '', placeholder, type = 'normal', buttonPosition = 'top', className, drawerClassName, disabled = false, readOnly = false, showIcon = true, hasClear = false, hideButton, showToolbar: showToolbarProp = true, notFoundContent, onOk, onCancel, onClear, onVisibleChange, okText, cancelText, zIndex, size: sizeProp, disableScroll } = props, others = __rest(props, ["prefix", "align", "children", "drawerTitle", "iconType", "content", "placeholder", "type", "buttonPosition", "className", "drawerClassName", "disabled", "readOnly", "showIcon", "hasClear", "hideButton", "showToolbar", "notFoundContent", "onOk", "onCancel", "onClear", "onVisibleChange", "okText", "cancelText", "zIndex", "size", "disableScroll"]);
    const [visible, setVisible] = useState(false);
    const { contentAlign: contextAlign, size: contextSize, isInsideForm } = useContext(ItemContext);
    const _children = getValidChildren(children);
    const align = alignProp || (isInsideForm ? contextAlign : null) || 'left';
    const size = sizeProp || (isInsideForm ? contextSize : null) || 'medium';
    const shouldShowClear = !disabled && hasClear && content;
    const shouldShowIcon = showIcon && !shouldShowClear;
    const isInverse = type === 'inverse';
    const locale = useLocale('SelectDrawer', others, defaultLang.SelectDrawer);
    const showToolbar = showToolbarProp && (drawerTitle || (buttonPosition === 'top' && !hideButton));
    const showBottomBtn = showToolbarProp && buttonPosition === 'bottom' && !hideButton;
    const clsPrefix = `${prefix}selectdrawer`;
    const doHide = useCallback(() => {
        if (visible) {
            setVisible(false);
        }
        if (onVisibleChange) {
            onVisibleChange(false);
        }
    }, [visible, setVisible, onVisibleChange]);
    const handleOk = useCallback(() => {
        let shouldHide = true;
        if (onOk) {
            shouldHide = onOk();
        }
        if (shouldHide !== false) {
            doHide();
        }
    }, [onOk, doHide]);
    const handleCancel = useCallback((reason) => {
        let shouldHide = true;
        if (onCancel) {
            shouldHide = onCancel(reason);
        }
        if (shouldHide !== false) {
            doHide();
        }
    }, [onCancel, doHide]);
    const handleClear = useCallback((e) => {
        e.preventDefault();
        stopPropagation(e);
        if (onClear) {
            onClear();
        }
    }, [onClear]);
    const handleOpen = () => {
        if (disabled || readOnly || visible) {
            return;
        }
        if (_children || notFoundContent) {
            setVisible(true);
            if (onVisibleChange) {
                onVisibleChange(true);
            }
        }
    };
    useImperativeHandle(ref, () => {
        return Object.assign(ref.current || {}, {
            hide: doHide,
            show: handleOpen,
            ok: handleOk,
            cancel: handleCancel,
        });
    });
    const getContent = () => {
        if (!content) {
            return (createElement(View, { className: classNames({
                    [`${clsPrefix}-placeholder`]: true,
                    [`${clsPrefix}-placeholder--${align}`]: true,
                    [`${clsPrefix}-placeholder--disabled`]: disabled,
                    [`${clsPrefix}-placeholder--inverse`]: isInverse,
                    [`${clsPrefix}-placeholder--inverse-disabled`]: disabled && isInverse,
                }) }, placeholder || locale.placeHolderText));
        }
        else if (isString(content)) {
            return (createElement(Text, { numberOfLines: 1, className: classNames({
                    [`${clsPrefix}-content-text`]: true,
                    [`${clsPrefix}-content-text--${align}`]: true,
                    [`${clsPrefix}-content-text--${size}`]: size,
                    [`${clsPrefix}-content-text--disabled`]: disabled,
                    [`${clsPrefix}-content-text--inverse`]: isInverse,
                    [`${clsPrefix}-content-text--inverse-disabled`]: isInverse && disabled,
                }), style: {
                    textAlign: align,
                } }, content));
        }
        else {
            return content;
        }
    };
    const renderChildren = () => {
        let ret = null;
        if (_children) {
            ret = createElement(View, { className: `${clsPrefix}-drawer-content` }, _children);
        }
        else if (isString(notFoundContent)) {
            ret = (createElement(View, { className: `${clsPrefix}-drawer-content ${clsPrefix}-drawer--empty` },
                createElement(Text, { className: `${clsPrefix}-drawer-empty-text` }, notFoundContent)));
        }
        else if (notFoundContent) {
            ret = (createElement(View, { className: `${clsPrefix}-drawer-content ${clsPrefix}-drawer--empty` },
                createElement(View, { className: `${clsPrefix}-drawer-empty-text` }, notFoundContent)));
        }
        return ret;
    };
    return (createElement(Fragment, null,
        createElement(View, Object.assign({ ref: ref }, others, { className: classNames(clsPrefix, `${clsPrefix}--${size}`, className), onClick: handleOpen }),
            createElement(View, { className: classNames(`${clsPrefix}-content`, `${clsPrefix}-content--${size}`, `${clsPrefix}-content--${align}`) }, getContent()),
            shouldShowIcon ? (createElement(View, { className: classNames(`${clsPrefix}-icon`, `${clsPrefix}-icon--${size}`) },
                createElement(Icon, { className: classNames(`${clsPrefix}-icon-text`, `${clsPrefix}-icon-text--${size}`, {
                        [`${clsPrefix}-icon-text--inverse`]: isInverse,
                        [`${clsPrefix}-icon-text--disabled`]: disabled,
                        [`${clsPrefix}-icon-text--inverse-disabled`]: isInverse && disabled,
                    }), name: iconType }))) : null,
            shouldShowClear ? (createElement(View, { className: classNames(`${clsPrefix}-icon`, `${clsPrefix}-icon--${size}`), onClick: handleClear },
                createElement(Icon, { className: classNames(`${clsPrefix}-icon-text--${size}`, {
                        [`${clsPrefix}-icon-text--inverse`]: isInverse,
                        [`${clsPrefix}-icon-text--disabled`]: disabled,
                        [`${clsPrefix}-icon-text--inverse-disabled`]: isInverse && disabled,
                    }), name: "delete-filling" }))) : null),
        createElement(Drawer, { visible: visible, placement: "bottom", closeMode: ['mask'], onClose: handleCancel, zIndex: zIndex, className: classNames(`${clsPrefix}-drawer`, drawerClassName), containerClassName: `${clsPrefix}-container`, disableScroll: disableScroll },
            showToolbar ? (createElement(View, { className: classNames(`${clsPrefix}-toolbar`, {
                    [`${clsPrefix}-toolbar--no-border`]: buttonPosition === 'bottom',
                }) },
                !hideButton && buttonPosition !== 'bottom' ? (createElement(Button, { className: `${clsPrefix}-toolbar-btn-cancel`, model: "text", onClick: () => handleCancel('cancel-button') }, cancelText || locale.cancel)) : null,
                createElement(View, { className: `${clsPrefix}-toolbar-title` }, drawerTitle),
                !hideButton && buttonPosition !== 'bottom' ? (createElement(Button, { className: `${clsPrefix}-toolbar-btn-ok`, model: "text", type: "primary", onClick: handleOk }, okText || locale.ok)) : null)) : null,
            renderChildren(),
            showBottomBtn ? (createElement(BottomButton, { okText: okText || locale.ok, cancelText: cancelText || locale.cancel, onOk: handleOk, onCancel: () => handleCancel('cancel-button') })) : (createElement(SafeArea, null)))));
};
SelectDrawer.displayName = 'SelectDrawer';
export default forwardRef(SelectDrawer);
