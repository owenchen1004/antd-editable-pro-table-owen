import { __rest } from "tslib";
import classNames from 'classnames';
import { createElement, useEffect, useState } from 'rax';
import Button from '../button';
import Drawer from '../drawer';
import View from '../view';
import { useLocale } from '../locale';
import defaultLang from '../locale/lang/zh-cn';
export default (props) => {
    const { prefix = 'mt-', visible = false, drawerClassName, drawerTitle, onCancel, onClose, onOk, children } = props, others = __rest(props, ["prefix", "visible", "drawerClassName", "drawerTitle", "onCancel", "onClose", "onOk", "children"]);
    const [drawerVisible, setDrawerVisible] = useState(false);
    const clsPrefix = `${prefix}selectdrawer`;
    useEffect(() => {
        if (drawerVisible !== visible) {
            setDrawerVisible(visible);
        }
    }, [visible]);
    const locale = useLocale('SelectDrawer', others, defaultLang.SelectDrawer);
    return (createElement(Drawer, Object.assign({}, others, { visible: drawerVisible, placement: "bottom", closeMode: ['mask'], onClose: onClose, className: classNames(`${clsPrefix}-drawer`, drawerClassName) }),
        createElement(View, { className: `${clsPrefix}-toolbar` },
            createElement(Button, { model: "text", onClick: onCancel }, locale.cancel),
            createElement(View, { className: `${clsPrefix}-toolbar-title` }, drawerTitle),
            createElement(Button, { model: "text", type: "primary", onClick: onOk }, locale.ok)),
        createElement(View, { className: `${clsPrefix}-drawer-content` }, children)));
};
