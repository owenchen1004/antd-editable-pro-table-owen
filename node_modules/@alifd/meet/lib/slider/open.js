"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var rax_video_1 = tslib_1.__importDefault(require("rax-video"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var modal_1 = tslib_1.__importDefault(require("../modal"));

var item_1 = tslib_1.__importDefault(require("./item"));

var slider_1 = tslib_1.__importDefault(require("./slider"));

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

var render_1 = require("../utils/render");

var util_1 = require("./util");

var SliderWrapper = function (_super) {
  tslib_1.__extends(SliderWrapper, _super);

  function SliderWrapper(props) {
    var _this = _super.call(this, props) || this;

    _this.handleClick = function (index) {
      if (_this.props.onClick) {
        _this.props.onClick(index);
      }
    };

    _this.handleClose = function () {
      var onClose = _this.props.onClose;

      _this.setState({
        visible: false
      });

      if (onClose) {
        onClose();
      }
    };

    _this.handleChange = function (index) {
      var _a = _this.props,
          onChange = _a.onChange,
          _b = _a.autoControl,
          autoControl = _b === void 0 ? true : _b;
      var nodes = util_1.getContexts(_this.itemRefs, _this.state.sliderIdPrefix);

      if (autoControl) {
        util_1.pauseAll(nodes);

        if (nodes && nodes[index] && nodes[index].play) {
          nodes[index].play();
        }
      }

      _this.setState({
        curIndex: index
      });

      if (onChange) {
        onChange(index, nodes, _this.itemRefs);
      }
    };

    _this.handleItemClick = function (isImage) {
      if (isImage) {
        _this.handleClose();
      }
    };

    _this.state = {
      visible: true,
      curIndex: props.activeIndex,
      sliderIdPrefix: hooks_1.guid('slider-')
    };
    _this.itemRefs = [];
    return _this;
  }

  SliderWrapper.prototype.componentWillMount = function () {
    var items = this.props.items;

    for (var i = 0; i < items.length; i++) {
      this.itemRefs[i] = rax_1.createRef();
    }
  };

  SliderWrapper.prototype.componentDidMount = function () {
    var _this = this;

    var onReady = this.props.onReady;

    if (onReady) {
      utils_1.nextTick(function () {
        var nodes = util_1.getContexts(_this.itemRefs, _this.state.sliderIdPrefix);
        onReady(nodes, _this.itemRefs);
      });
    }
  };

  SliderWrapper.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        items = _a.items,
        activeIndex = _a.activeIndex,
        _b = _a.prefix,
        prefix = _b === void 0 ? 'mt-' : _b,
        autoPlay = _a.autoPlay,
        others = tslib_1.__rest(_a, ["items", "activeIndex", "prefix", "autoPlay"]);

    var sliderHeight = utils_1.px2rpx(utils_1.windowHeight);
    var _c = this.state,
        visible = _c.visible,
        curIndex = _c.curIndex;
    var clsPrefix = prefix + "slider";
    return rax_1.createElement(modal_1.default, {
      className: clsPrefix + "-modal",
      containerClassName: clsPrefix + "-modal-container",
      visible: visible,
      onClose: this.handleClose
    }, rax_1.createElement(view_1.default, {
      className: clsPrefix + "-control"
    }, rax_1.createElement(view_1.default, {
      className: clsPrefix + "-close-wrapper",
      onClick: this.handleClose
    }, rax_1.createElement(icon_1.default, {
      name: "close",
      className: clsPrefix + "-close"
    })), rax_1.createElement(rax_text_1.default, {
      className: clsPrefix + "-pagination"
    }, curIndex + 1, "/", items.length)), rax_1.createElement(slider_1.default, tslib_1.__assign({}, others, {
      activeIndex: activeIndex,
      showDots: false,
      width: 750,
      height: sliderHeight,
      onChange: this.handleChange
    }), items.map(function (item, index) {
      var _a;

      var _item = item;

      if (utils_1.isString(item)) {
        _item = {
          src: item,
          type: 'image'
        };
      }

      var src = _item.src,
          type = _item.type,
          itemHeight = _item.height,
          rest = tslib_1.__rest(_item, ["src", "type", "height"]);

      var isImage = type === 'image';
      var imgStyle = {};

      if (isImage) {
        imgStyle = {
          backgroundImage: "url(" + _item.src + ")",
          height: itemHeight || sliderHeight || '100%'
        };
      }

      return rax_1.createElement(item_1.default, {
        key: index + "-" + item
      }, rax_1.createElement(view_1.default, {
        className: classnames_1.default(prefix + "slider-open-item", (_a = {}, _a[prefix + "slider-open-item--image"] = isImage, _a)),
        style: tslib_1.__assign({}, imgStyle),
        onClick: function onClick() {
          _this.handleItemClick(isImage);
        }
      }, type === 'video' ? rax_1.createElement(rax_video_1.default, tslib_1.__assign({
        ref: function ref(r) {
          _this.itemRefs[index] = r;
        },
        id: _this.state.sliderIdPrefix + "-" + index
      }, rest, {
        src: _item.src,
        style: {
          width: '750rpx'
        },
        autoPlay: autoPlay,
        showCenterPlayBtn: true,
        "enable-progress-gesture": false
      })) : null));
    })));
  };

  SliderWrapper.defaultProps = {
    items: [],
    activeIndex: 0,
    onClick: function onClick() {},
    onClose: function onClose() {},
    onChange: function onChange() {}
  };
  return SliderWrapper;
}(rax_1.Component);

function default_1(options) {
  if (utils_1.isStrictWechatMiniProgram) {
    var items = options.items,
        activeIndex = options.activeIndex,
        onSuccess = options.onSuccess,
        onFail = options.onFail,
        onComplete = options.onComplete,
        others = tslib_1.__rest(options, ["items", "activeIndex", "onSuccess", "onFail", "onComplete"]);

    return wx.previewMedia({
      sources: items.map(function (item) {
        return tslib_1.__assign(tslib_1.__assign({}, item), {
          url: item.src
        });
      }),
      current: activeIndex,
      success: onSuccess,
      fail: onFail,
      complete: onComplete,
      others: others
    });
  } else if (utils_1.isStrictMiniApp) {
    var items = options.items,
        activeIndex = options.activeIndex,
        onSuccess = options.onSuccess,
        onFail = options.onFail,
        onComplete = options.onComplete,
        others = tslib_1.__rest(options, ["items", "activeIndex", "onSuccess", "onFail", "onComplete"]);

    return my.previewImage(tslib_1.__assign({
      urls: items.filter(function (item) {
        return item.type === 'image';
      }).map(function (item) {
        return item.src;
      }),
      current: activeIndex,
      success: onSuccess,
      fail: onFail,
      complete: onComplete
    }, others));
  } else {
    var unMount_1 = render_1.renderToRoot(rax_1.createElement(SliderWrapper, tslib_1.__assign({}, options)));
    return {
      close: function close() {
        return unMount_1();
      }
    };
  }
}

exports.default = default_1;