"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDateCellStatus = exports.getSelectedIndex = exports.genTotalPageDates = exports.genContentHeight = exports.getTargetDate = exports.getDataSource = exports.getAMPM = exports.getSeconds = exports.getMinutes = exports.getHours = exports.getDays = exports.getMonths = exports.getYears = exports.getValues = exports.getDateByValues = exports.getDefaultFormat = exports.normalizeValue = exports.isEqualDate = exports.isBetweenDates = exports.isAfterDate = exports.isBeforeDate = exports.cloneAsDate = exports.setWeek = exports.getMonthArray = exports.getWeekDateArray = exports.getWeekDayArray = exports.getWeekArray = exports.getFirstDayOfMonth = exports.isHaveDate = exports.isToday = exports.getCellStatus = exports.isDateSelected = exports.isDateInRange = exports.isDateDisabled = exports.isTheSameYear = exports.isTheSameMonth = exports.isTheSameDay = exports.getCurrentMonthList = exports.getNextMonthDates = exports.getCurrentMonthDates = exports.getPreMonthDates = exports.getDayList = exports.getMonthList = exports.updateMonth = exports.updateWeek = exports.updateYear = exports.getDaysInMonth = exports.cloneDate = exports.getDate = exports.formatNumber = exports.getMaxMinDate = exports.DEFAULT_MIN_DATE = exports.DEFAULT_MAX_DATE = exports.NOW = exports.MIN_DAY = exports.MAX_DAY = exports.MIN_MONTH = exports.MAX_MONTH = void 0;

var tslib_1 = require("tslib");

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var types_1 = require("./types");

exports.MAX_MONTH = 11;
exports.MIN_MONTH = 0;
exports.MAX_DAY = 6;
exports.MIN_DAY = 0;
exports.NOW = new Date();
exports.DEFAULT_MAX_DATE = new Date(exports.NOW.getFullYear() + 20, 11, 31, 23, 59, 59, 999);
exports.DEFAULT_MIN_DATE = new Date(2000, 0, 1, 0, 0, 0, 0);

exports.getMaxMinDate = function (validRange) {
  var minDate = exports.DEFAULT_MIN_DATE;
  var maxDate = exports.DEFAULT_MAX_DATE;

  if (validRange && validRange.length > 0) {
    if (Object.prototype.toString.call(validRange[0]) === '[object Date]') {
      minDate = validRange[0];
    }

    if (Object.prototype.toString.call(validRange[1]) === '[object Date]') {
      maxDate = validRange[1];
    }
  }

  return [minDate, maxDate];
};

exports.formatNumber = function (value) {
  return value > 9 ? value : "0" + value;
};

exports.getDate = function (value, maxDate, minDate) {
  var v = value || new Date();

  if (v.getTime() > maxDate.getTime()) {
    v = cloneDate(maxDate);
  }

  if (v.getTime() < minDate.getTime()) {
    v = cloneDate(minDate);
  }

  return v;
};

function cloneDate(d) {
  return new Date(d.getTime());
}

exports.cloneDate = cloneDate;

exports.getDaysInMonth = function (date) {
  var resultDate = new Date(date.getFullYear(), date.getMonth(), 1);
  resultDate.setDate(1);
  resultDate.setMonth(resultDate.getMonth() + 1);
  resultDate.setDate(resultDate.getDate() - 1);
  return resultDate.getDate();
};

function updateYear(d, isAdd, maxDate, minDate) {
  if (isAdd === void 0) {
    isAdd = true;
  }

  var year = d.getFullYear();

  if (isAdd === true) {
    year = year + 1;
  } else {
    year = year - 1;
  }

  var newDate = new Date(year, d.getMonth(), 1);
  return exports.getDate(newDate, maxDate, minDate);
}

exports.updateYear = updateYear;

function updateWeek(d, isAdd, maxDate, minDate) {
  if (isAdd === void 0) {
    isAdd = true;
  }

  var newD = dayjs_1.default(d)[isAdd ? 'add' : 'subtract'](1, 'week');
  return exports.getDate(new Date(newD.valueOf()), maxDate, minDate);
}

exports.updateWeek = updateWeek;

function updateMonth(d, isAdd, maxDate, minDate) {
  if (isAdd === void 0) {
    isAdd = true;
  }

  var month = d.getMonth();
  var year = d.getFullYear();

  if (isAdd === true) {
    month = month + 1;

    if (month > exports.MAX_MONTH) {
      month = exports.MIN_MONTH;
      year = year + 1;
    }
  } else {
    month = month - 1;

    if (month < exports.MIN_MONTH) {
      month = exports.MAX_MONTH;
      year = year - 1;
    }
  }

  var newDate = new Date(year, month, 1);
  var resultDate = exports.getDate(new Date(newDate), maxDate, minDate);
  return resultDate;
}

exports.updateMonth = updateMonth;

function getMonthList(visibleDate, locale) {
  var months = [];

  for (var month = exports.MIN_MONTH; month <= exports.MAX_MONTH; month += 1) {
    months.push({
      label: "" + exports.formatNumber(month + 1) + (locale.month || ''),
      value: new Date(visibleDate.getFullYear(), month)
    });
  }

  return months;
}

exports.getMonthList = getMonthList;

function getDayList(local) {
  var days = [];

  for (var day = exports.MIN_DAY; day <= exports.MAX_DAY; day += 1) {
    days.push({
      label: local.weekdays && local.weekdays[day],
      value: day
    });
  }

  return days;
}

exports.getDayList = getDayList;

function getPreMonthDates(visibleDate) {
  var days = [];
  var firstDay = new Date(visibleDate.getFullYear(), visibleDate.getMonth(), 1);
  var visibleDay = firstDay.getDay();

  if (visibleDay === 0) {
    return days;
  }

  var lastMonthDays = 0;
  var year = visibleDate.getFullYear();
  var month = visibleDate.getMonth();

  if (visibleDate.getMonth() === 0) {
    year = year - 1;
    month = exports.MAX_MONTH;
  } else {
    month = month - 1;
  }

  lastMonthDays = exports.getDaysInMonth(new Date(year, month, 1));
  var beginDate = lastMonthDays - (visibleDay - 1);

  for (var i = 0; i < visibleDay; i++) {
    days.push({
      label: "" + (beginDate + i),
      value: new Date(year, month, beginDate + i)
    });
  }

  return days;
}

exports.getPreMonthDates = getPreMonthDates;

function getCurrentMonthDates(visibleDate) {
  var days = [];
  var monthDays = exports.getDaysInMonth(visibleDate);

  for (var i = 1; i <= monthDays; i++) {
    days.push({
      label: i.toString(),
      value: new Date(visibleDate.getFullYear(), visibleDate.getMonth(), i)
    });
  }

  return days;
}

exports.getCurrentMonthDates = getCurrentMonthDates;

function getNextMonthDates(visibleDate) {
  var days = [];
  var monthDays = exports.getDaysInMonth(visibleDate);
  var lastDate = new Date(visibleDate.getFullYear(), visibleDate.getMonth(), monthDays);
  var lastDay = lastDate.getDay();
  var year = visibleDate.getFullYear();
  var month = visibleDate.getMonth();

  if (visibleDate.getMonth() === exports.MAX_MONTH) {
    year = year + 1;
    month = exports.MIN_MONTH;
  } else {
    month = month + 1;
  }

  for (var i = lastDay + 1; i <= exports.MAX_DAY; i++) {
    days.push({
      label: "" + (i - lastDay),
      value: new Date(year, month, i - lastDay)
    });
  }

  return days;
}

exports.getNextMonthDates = getNextMonthDates;

function getCurrentMonthList(visibleDate, local) {
  var preDates = getPreMonthDates(visibleDate, local);
  var currentDates = getCurrentMonthDates(visibleDate, local);
  var nextDates = getNextMonthDates(visibleDate, local);
  return preDates.concat(currentDates).concat(nextDates);
}

exports.getCurrentMonthList = getCurrentMonthList;

function isTheSameDay(date1, date2) {
  if (!date1 || !date2) {
    return false;
  }

  return dayjs_1.default(date1).isSame(date2, 'day');
}

exports.isTheSameDay = isTheSameDay;

function isTheSameMonth(date1, date2) {
  if (!date1 || !date2) {
    return false;
  }

  return dayjs_1.default(date1).isSame(date2, 'month');
}

exports.isTheSameMonth = isTheSameMonth;

function isTheSameYear(date1, date2) {
  if (!date1 || !date2) {
    return false;
  }

  return date1.getFullYear() === date2.getFullYear();
}

exports.isTheSameYear = isTheSameYear;

function isDateDisabled(cellDate, disableFunc, maxDate, minDate, view) {
  if (cellDate.getTime() > maxDate.getTime()) {
    return true;
  }

  if (cellDate.getTime() < minDate.getTime()) {
    return true;
  }

  if (disableFunc) {
    return disableFunc(cellDate, view);
  }

  return false;
}

exports.isDateDisabled = isDateDisabled;

function isDateInRange(cellDate, selectedData) {
  var _a, _b;

  if (!cellDate || !selectedData) {
    return false;
  }

  if (!Array.isArray(selectedData)) {
    return false;
  }

  if (selectedData.length < 2) {
    return false;
  }

  if (cellDate.getTime() > ((_a = selectedData[selectedData.length - 1]) === null || _a === void 0 ? void 0 : _a.getTime())) {
    return false;
  }

  if (cellDate.getTime() < ((_b = selectedData[0]) === null || _b === void 0 ? void 0 : _b.getTime())) {
    return false;
  }

  return true;
}

exports.isDateInRange = isDateInRange;

function isDateSelected(cellDate, selectedData, mode, type) {
  var isSelected = null;

  if (type === 'range') {
    if (!Array.isArray(selectedData)) {
      throw new Error('Type is range, but selected is not an array');
    }

    if (isTheSameDay(cellDate, selectedData[0])) {
      return types_1.CellStatusType.begin;
    }

    if (isTheSameDay(cellDate, selectedData[selectedData.length - 1])) {
      return types_1.CellStatusType.end;
    }

    return isSelected;
  }

  if (type === 'multi') {
    if (!Array.isArray(selectedData)) {
      throw new Error('Type is multi, but selected is not an array');
    }

    for (var i = 0; i < selectedData.length; i++) {
      if (isTheSameDay(cellDate, selectedData[i])) {
        return types_1.CellStatusType.selected;
      }
    }

    return isSelected;
  }

  if (Array.isArray(selectedData)) {
    throw new Error("Type is " + mode + ", but selected is an array");
  }

  if (mode === 'month' || mode === 'week') {
    if (isTheSameDay(cellDate, selectedData)) {
      isSelected = types_1.CellStatusType.selected;
    }
  }

  if (mode === 'year') {
    if (isTheSameMonth(cellDate, selectedData)) {
      isSelected = types_1.CellStatusType.selected;
    }
  }

  return isSelected;
}

exports.isDateSelected = isDateSelected;

function getCellStatus(cellDate, selectedData, mode, type, disableFunc, maxDate, minDate, view) {
  var cellType = types_1.CellStatusType.normal;
  var today = isToday(cellDate);

  if (today) {
    cellType = types_1.CellStatusType.today;
  }

  var isInRange = type == 'range' && isDateInRange(cellDate, selectedData);

  if (isInRange) {
    cellType = types_1.CellStatusType.range;
  }

  var isSelected = isDateSelected(cellDate, selectedData, mode, type);

  if (isSelected) {
    cellType = isSelected;
  }

  var isDisable = isDateDisabled(cellDate, disableFunc, maxDate, minDate, view);

  if (isDisable) {
    cellType = types_1.CellStatusType.disabled;
  }

  return cellType;
}

exports.getCellStatus = getCellStatus;

function isToday(cellDate) {
  if (!cellDate) {
    return false;
  }

  var cellYear = cellDate.getFullYear();
  var cellMonth = cellDate.getMonth();
  var cellDay = cellDate.getDate();
  var today = new Date();
  var todayYear = today.getFullYear();
  var todayMonth = today.getMonth();
  var todayDay = today.getDate();

  if (cellYear == todayYear && cellMonth == todayMonth && cellDay == todayDay) {
    return true;
  }

  return false;
}

exports.isToday = isToday;

function isHaveDate(cellDate, selected) {
  if (!cellDate) {
    return -1;
  }

  if (!selected || selected.length < 1) {
    return -1;
  }

  for (var i = 0; i < selected.length; i++) {
    if (isTheSameDay(cellDate, selected[i])) {
      return i;
    }
  }

  return -1;
}

exports.isHaveDate = isHaveDate;

function getFirstDayOfMonth(d) {
  return new Date(d.getFullYear(), d.getMonth(), 1);
}

exports.getFirstDayOfMonth = getFirstDayOfMonth;

function getWeekArray(d, firstDayOfWeek) {
  var dayArray = [];
  var daysInMonth = exports.getDaysInMonth(d);
  var weekArray = [];
  var week = [];

  for (var i = 1; i <= daysInMonth; i++) {
    dayArray.push(new Date(d.getFullYear(), d.getMonth(), i, d.getHours(), d.getMinutes()));
  }

  var addWeek = function (w) {
    var emptyDays = 7 - w.length;

    for (var i = 0; i < emptyDays; ++i) {
      w[weekArray.length ? 'push' : 'unshift'](null);
    }

    weekArray.push(w);
  };

  dayArray.forEach(function (day) {
    if (week.length > 0 && day.getDay() === firstDayOfWeek) {
      addWeek(week);
      week = [];
    }

    week.push(day);

    if (dayArray.indexOf(day) === dayArray.length - 1) {
      addWeek(week);
    }
  });
  return weekArray;
}

exports.getWeekArray = getWeekArray;

function getWeekDayArray(weekdays, firstDayOfWeek) {
  var beforeArray = [];
  var afterArray = [];

  for (var i = 0; i < weekdays.length; i++) {
    if (i < firstDayOfWeek) {
      afterArray.push(weekdays[i]);
    } else {
      beforeArray.push(weekdays[i]);
    }
  }

  return tslib_1.__spreadArrays(beforeArray, afterArray);
}

exports.getWeekDayArray = getWeekDayArray;

function getWeekDateArray(d, firstDayOfWeek) {
  var arr = [];

  for (var i = 0; i < 7; i++) {
    var weekDate = cloneDate(d);
    setWeek(weekDate, i, firstDayOfWeek);
    arr.push(weekDate);
  }

  return arr;
}

exports.getWeekDateArray = getWeekDateArray;

function getMonthArray(d) {
  var months = [];
  var month = [];

  for (var i = 0; i < 12; i++) {
    month.push(new Date(d.getFullYear(), i, 1, d.getHours(), d.getMinutes()));

    if (month.length === 3) {
      months.push(month);
      month = [];
    }
  }

  return months;
}

exports.getMonthArray = getMonthArray;

function setWeek(d, day, firstDayOfWeek) {
  var week = d.getDay();
  d.setDate(d.getDate() + (day - week + firstDayOfWeek));
  return d;
}

exports.setWeek = setWeek;

function cloneAsDate(d) {
  var clonedDate = cloneDate(d);
  clonedDate.setHours(0, 0, 0, 0);
  return clonedDate;
}

exports.cloneAsDate = cloneAsDate;

function isBeforeDate(d1, d2) {
  var date1 = cloneAsDate(d1);
  var date2 = cloneAsDate(d2);
  return date1.getTime() < date2.getTime();
}

exports.isBeforeDate = isBeforeDate;

function isAfterDate(d1, d2) {
  var date1 = cloneAsDate(d1);
  var date2 = cloneAsDate(d2);
  return date1.getTime() > date2.getTime();
}

exports.isAfterDate = isAfterDate;

function isBetweenDates(dateToCheck, startDate, endDate) {
  return !isBeforeDate(dateToCheck, startDate) && !isAfterDate(dateToCheck, endDate);
}

exports.isBetweenDates = isBetweenDates;

function isEqualDate(d1, d2) {
  return d1 && d2 && d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
}

exports.isEqualDate = isEqualDate;

function normalizeValue(value, isSelectWeek, firstDayOfWeek) {
  if (!value) {
    return [];
  }

  if (!Array.isArray(value)) {
    if (isSelectWeek) {
      return [setWeek(cloneDate(value), 0, firstDayOfWeek), setWeek(cloneDate(value), 6, firstDayOfWeek)];
    }

    return [value];
  }

  return value;
}

exports.normalizeValue = normalizeValue;

exports.getDefaultFormat = function (type, second, use12Hours) {
  var timeFormat = 'HH:mm';

  if (second) {
    timeFormat += ':ss';
  }

  if (use12Hours) {
    timeFormat = timeFormat.replace('HH', 'hh') + " A";
  }

  return {
    date: 'YYYY-MM-DD',
    year: 'YYYY',
    month: 'YYYY-MM',
    datetime: ['YYYY-MM-DD', timeFormat].join(' '),
    time: timeFormat
  }[type];
};

exports.getDateByValues = function (date, values, type, second, use12Hours) {
  var units = {
    date: 'year_month_date',
    year: 'year',
    month: 'year_month',
    datetime: "year_month_date_hour_minute" + (second ? '_second' : ''),
    time: "hour_minute" + (second ? '_second' : '')
  }[type].split('_');
  var d = cloneDate(date);

  if (units.includes('month')) {
    d.setDate(1);
  }

  units.forEach(function (unit, index) {
    var value = values[index];

    switch (unit) {
      case 'year':
        d.setFullYear(value);
        break;

      case 'month':
        d.setMonth(value);
        break;

      case 'date':
        var daysInMonth = exports.getDaysInMonth(d);
        d.setDate(value > daysInMonth ? daysInMonth : value);
        break;

      case 'hour':
        if (use12Hours && values[values.length - 1] === 'am' && value > 11) {
          d.setHours(value - 12);
          break;
        } else if (use12Hours && values[values.length - 1] === 'pm' && value < 12) {
          d.setHours(value + 12);
          break;
        }

        d.setHours(value);
        break;

      case 'minute':
        d.setMinutes(value);
        break;

      case 'second':
        d.setSeconds(value);
        break;

      default:
        break;
    }
  });
  return d;
};

exports.getValues = function (value, type, second, use12Hours, maxDate, minDate) {
  value = exports.getDate(value, maxDate, minDate);
  var date = dayjs_1.default(value);
  var values = [];
  var format = exports.getDefaultFormat(type, second, use12Hours);
  var hour = date.hour();

  if (format.indexOf('YYYY') !== -1) {
    values.push(date.year());
  }

  if (format.indexOf('MM') !== -1) {
    values.push(date.month());
  }

  if (format.indexOf('DD') !== -1) {
    values.push(date.date());
  }

  if (format.indexOf('HH') !== -1 || format.indexOf('hh') !== -1) {
    values.push(hour);
  }

  if (format.indexOf('mm') !== -1) {
    values.push(date.minute());
  }

  if (format.indexOf('ss') !== -1) {
    values.push(date.second());
  }

  if (use12Hours) {
    values.push(hour > 11 ? 'pm' : 'am');
  }

  return values;
};

exports.getYears = function (maxDate, minDate, locale) {
  if (locale === void 0) {
    locale = {};
  }

  var years = [];
  var maxYears = maxDate.getFullYear();
  var minYears = minDate.getFullYear();

  for (var year = minYears; year <= maxYears; year += 1) {
    years.push({
      label: "" + year + (locale.year || ''),
      value: year
    });
  }

  return years;
};

exports.getMonths = function (value, maxDate, minDate, locale) {
  if (locale === void 0) {
    locale = {};
  }

  var months = [];
  var minMonth = 0;
  var maxMonth = 11;

  if (value.getFullYear() === minDate.getFullYear()) {
    minMonth = minDate.getMonth();
  }

  if (value.getFullYear() === maxDate.getFullYear()) {
    maxMonth = maxDate.getMonth();
  }

  for (var month = minMonth; month <= maxMonth; month += 1) {
    months.push({
      label: "" + exports.formatNumber(month + 1) + (locale.month || ''),
      value: month
    });
  }

  return months;
};

exports.getDays = function (value, maxDate, minDate, locale) {
  if (locale === void 0) {
    locale = {};
  }

  var days = [];
  var maxDay = exports.getDaysInMonth(value);
  var minDay = 1;

  if (value.getFullYear() === maxDate.getFullYear() && value.getMonth() === maxDate.getMonth()) {
    maxDay = maxDate.getDate();
  }

  if (value.getFullYear() === minDate.getFullYear() && value.getMonth() === minDate.getMonth()) {
    minDay = minDate.getDate();
  }

  for (var day = minDay; day <= maxDay; day += 1) {
    days.push({
      label: "" + exports.formatNumber(day) + (locale.day || ''),
      value: day
    });
  }

  return days;
};

exports.getHours = function (value, maxDate, minDate, locale, use12Hours) {
  if (locale === void 0) {
    locale = {};
  }

  var hours = [];
  var maxHour = 23;
  var minHour = 0;

  if (value.getFullYear() === maxDate.getFullYear() && value.getMonth() === maxDate.getMonth() && value.getDate() === maxDate.getDate()) {
    maxHour = maxDate.getHours();
  }

  if (value.getFullYear() === minDate.getFullYear() && value.getMonth() === minDate.getMonth() && value.getDate() === minDate.getDate()) {
    minHour = minDate.getHours();
  }

  for (var hour = minHour; hour <= maxHour; hour += 1) {
    hours.push({
      label: "" + exports.formatNumber(hour) + (locale.hour || ''),
      value: hour
    });
  }

  if (use12Hours) {
    var isPM_1 = value.getHours() > 11;
    hours = hours.filter(function (item) {
      return isPM_1 && item.value > 11 || !isPM_1 && item.value < 12;
    }).map(function (item) {
      if (isPM_1) {
        var val = item.value - 12;
        return {
          label: "" + exports.formatNumber(val) + (locale.hour || ''),
          value: item.value
        };
      }

      return item;
    });

    if (hours.length > 0 && (hours[0].value === 0 || hours[0].value === 12)) {
      var item = hours[0];
      hours.splice(0, 1);
      hours.push(tslib_1.__assign(tslib_1.__assign({}, item), {
        label: "12" + (locale.hour || '')
      }));
    }
  }

  return hours;
};

exports.getMinutes = function (value, maxDate, minDate, locale) {
  if (locale === void 0) {
    locale = {};
  }

  var minutes = [];
  var maxMinute = 59;
  var minMinute = 0;

  if (value.getFullYear() === maxDate.getFullYear() && value.getMonth() === maxDate.getMonth() && value.getDate() === maxDate.getDate() && value.getHours() === maxDate.getHours()) {
    maxMinute = maxDate.getMinutes();
  }

  if (value.getFullYear() === minDate.getFullYear() && value.getMonth() === minDate.getMonth() && value.getDate() === minDate.getDate() && value.getHours() === minDate.getHours()) {
    minMinute = minDate.getMinutes();
  }

  for (var minute = minMinute; minute <= maxMinute; minute += 1) {
    minutes.push({
      label: "" + exports.formatNumber(minute) + (locale.minute || ''),
      value: minute
    });
  }

  return minutes;
};

exports.getSeconds = function (value, maxDate, minDate, locale) {
  if (locale === void 0) {
    locale = {};
  }

  var seconds = [];
  var maxSecond = 59;
  var minSecond = 0;

  if (value.getFullYear() === maxDate.getFullYear() && value.getMonth() === maxDate.getMonth() && value.getDate() === maxDate.getDate() && value.getHours() === maxDate.getHours() && value.getMinutes() === maxDate.getMinutes()) {
    maxSecond = maxDate.getSeconds();
  }

  if (value.getFullYear() === minDate.getFullYear() && value.getMonth() === minDate.getMonth() && value.getDate() === minDate.getDate() && value.getHours() === minDate.getHours() && value.getMinutes() === minDate.getMinutes()) {
    minSecond = minDate.getSeconds();
  }

  for (var second = minSecond; second <= maxSecond; second += 1) {
    seconds.push({
      label: "" + exports.formatNumber(second) + (locale.second || ''),
      value: second
    });
  }

  return seconds;
};

exports.getAMPM = function (locale) {
  return ['am', 'pm'].map(function (key) {
    return {
      label: locale[key],
      value: key
    };
  });
};

exports.getDataSource = function (value, type, second, use12Hours, maxDate, minDate, locale) {
  value = exports.getDate(value, maxDate, minDate);
  var format = exports.getDefaultFormat(type, second, use12Hours);
  var data = [];

  if (format.indexOf('YYYY') !== -1) {
    data.push(exports.getYears(maxDate, minDate, locale));
  }

  if (format.indexOf('MM') !== -1) {
    data.push(exports.getMonths(value, maxDate, minDate, locale));
  }

  if (format.indexOf('DD') !== -1) {
    data.push(exports.getDays(value, maxDate, minDate, locale));
  }

  if (format.indexOf('HH') !== -1 || format.indexOf('hh') !== -1) {
    data.push(exports.getHours(value, maxDate, minDate, locale, use12Hours));
  }

  if (format.indexOf('mm') !== -1) {
    data.push(exports.getMinutes(value, maxDate, minDate, locale));
  }

  if (format.indexOf('ss') !== -1) {
    data.push(exports.getSeconds(value, maxDate, minDate, locale));
  }

  if (use12Hours) {
    data.push(exports.getAMPM(locale));
  }

  return data;
};

exports.getTargetDate = function (modeType, visibleDate, type, maxDate, minDate) {
  var newTime = visibleDate;

  if (type == 'pre') {
    if (modeType == 'week') {
      newTime = updateWeek(visibleDate, false, maxDate, minDate);
    }

    if (modeType == 'month') {
      newTime = updateMonth(visibleDate, false, maxDate, minDate);
    }

    if (modeType == 'year') {
      newTime = updateYear(visibleDate, false, maxDate, minDate);
    }
  }

  if (type == 'next') {
    if (modeType == 'week') {
      newTime = updateWeek(visibleDate, true, maxDate, minDate);
    }

    if (modeType == 'month') {
      newTime = updateMonth(visibleDate, true, maxDate, minDate);
    }

    if (modeType == 'year') {
      newTime = updateYear(visibleDate, true, maxDate, minDate);
    }
  }

  return newTime;
};

exports.genContentHeight = function (modeType) {
  if (modeType == 'week') {
    return '220';
  }

  if (modeType == 'month') {
    return '580';
  }

  if (modeType == 'year') {
    return '700';
  }

  return '700';
};

exports.genTotalPageDates = function (minDate, maxDate, mode, visibleDate) {
  var dates = [];
  var lastPre = visibleDate;

  while (true) {
    lastPre = dates.length > 0 ? dates[dates.length - 1] : lastPre;
    var pre = exports.getTargetDate(mode, lastPre, 'pre', maxDate, minDate);

    if (isTheSameDay(pre, lastPre)) {
      break;
    }

    if (mode == 'week') {
      var tempNext = exports.getTargetDate(mode, pre, 'next', maxDate, minDate);

      if (!isTheSameDay(tempNext, lastPre)) {
        break;
      }
    }

    if (mode == 'month') {
      if (isTheSameMonth(pre, lastPre)) {
        break;
      }
    }

    if (mode == 'year') {
      if (isTheSameYear(pre, lastPre)) {
        break;
      }
    }

    dates.push(pre);
  }

  dates = dates.reverse();
  dates.push(visibleDate);
  var lastNext = visibleDate;

  while (true) {
    lastNext = dates.length > 0 ? dates[dates.length - 1] : lastNext;
    var next = exports.getTargetDate(mode, lastNext, 'next', maxDate, minDate);

    if (isTheSameDay(next, lastNext)) {
      break;
    }

    if (mode == 'week') {
      var tempPre = exports.getTargetDate(mode, next, 'pre', maxDate, minDate);

      if (!isTheSameDay(tempPre, lastNext)) {
        break;
      }
    }

    if (mode == 'month') {
      if (isTheSameMonth(next, lastNext)) {
        break;
      }
    }

    if (mode == 'year') {
      if (isTheSameYear(next, lastNext)) {
        break;
      }
    }

    dates.push(next);
  }

  return dates;
};

exports.getSelectedIndex = function (dates, selectedDate) {
  if (!dates || dates.length < 1) {
    return 1;
  }

  for (var i = 0; i < dates.length; i++) {
    if (!dates[i]) {
      continue;
    }

    if (isTheSameDay(dates[i], selectedDate)) {
      return i;
    }
  }

  return 1;
};

exports.getDateCellStatus = function (_a) {
  var cellDate = _a.cellDate,
      selectedDate = _a.selectedDate,
      mode = _a.mode,
      type = _a.type,
      disabledDate = _a.disabledDate,
      maxDate = _a.maxDate,
      minDate = _a.minDate,
      visibleDate = _a.visibleDate;
  var cellType = getCellStatus(cellDate && cellDate.value, selectedDate, mode, type, disabledDate, maxDate, minDate, 'date');
  var realDisable = cellType === types_1.CellStatusType.disabled;

  if (cellType === types_1.CellStatusType.begin) {
    if (Object.prototype.toString.call(selectedDate) === '[object Array]') {
      if (selectedDate.length === 1) {
        cellType = types_1.CellStatusType.selected;
      }
    }
  }

  if (!isTheSameMonth(cellDate && cellDate.value, visibleDate) && cellType !== types_1.CellStatusType.selected && cellType !== types_1.CellStatusType.begin && cellType !== types_1.CellStatusType.end && cellType !== types_1.CellStatusType.range) {
    cellType = types_1.CellStatusType.disabled;
  }

  return [cellType, realDisable];
};