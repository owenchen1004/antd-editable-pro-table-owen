"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var rax_1 = require("rax");

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var utils_1 = require("./utils");

var types_1 = require("./types");

var YEAR_ROW_CELLS = 3;
var MONTH_ROW_CELLS = 7;

var CalendarContent = function (props) {
  var _a;

  var selectedDate = props.selectedDate,
      visibleDate = props.visibleDate,
      mode = props.mode,
      type = props.type,
      maxDate = props.maxDate,
      minDate = props.minDate,
      _b = props.onDateChange,
      onDateChange = _b === void 0 ? function () {} : _b,
      disabledDate = props.disabledDate,
      enableTimePicker = props.enableTimePicker,
      locale = props.locale,
      prefix = props.prefix,
      renderCellBottom = props.renderCellBottom,
      renderCellRight = props.renderCellRight,
      dateCellRender = props.dateCellRender,
      monthCellRender = props.monthCellRender,
      _c = props.firstDay,
      firstDay = _c === void 0 ? 0 : _c;

  var onItemClick = function (newDate) {
    if (!newDate) {
      return;
    }

    if (type === 'multi') {
      if (!Array.isArray(selectedDate)) {
        if (onDateChange) {
          onDateChange([newDate], newDate);
        }

        return;
      }

      var vIndex = utils_1.isHaveDate(newDate, selectedDate);

      if (vIndex === -1) {
        selectedDate.push(newDate);

        if (onDateChange) {
          onDateChange(selectedDate, newDate);
        }

        return;
      }

      selectedDate.splice(vIndex, 1);

      if (onDateChange) {
        onDateChange(selectedDate, newDate);
      }

      return;
    }

    if (type === 'range') {
      if (!Array.isArray(selectedDate)) {
        return;
      }

      if (selectedDate.length === 0) {
        if (onDateChange) {
          onDateChange([newDate], newDate);
        }

        return;
      }

      if (selectedDate.length === 2) {
        if (onDateChange) {
          onDateChange([newDate], newDate);
        }

        return;
      }

      if (newDate.getTime() < selectedDate[0].getTime()) {
        if (onDateChange) {
          onDateChange([newDate, selectedDate[0]], newDate);
        }

        return;
      }

      if (onDateChange) {
        onDateChange([selectedDate[0], newDate], newDate);
      }

      return;
    }

    if (onDateChange) {
      onDateChange(newDate, newDate);
    }
  };

  var renderYearContent = function () {
    var totalMonths = utils_1.getMonthList(visibleDate, locale);
    var rowCount = totalMonths.length / YEAR_ROW_CELLS;
    var rows = [];

    for (var i = 0; i < rowCount; i++) {
      var datas = totalMonths.slice(i * YEAR_ROW_CELLS, (i + 1) * YEAR_ROW_CELLS);
      rows.push(renderRow(datas, i === 0 ? true : false, i));
    }

    var headPrefix = prefix + "calendar-content-real";
    return rax_1.createElement(view_1.default, {
      className: classnames_1.default("" + headPrefix, headPrefix + "-year")
    }, rows);
  };

  var renderYearCell = function (cellDate, isFirstLine) {
    var _a;

    var cellType = utils_1.getCellStatus(cellDate && cellDate.value, selectedDate, mode, type, disabledDate, maxDate, minDate, 'year');
    var cellPrefix = prefix + "calendar-cell";

    if (cellType === types_1.CellStatusType.begin) {
      if (Object.prototype.toString.call(selectedDate) === '[object Array]') {
        if (selectedDate.length === 1) {
          cellType = types_1.CellStatusType.selected;
        }
      }
    }

    return rax_1.createElement(view_1.default, {
      key: cellDate && cellDate.label,
      className: classnames_1.default(cellPrefix, cellPrefix + "-" + mode, (_a = {}, _a[cellPrefix + "-" + mode + "-" + cellType] = isFirstLine === false, _a[cellPrefix + "-" + mode + "-firstline-" + cellType] = isFirstLine === true, _a)),
      onClick: function onClick() {
        if (cellType === types_1.CellStatusType.disabled) {
          return;
        }

        if (onItemClick) {
          onItemClick(cellDate && cellDate.value);
        }
      }
    }, rax_1.createElement(rax_text_1.default, {
      className: classnames_1.default(cellPrefix + "-" + mode + "-text-" + cellType)
    }, cellDate && cellDate.label));
  };

  var renderDateCell = function (cellDate, rowPrefix, rowCount, cellPrefix, cellType, realDisable) {
    var _a, _b;

    return rax_1.createElement(view_1.default, {
      key: "date-cell-" + cellDate.label,
      className: classnames_1.default("" + cellPrefix + rowPrefix, cellPrefix + "-" + mode, (_a = {}, _a[cellPrefix + "-" + mode + "--short"] = rowCount === 6, _a)),
      onClick: function onClick() {
        if (realDisable) {
          return;
        }

        if (onItemClick) {
          onItemClick(cellDate && cellDate.value);
        }
      }
    }, rax_1.createElement(view_1.default, {
      className: classnames_1.default(cellPrefix + "-left-" + cellType, "" + cellPrefix + rowPrefix + "-left-" + cellType)
    }), rax_1.createElement(view_1.default, {
      className: classnames_1.default(cellPrefix + "-right-" + cellType, "" + cellPrefix + rowPrefix + "-right-" + cellType)
    }), rax_1.createElement(rax_text_1.default, {
      className: classnames_1.default(cellPrefix + "-text", cellPrefix + "-text-" + cellType, "" + cellPrefix + rowPrefix + "-text-" + cellType, (_b = {}, _b[cellPrefix + "-text--short"] = rowCount === 6, _b))
    }, cellDate && cellDate.label), renderCellBottom ? rax_1.createElement(view_1.default, {
      className: classnames_1.default(cellPrefix + "-contain-bottom-" + cellType, "" + cellPrefix + rowPrefix + "-contain-bottom-" + cellType)
    }, renderCellBottom(cellDate && cellDate.value)) : null, renderCellRight ? rax_1.createElement(view_1.default, {
      className: classnames_1.default(cellPrefix + "-contain-right-" + cellType, "" + cellPrefix + rowPrefix + "-contain-right-" + cellType)
    }, renderCellRight(cellDate && cellDate.value)) : null);
  };

  var renderDateContent = function (cells, datas, i, firstLine, rowCount) {
    var _a, _b;

    var cellPrefix = prefix + "calendar-cell";

    var _c = utils_1.getDateCellStatus({
      cellDate: datas[i],
      selectedDate: selectedDate,
      mode: mode,
      type: type,
      disabledDate: disabledDate,
      maxDate: maxDate,
      minDate: minDate,
      visibleDate: visibleDate
    }),
        cellType = _c[0],
        realDisable = _c[1];

    var rowPrefix = '';
    var rowEnd = i === datas.length - 1;

    if (i === 0) {
      rowPrefix = '-row-begin';
    }

    if (rowEnd) {
      rowPrefix = '-row-end';
    }

    var dateCellClassName = {
      cell: classnames_1.default("" + cellPrefix + rowPrefix, cellPrefix + "-" + mode, (_a = {}, _a[cellPrefix + "-" + mode + "--short"] = rowCount === 6, _a)),
      cellLeft: classnames_1.default(cellPrefix + "-left-" + cellType, "" + cellPrefix + rowPrefix + "-left-" + cellType),
      cellRight: classnames_1.default(cellPrefix + "-right-" + cellType, "" + cellPrefix + rowPrefix + "-right-" + cellType),
      cellLabel: classnames_1.default(cellPrefix + "-text", cellPrefix + "-text-" + cellType, "" + cellPrefix + rowPrefix + "-text-" + cellType, (_b = {}, _b[cellPrefix + "-text--short"] = rowCount === 6, _b)),
      containRight: classnames_1.default(cellPrefix + "-contain-right-" + cellType, "" + cellPrefix + rowPrefix + "-contain-right-" + cellType),
      containBottom: classnames_1.default(cellPrefix + "-contain-bottom-" + cellType, "" + cellPrefix + rowPrefix + "-contain-bottom-" + cellType)
    };

    if (dateCellRender) {
      cells.push(rax_1.createElement(rax_1.Fragment, {
        key: i
      }, dateCellRender(datas[i] && datas[i].value, {
        dateCellClassName: dateCellClassName,
        onClick: function onClick() {
          return onItemClick(datas[i] && datas[i].value);
        },
        defaultDateCell: renderDateCell(datas[i], rowPrefix, rowCount, cellPrefix, cellType, realDisable),
        context: {
          firstLine: firstLine,
          rowCount: rowCount,
          cellType: cellType,
          disabled: realDisable
        }
      })));
    } else {
      cells.push(renderDateCell(datas[i], rowPrefix, rowCount, cellPrefix, cellType, realDisable));
    }
  };

  var renderRow = function (datas, firstLine, key, rowCount) {
    var _a;

    if (datas === void 0) {
      datas = [];
    }

    if (rowCount === void 0) {
      rowCount = 5;
    }

    var cells = [];

    for (var i = 0; i < datas.length; i++) {
      if (!datas[i]) {
        continue;
      }

      if (mode === 'year') {
        if (monthCellRender) {
          cells.push(rax_1.createElement(rax_1.Fragment, {
            key: i
          }, monthCellRender(datas[i] && datas[i].value)));
        } else {
          cells.push(rax_1.createElement(rax_1.Fragment, {
            key: i
          }, renderYearCell(datas[i], firstLine)));
        }
      } else {
        renderDateContent(cells, datas, i, firstLine, rowCount);
      }
    }

    var headPrefix = prefix + "calendar-content-row";
    return rax_1.createElement(view_1.default, {
      key: headPrefix + "-" + mode + "-" + key,
      className: classnames_1.default("" + headPrefix, headPrefix + "-" + mode, (_a = {}, _a[headPrefix + "--short"] = rowCount === 6, _a))
    }, cells);
  };

  var renderMonthContent = function () {
    var totalDays = utils_1.getCurrentMonthList(visibleDate, locale);
    var rowCount = totalDays.length / MONTH_ROW_CELLS;
    var rows = [];

    for (var i = 0; i < rowCount; i++) {
      var datas = totalDays.slice(i * MONTH_ROW_CELLS, (i + 1) * MONTH_ROW_CELLS);
      rows.push(renderRow(datas, i === 0 ? true : false, i, rowCount));
    }

    var headPrefix = prefix + "calendar-content-real";
    return rax_1.createElement(view_1.default, {
      className: classnames_1.default("" + headPrefix, headPrefix + "-month")
    }, rows);
  };

  var renderWeekContent = function () {
    var rows = [];
    var fD = dayjs_1.default(visibleDate).day(firstDay);
    var datas = new Array(7).fill(0).map(function (key, index) {
      var day = fD.add(index, 'day');
      return {
        label: day.date().toString(),
        value: new Date(day.valueOf())
      };
    });
    rows.push(renderRow(datas, true, 0));
    var headPrefix = prefix + "calendar-content-real";
    return rax_1.createElement(view_1.default, {
      className: classnames_1.default("" + headPrefix, headPrefix + "-week")
    }, rows);
  };

  var top = function renderTopArea() {
    if (mode === 'year') {
      return null;
    }

    var headPrefix = prefix + "calendar-content-top";
    var weeks = utils_1.getDayList(locale);
    var tops = [];

    for (var i = 0; i < weeks.length; i++) {
      var index = firstDay + i > 6 ? firstDay + i - 7 : firstDay + i;

      if (!weeks[index]) {
        continue;
      }

      tops.push(rax_1.createElement(rax_text_1.default, {
        className: headPrefix + "-item",
        key: headPrefix + "-item-" + weeks[index].value
      }, weeks[index].label));
    }

    return rax_1.createElement(view_1.default, {
      className: "" + headPrefix
    }, tops);
  }();

  var content = function renRealContent() {
    var rContent = null;

    switch (mode) {
      case 'year':
        rContent = renderYearContent();
        break;

      case 'week':
        rContent = renderWeekContent();
        break;

      case 'month':
      default:
        rContent = renderMonthContent();
        break;
    }

    return rContent;
  }();

  return rax_1.createElement(view_1.default, {
    className: classnames_1.default(prefix + "calendar-content", prefix + "calendar-content-" + mode, (_a = {}, _a[prefix + "calendar-content--no-bottom"] = enableTimePicker, _a))
  }, top, content);
};

exports.default = CalendarContent;