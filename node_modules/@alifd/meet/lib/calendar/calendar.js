"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var rax_slider_1 = tslib_1.__importDefault(require("rax-slider"));

var view_1 = tslib_1.__importDefault(require("../view"));

var content_1 = tslib_1.__importDefault(require("./content"));

var header_1 = tslib_1.__importDefault(require("./header"));

var time_picker_1 = tslib_1.__importDefault(require("./time-picker"));

var locale_1 = require("../locale");

var date_1 = require("../utils/date");

var types_1 = require("./types");

var utils_1 = require("./utils");

var utils_2 = require("../utils");

var defaultLocale = {
  weekdays: ['日', '一', '二', '三', '四', '五', '六'],
  months: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
  year: '年',
  month: '月',
  day: '日',
  timePickerLabel: '选择时间'
};

function formatValue(value) {
  if (!value) {
    return undefined;
  }

  if (Array.isArray(value)) {
    return value.map(function (it) {
      return date_1.toDate(it);
    });
  }

  return date_1.toDate(value);
}

var Calendar = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      defaultValue = props.defaultValue,
      value = props.value,
      _b = props.shape,
      shape = _b === void 0 ? 'panel' : _b,
      _c = props.mode,
      mode = _c === void 0 ? 'month' : _c,
      validRange = props.validRange,
      _e = props.onSelect,
      onSelect = _e === void 0 ? function () {} : _e,
      dateCellRender = props.dateCellRender,
      monthCellRender = props.monthCellRender,
      disabledDate = props.disabledDate,
      _onModeChange = props.onModeChange,
      _f = props.needSlider,
      needSlider = _f === void 0 ? false : _f,
      _g = props.enableYearPicker,
      enableYearPicker = _g === void 0 ? false : _g,
      _h = props.enableTimePicker,
      enableTimePicker = _h === void 0 ? false : _h,
      _j = props.timeFormat,
      timeFormat = _j === void 0 ? 'HH:mm:ss' : _j,
      _k = props.sliderHeight,
      sliderHeight = _k === void 0 ? utils_1.genContentHeight(mode) : _k,
      _l = props.sliderWidth,
      sliderWidth = _l === void 0 ? '750' : _l,
      renderCellBottom = props.renderCellBottom,
      renderCellRight = props.renderCellRight,
      renderHeadLeft = props.renderHeadLeft,
      renderHeadRight = props.renderHeadRight,
      firstDay = props.firstDay,
      fixSliderNumber = props.fixSliderNumber,
      others = tslib_1.__rest(props, ["prefix", "defaultValue", "value", "shape", "mode", "validRange", "onSelect", "dateCellRender", "monthCellRender", "disabledDate", "onModeChange", "needSlider", "enableYearPicker", "enableTimePicker", "timeFormat", "sliderHeight", "sliderWidth", "renderCellBottom", "renderCellRight", "renderHeadLeft", "renderHeadRight", "firstDay", "fixSliderNumber"]);

  var genInitVisibleDate = function (sValue) {
    var date = utils_1.NOW;

    if (sValue) {
      if (Array.isArray(sValue)) {
        if (sValue.length > 0 && sValue[0]) {
          date = sValue[0];
        }
      } else {
        date = sValue;
      }
    }

    if (firstDay && mode === 'week') {
      var tempDay = dayjs_1.default(date).day(firstDay);
      date = new Date(tempDay.valueOf());
    }

    return utils_1.cloneDate(date);
  };

  var locale = locale_1.useLocale('Calendar', others, defaultLocale);

  var selectedDate = function genInitSelectedDate(sValue, dValue, vShape) {
    var tempSDate = sValue || dValue;

    if (tempSDate) {
      return tempSDate;
    }

    if (vShape === 'range') {
      return [];
    }

    if (vShape === 'multi') {
      return [];
    }

    return null;
  }(formatValue(value), formatValue(defaultValue), shape);

  var _m = utils_1.getMaxMinDate(validRange),
      minDate = _m[0],
      maxDate = _m[1];

  var _o = rax_1.useState(mode),
      currentMode = _o[0],
      changeCurrentMode = _o[1];

  var _p = rax_1.useState(genInitVisibleDate(Array.isArray(selectedDate) && selectedDate.length === 0 && ['range', 'multi'].indexOf(shape) > -1 ? minDate : selectedDate)),
      visibleDate = _p[0],
      changeVisibleDate = _p[1];

  var _q = rax_1.useState(utils_1.getTargetDate(mode, visibleDate, 'pre', maxDate, minDate)),
      preVisibleDate = _q[0],
      changePreVisibleDate = _q[1];

  var _r = rax_1.useState(visibleDate),
      currentVisibleDate = _r[0],
      changeCurrentVisibleDate = _r[1];

  var _s = rax_1.useState(utils_1.getTargetDate(mode, visibleDate, 'next', maxDate, minDate)),
      nextVisibleDate = _s[0],
      changeNextVisibleDate = _s[1];

  var totalPageDates = fixSliderNumber ? utils_1.genTotalPageDates(minDate, maxDate, mode, visibleDate, firstDay) : [];
  var defaultIndex = utils_1.getSelectedIndex(totalPageDates, visibleDate);

  var _t = rax_1.useState(defaultIndex),
      currentPage = _t[0],
      changeCurrentPage = _t[1];

  var _u = rax_1.useState(false),
      showYearPicker = _u[0],
      setYearPickerShow = _u[1];

  var _v = rax_1.useState(false),
      showTimePicker = _v[0],
      setTimePickerShow = _v[1];

  var sliderRef = rax_1.createRef();
  var showTimePickerNode = enableTimePicker && mode === 'month' && shape === 'panel' && !needSlider;
  rax_1.useEffect(function () {
    return changeVisibleDate(genInitVisibleDate(Array.isArray(selectedDate) && selectedDate.length === 0 && ['range', 'multi'].indexOf(shape) > -1 ? minDate : selectedDate));
  }, [value, shape]);

  if (showTimePickerNode && !selectedDate) {
    selectedDate = new Date();
  }

  var renderContent = function () {
    return renderContentWithVisibleDate(visibleDate);
  };

  var renderContentWithVisibleDate = function (visibleD) {
    var contentType = {
      fullscreen: 'fullscreen',
      range: 'range',
      multi: 'multi'
    }[shape] || 'normal';
    return rax_1.createElement(content_1.default, {
      prefix: prefix,
      selectedDate: selectedDate,
      visibleDate: visibleD,
      type: contentType,
      firstDay: firstDay,
      mode: _onModeChange ? mode : currentMode,
      enableTimePicker: showTimePickerNode,
      onDateChange: function onDateChange(newValue) {
        if (!onSelect) {
          return;
        }

        if (showTimePickerNode) {
          var _d = selectedDate ? dayjs_1.default(selectedDate) : dayjs_1.default(new Date());

          var h = _d.hour();

          var m = _d.minute();

          var s = _d.second();

          var newDate = dayjs_1.default(newValue).hour(h).minute(m).second(s);
          onSelect(newDate.toDate());
        } else {
          onSelect(newValue);
        }
      },
      maxDate: maxDate,
      minDate: minDate,
      disabledDate: disabledDate,
      locale: locale,
      renderCellBottom: renderCellBottom,
      renderCellRight: renderCellRight,
      dateCellRender: dateCellRender,
      monthCellRender: monthCellRender
    });
  };

  var getShapeType = function () {
    var headerType = types_1.HeaderType.normal;

    if (shape === 'fullscreen' || shape === 'card' && mode !== 'week') {
      headerType = types_1.HeaderType.select;
    }

    return headerType;
  };

  var genSliderItems = function () {
    var preItem = rax_1.createElement(rax_slider_1.default.Item, {
      key: "Slider.Item.0"
    }, renderContentWithVisibleDate(preVisibleDate));
    var currentItem = rax_1.createElement(rax_slider_1.default.Item, {
      key: "Slider.Item.1"
    }, renderContentWithVisibleDate(currentVisibleDate));
    var nextItem = rax_1.createElement(rax_slider_1.default.Item, {
      key: "Slider.Item.2"
    }, renderContentWithVisibleDate(nextVisibleDate));
    return [preItem, currentItem, nextItem];
  };

  var dealSliderChange = function (oldIndex, newIndex) {
    if (oldIndex === newIndex) {
      return;
    }

    var newVisible;
    var newPre = preVisibleDate;
    var newCurrent = currentVisibleDate;
    var newNext = nextVisibleDate;

    if (oldIndex === 2 && newIndex === 0) {
      newVisible = utils_1.getTargetDate(mode, visibleDate, 'next', maxDate, minDate);
      newCurrent = utils_1.getTargetDate(mode, newVisible, 'next', maxDate, minDate);
    } else {
      if (oldIndex === 0 && newIndex === 2) {
        newVisible = utils_1.getTargetDate(mode, visibleDate, 'pre', maxDate, minDate);
        newCurrent = utils_1.getTargetDate(mode, newVisible, 'pre', maxDate, minDate);
      } else {
        if (newIndex > oldIndex) {
          newVisible = utils_1.getTargetDate(mode, visibleDate, 'next', maxDate, minDate);

          if (newIndex === 1) {
            newNext = utils_1.getTargetDate(mode, newVisible, 'next', maxDate, minDate);
          }

          if (newIndex === 2) {
            newPre = utils_1.getTargetDate(mode, newVisible, 'next', maxDate, minDate);
          }
        }

        if (newIndex < oldIndex) {
          newVisible = utils_1.getTargetDate(mode, visibleDate, 'pre', maxDate, minDate);

          if (newIndex === 0) {
            newNext = utils_1.getTargetDate(mode, newVisible, 'pre', maxDate, minDate);
          }

          if (newIndex === 1) {
            newPre = utils_1.getTargetDate(mode, newVisible, 'pre', maxDate, minDate);
          }
        }
      }
    }

    changeVisibleDate(newVisible);
    changeCurrentVisibleDate(newCurrent);
    changeNextVisibleDate(newNext);
    changePreVisibleDate(newPre);
  };

  var renderFixSliderContent = function () {
    var items = [];

    for (var i = 0; i < totalPageDates.length; i++) {
      items.push(rax_1.createElement(rax_slider_1.default.Item, {
        key: 'Slider.Item.' + 'i'
      }, renderContentWithVisibleDate(totalPageDates[i])));
    }

    return rax_1.createElement(rax_slider_1.default, {
      ref: sliderRef,
      autoPlay: false,
      showsPagination: false,
      index: defaultIndex,
      loop: false,
      width: sliderWidth,
      height: sliderHeight,
      direction: "horizontal",
      onChange: function onChange(index) {
        return changeCurrentPage(index.index);
      }
    }, items);
  };

  var renderSliderContent = function () {
    if (fixSliderNumber) {
      return renderFixSliderContent();
    }

    return rax_1.createElement(rax_slider_1.default, {
      autoPlay: false,
      showsPagination: false,
      index: 1,
      width: sliderWidth,
      height: sliderHeight,
      direction: "horizontal",
      onChange: function onChange(index) {
        dealSliderChange(currentPage, index.index);
        changeCurrentPage(index.index);
      }
    }, genSliderItems());
  };

  return rax_1.createElement(view_1.default, tslib_1.__assign({
    ref: ref
  }, others, {
    className: classnames_1.default(prefix + "calendar", prefix + "calendar-" + shape, prefix + "calendar-" + shape + "-" + currentMode)
  }), !showTimePicker ? function renderHeader() {
    return rax_1.createElement(header_1.default, {
      prefix: prefix,
      date: visibleDate,
      maxDate: maxDate,
      minDate: minDate,
      enableYearPicker: enableYearPicker && !needSlider,
      enableTimePicker: showTimePickerNode,
      mode: _onModeChange ? mode : currentMode,
      type: getShapeType(),
      locale: locale,
      renderHeadLeft: renderHeadLeft,
      renderHeadRight: renderHeadRight,
      onPickerShow: function onPickerShow(show) {
        return setYearPickerShow(show);
      },
      disabledDate: disabledDate,
      onModeChange: function onModeChange(v) {
        if (_onModeChange) {
          _onModeChange(v);

          return;
        }

        changeCurrentMode(v);
      },
      onDateChange: function onDateChange(date, isAdd, changeMode) {
        if (changeMode === 'picker') {
          var d = dayjs_1.default(date);
          var y = d.year();
          var m = d.month();
          var firstDayOfMonth = dayjs_1.default(y + "-" + (m + 1) + "-01");
          var day = date_1.isValidDate(selectedDate) ? dayjs_1.default(selectedDate).date() : 1;

          if (firstDayOfMonth.daysInMonth() < day) {
            day = firstDayOfMonth.daysInMonth();
          }

          if (shape !== 'range' && shape !== 'multi') {
            var sd = dayjs_1.default(y + "-" + (m + 1) + "-" + day);

            if (utils_2.isValidArray(validRange)) {
              if (sd.isAfter(validRange[1])) {
                sd = dayjs_1.default(validRange[1]);
              } else if (sd.isBefore(validRange[0])) {
                sd = dayjs_1.default(validRange[0]);
              }
            }

            onSelect(sd.toDate());
          }

          changeVisibleDate(date);
          return;
        }

        if (fixSliderNumber) {
          var sliderIndex = currentPage;

          if (isAdd) {
            sliderIndex = sliderIndex + 1;
          } else {
            sliderIndex = sliderIndex - 1;
          }

          if (sliderIndex >= 0 && sliderIndex <= totalPageDates.length - 1) {
            sliderRef.current.slideTo(sliderIndex);
          }

          return;
        }

        changeVisibleDate(date);
        var newPre;
        var newCurrent;
        var newNext;

        if (isAdd) {
          newPre = utils_1.getTargetDate(changeMode, preVisibleDate, 'next', maxDate, minDate);
          newCurrent = utils_1.getTargetDate(changeMode, currentVisibleDate, 'next', maxDate, minDate);
          newNext = utils_1.getTargetDate(changeMode, nextVisibleDate, 'next', maxDate, minDate);
        } else {
          newPre = utils_1.getTargetDate(changeMode, preVisibleDate, 'pre', maxDate, minDate);
          newCurrent = utils_1.getTargetDate(changeMode, currentVisibleDate, 'pre', maxDate, minDate);
          newNext = utils_1.getTargetDate(changeMode, nextVisibleDate, 'pre', maxDate, minDate);
        }

        changeCurrentVisibleDate(newCurrent);
        changePreVisibleDate(newPre);
        changeNextVisibleDate(newNext);
      }
    });
  }() : null, !showYearPicker && !showTimePicker ? function renderCalendar() {
    var s = getShapeType();

    if (needSlider && s === 'normal') {
      return renderSliderContent();
    }

    return renderContent();
  }() : null, showTimePickerNode && !showYearPicker && rax_1.createElement(time_picker_1.default, {
    value: selectedDate,
    format: timeFormat,
    label: locale.timePickerLabel,
    onPickerToggle: function handleTimePickerToggle(show) {
      return setTimePickerShow(show);
    },
    onChange: function onChange(date) {
      if (onSelect) {
        onSelect(date);
      }
    }
  }));
};

Calendar.displayName = 'Calendar';
exports.default = rax_1.forwardRef(Calendar);