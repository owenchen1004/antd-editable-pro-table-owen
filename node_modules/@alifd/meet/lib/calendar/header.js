"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var button_1 = tslib_1.__importDefault(require("../button"));

var date_picker_1 = require("../date-picker");

var types_1 = require("./types");

var utils_1 = require("./utils");

var formatTitle = function (date, mode) {
  if (!date) {
    return '';
  }

  var year = date.getFullYear();
  var month = date.getMonth() + 1;

  if (mode === 'month' || mode === 'week') {
    return utils_1.formatNumber(year) + "." + utils_1.formatNumber(month);
  }

  return utils_1.formatNumber(year);
};

var CalendarHeader = function (props) {
  var _a;

  var _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      date = props.date,
      mode = props.mode,
      type = props.type,
      maxDate = props.maxDate,
      minDate = props.minDate,
      _c = props.enableYearPicker,
      enableYearPickerProp = _c === void 0 ? false : _c,
      enableTimePicker = props.enableTimePicker,
      disabledDate = props.disabledDate,
      renderHeadLeft = props.renderHeadLeft,
      renderHeadRight = props.renderHeadRight,
      locale = props.locale,
      _d = props.onDateChange,
      onDateChange = _d === void 0 ? function () {} : _d,
      _e = props.onModeChange,
      onModeChange = _e === void 0 ? function () {} : _e,
      _f = props.onPickerShow,
      onPickerShow = _f === void 0 ? function () {} : _f;

  var _g = rax_1.useState(false),
      showPicker = _g[0],
      setShowPicker = _g[1];

  var enableYearPicker = type === types_1.HeaderType.select || enableYearPickerProp;
  var datePickerProps = {
    value: date,
    disabledDate: disabledDate,
    onChange: function onChange(v) {
      var d = dayjs_1.default(v);
      var y = d.get('year');
      var m = d.get('month');
      var newDate = dayjs_1.default().year(y).month(m).date(1);
      onDateChange(newDate.toDate(), false, 'picker');
    }
  };
  var clsPrefix = prefix + "calendar";
  var clses = {
    picker: classnames_1.default((_a = {}, _a[clsPrefix + "-header-picker"] = !enableTimePicker, _a[clsPrefix + "-header-picker--with-time"] = enableTimePicker, _a))
  };

  var togglePicker = function togglePicker() {
    if (!enableYearPicker) {
      return;
    }

    var nextState = !showPicker;
    setShowPicker(nextState);

    if (onPickerShow) {
      onPickerShow(nextState);
    }
  };

  return type === types_1.HeaderType.select ? function renderSelectedHeader() {
    var _a;

    var headPrefix = prefix + "calendar-header";
    return rax_1.createElement(rax_1.Fragment, null, rax_1.createElement(view_1.default, {
      className: classnames_1.default("" + headPrefix, headPrefix + "-select")
    }, rax_1.createElement(view_1.default, {
      className: headPrefix + "-select-title-container " + headPrefix + "-select-title-container-" + mode,
      onClick: togglePicker
    }, rax_1.createElement(rax_text_1.default, {
      className: classnames_1.default(headPrefix + "-select-title", (_a = {}, _a[headPrefix + "-select-title--highlight"] = showPicker, _a))
    }, dayjs_1.default(date).format(mode === 'year' ? 'YYYY' : 'YYYY.MM')), rax_1.createElement(icon_1.default, {
      name: "arrow-down",
      size: "xs",
      className: showPicker ? prefix + "calendar-header-arrow-up" : prefix + "calendar-header-arrow"
    })), rax_1.createElement(view_1.default, {
      className: headPrefix + "-select-button-container"
    }, rax_1.createElement(button_1.default.Group, {
      size: "small"
    }, rax_1.createElement(button_1.default, {
      disabled: enableYearPicker && showPicker,
      type: mode === 'month' ? 'primary' : 'normal',
      onClick: function onClick() {
        if (onModeChange) {
          onModeChange('month');
        }
      }
    }, locale && locale.month || '月'), rax_1.createElement(button_1.default, {
      disabled: enableYearPicker && showPicker,
      type: mode === 'year' ? 'primary' : 'normal',
      onClick: function onClick() {
        if (onModeChange) {
          onModeChange('year');
        }
      }
    }, locale && locale.year || '年')))), showPicker ? rax_1.createElement(date_picker_1.EmbedMonthPicker, tslib_1.__assign({
      className: clses.picker,
      validRange: [minDate, maxDate]
    }, datePickerProps)) : null);
  }() : function renderNormalHeader() {
    var _a, _b, _c, _d, _e, _f;

    var headPrefix = prefix + "calendar-header";
    var leftYearIcon = null;
    var rightYearIcon = null;

    if (!enableYearPickerProp) {
      leftYearIcon = rax_1.createElement(icon_1.default, {
        className: classnames_1.default(headPrefix + "-normal-icon double", (_a = {}, _a[headPrefix + "-normal-icon-disabled"] = showPicker, _a)),
        name: "arrow-double-left",
        onClick: function onClick() {
          if (showPicker) {
            return;
          }

          if (onDateChange) {
            if (mode !== 'week') {
              onDateChange(utils_1.updateYear(date, false, maxDate, minDate), false, 'year');
            } else {
              onDateChange(utils_1.updateMonth(date, false, maxDate, minDate), false, 'month');
            }
          }
        }
      });
      rightYearIcon = rax_1.createElement(icon_1.default, {
        className: classnames_1.default(headPrefix + "-normal-icon double", (_b = {}, _b[headPrefix + "-normal-icon-disabled"] = showPicker, _b)),
        name: "arrow-double-right",
        onClick: function onClick() {
          if (showPicker) {
            return;
          }

          if (onDateChange) {
            if (mode !== 'week') {
              onDateChange(utils_1.updateYear(date, true, maxDate, minDate), true, 'year');
            } else {
              onDateChange(utils_1.updateMonth(date, true, maxDate, minDate), true, 'month');
            }
          }
        }
      });
    }

    if (renderHeadLeft) {
      leftYearIcon = renderHeadLeft();
    }

    if (renderHeadRight) {
      rightYearIcon = renderHeadRight();
    }

    return rax_1.createElement(rax_1.Fragment, null, rax_1.createElement(view_1.default, {
      className: classnames_1.default("" + headPrefix, headPrefix + "-normal", (_c = {}, _c[headPrefix + "-normal--highlighted"] = showPicker, _c))
    }, rax_1.createElement(view_1.default, {
      className: headPrefix + "-normal-left-container"
    }, leftYearIcon, rax_1.createElement(icon_1.default, {
      className: classnames_1.default(headPrefix + "-normal-icon", (_d = {}, _d[headPrefix + "-normal-icon-disabled"] = showPicker, _d[headPrefix + "-normal-icon--only"] = !leftYearIcon, _d)),
      name: "arrow-left",
      onClick: function onClick() {
        if (showPicker) {
          return;
        }

        if (onDateChange) {
          if (mode !== 'week') {
            onDateChange(utils_1.updateMonth(date, false, maxDate, minDate), false, 'month');
          } else {
            onDateChange(utils_1.updateWeek(date, false, maxDate, minDate), false, 'week');
          }
        }
      }
    })), rax_1.createElement(view_1.default, {
      className: headPrefix + "-normal-title-text-wrapper",
      onClick: togglePicker
    }, rax_1.createElement(rax_text_1.default, {
      className: classnames_1.default(headPrefix + "-normal-title-text", (_e = {}, _e[headPrefix + "-normal-title-text--highlighted"] = showPicker, _e)),
      onClick: function onClick() {}
    }, showPicker ? formatTitle(date, mode) : formatTitle(date, mode)), enableYearPicker ? rax_1.createElement(icon_1.default, {
      name: "arrow-down",
      size: "xs",
      className: showPicker ? prefix + "calendar-header-arrow-up" : prefix + "calendar-header-arrow"
    }) : null), rax_1.createElement(view_1.default, {
      className: headPrefix + "-normal-right-container"
    }, rax_1.createElement(icon_1.default, {
      className: classnames_1.default(headPrefix + "-normal-icon", (_f = {}, _f[headPrefix + "-normal-icon-disabled"] = showPicker, _f[headPrefix + "-normal-icon--only"] = !rightYearIcon, _f)),
      name: "arrow-right",
      onClick: function onClick() {
        if (showPicker) {
          return;
        }

        if (onDateChange) {
          if (mode !== 'week') {
            onDateChange(utils_1.updateMonth(date, true, maxDate, minDate), true, 'month');
          } else {
            onDateChange(utils_1.updateWeek(date, true, maxDate, minDate), true, 'week');
          }
        }
      }
    }), rightYearIcon)), showPicker ? rax_1.createElement(rax_1.Fragment, null, mode === 'year' ? rax_1.createElement(date_picker_1.EmbedYearPicker, tslib_1.__assign({
      className: clses.picker,
      validRange: [minDate, maxDate]
    }, datePickerProps)) : rax_1.createElement(date_picker_1.EmbedMonthPicker, tslib_1.__assign({
      className: clses.picker,
      validRange: [minDate, maxDate]
    }, datePickerProps))) : null);
  }();
};

exports.default = CalendarHeader;