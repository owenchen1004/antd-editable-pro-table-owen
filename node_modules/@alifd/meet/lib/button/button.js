"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var rax_clone_element_1 = tslib_1.__importDefault(require("rax-clone-element"));

var rax_is_valid_element_1 = tslib_1.__importDefault(require("rax-is-valid-element"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var utils_1 = require("../utils");

var createChildren = function (children, classes, prefix, size) {
  var count = rax_children_1.default.count(children);
  return rax_children_1.default.map(children, function (child, index) {
    var _a;

    if (utils_1.isNil(child) || utils_1.isBoolean(child)) {
      return null;
    }

    var key = child.key || "mt-button-" + index;

    if (rax_is_valid_element_1.default(child)) {
      if (child.type === rax_text_1.default) {
        return rax_clone_element_1.default(child, {
          key: key,
          className: classnames_1.default(classes.textCls, child.props.className),
          style: child.props.style || {}
        });
      } else if (child.type === icon_1.default) {
        return rax_clone_element_1.default(child, {
          key: key,
          className: classnames_1.default(classes.iconCls, child.props.className, (_a = {}, _a[prefix + "button-icon--" + size + "-first"] = index === 0, _a[prefix + "button-icon--" + size + "-last"] = index === count - 1, _a)),
          style: child.props.style || {}
        });
      } else {
        return rax_clone_element_1.default(child, {
          key: key
        });
      }
    } else {
      return rax_1.createElement(rax_text_1.default, {
        key: key,
        className: classes.textCls
      }, child);
    }
  });
};

var Button = function (props, ref) {
  var _a;

  var _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      _c = props.type,
      typeProp = _c === void 0 ? 'normal' : _c,
      _d = props.size,
      size = _d === void 0 ? 'medium' : _d,
      _e = props.fullWidth,
      fullWidth = _e === void 0 ? false : _e,
      _f = props.disabled,
      disabled = _f === void 0 ? false : _f,
      _g = props.loading,
      loading = _g === void 0 ? false : _g,
      _h = props.text,
      text = _h === void 0 ? false : _h,
      _j = props.warning,
      warning = _j === void 0 ? false : _j,
      children = props.children,
      _k = props.model,
      modelProp = _k === void 0 ? 'solid' : _k,
      className = props.className,
      _l = props.component,
      component = _l === void 0 ? view_1.default : _l,
      _m = props.onClick,
      onClick = _m === void 0 ? function () {} : _m,
      onDisabledClick = props.onDisabledClick,
      others = tslib_1.__rest(props, ["prefix", "type", "size", "fullWidth", "disabled", "loading", "text", "warning", "children", "model", "className", "component", "onClick", "onDisabledClick"]);

  var _o = rax_1.useMemo(function () {
    var nType = typeProp;
    var nModel = modelProp;

    if (typeProp === 'secondary') {
      nType = 'primary';
      nModel = 'outline';
    }

    if (text) {
      nModel = 'text';
    }

    if (warning) {
      nType = 'warning';
    }

    return [nType, nModel];
  }, [typeProp, modelProp, warning, text]),
      type = _o[0],
      model = _o[1];

  var iconCls = prefix + "button-font--" + size;
  var handleClick = rax_1.useCallback(function (e) {
    if (disabled) {
      if (utils_1.isFunction(onDisabledClick)) {
        onDisabledClick(e);
      }

      return;
    }

    onClick(e);
  }, [disabled, onDisabledClick, onClick]);
  return rax_1.createElement(component, tslib_1.__assign(tslib_1.__assign({
    ref: ref
  }, others), {
    className: classnames_1.default(className, prefix + "button", prefix + "button--" + size, prefix + "button--" + type + "-" + model, (_a = {}, _a[prefix + "button--fullwidth"] = fullWidth, _a[prefix + "button--" + type + "-" + model + "-disabled"] = disabled, _a)),
    onClick: handleClick
  }), rax_1.createElement(rax_1.Fragment, null, loading ? rax_1.createElement(icon_1.default, {
    key: "prefix-icon",
    className: classnames_1.default(iconCls, prefix + "button-icon--" + size + "-first"),
    name: "loading"
  }) : null, createChildren(children, {
    textCls: prefix + "button-font--" + size,
    iconCls: iconCls
  }, prefix, size)));
};

Button.displayName = 'Button';
exports.default = rax_1.forwardRef(Button);