"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_scrollview_1 = tslib_1.__importDefault(require("rax-scrollview"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var bread_crumb_1 = tslib_1.__importDefault(require("../bread-crumb"));

var list_1 = tslib_1.__importDefault(require("../list"));

var picker_1 = tslib_1.__importDefault(require("../picker"));

var select_drawer_1 = tslib_1.__importDefault(require("../select-drawer"));

var locale_1 = require("../locale");

var utils_1 = require("../utils");

var tree_1 = require("../utils/tree");

var getInitValue = function (props) {
  var _a = props.dataSource,
      dataSource = _a === void 0 ? [] : _a,
      defaultValue = props.defaultValue,
      value = props.value;
  var ret = [];

  if ('value' in props) {
    if (utils_1.isValidArray(value)) {
      ret = value;
    } else if (!Array.isArray(value) && value) {
      ret = tree_1.getFullPathByValue(props.dataSource, props.value);
    }
  } else if (!utils_1.isUndef(defaultValue)) {
    if (utils_1.isValidArray(defaultValue)) {
      ret = defaultValue;
    } else if (!Array.isArray(defaultValue) && defaultValue) {
      ret = tree_1.getFullPathByValue(dataSource, defaultValue);
    }
  }

  return ret;
};

var getInitInternalValue = function (props) {
  var r = getInitValue(props);
  var isNormalMode = props.mode !== 'mini';

  if (r.length === 0) {
    if (!isNormalMode) {
      return tree_1.getFirstValue(props.dataSource);
    } else {
      return [];
    }
  } else {
    return r;
  }
};

var defaultRenderContent = function (values, separator) {
  if (values === void 0) {
    values = [];
  }

  return Array.isArray(values) ? values.map(function (val) {
    return val.label;
  }).join(separator) : '';
};

var CascaderSelect = function (props, ref) {
  var _a;

  var _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      _c = props.dataSource,
      dataSource = _c === void 0 ? [] : _c,
      _d = props.separator,
      separator = _d === void 0 ? '/' : _d,
      _e = props.mode,
      mode = _e === void 0 ? 'normal' : _e,
      value = props.value,
      defaultValue = props.defaultValue,
      className = props.className,
      hasClear = props.hasClear,
      _f = props.useSimpleValue,
      useSimpleValue = _f === void 0 ? false : _f,
      onChange = props.onChange,
      _g = props.rootTipText,
      rootTipText = _g === void 0 ? '' : _g,
      localeProp = props.locale,
      loadData = props.loadData,
      isPreview = props.isPreview,
      renderPreview = props.renderPreview,
      _h = props.size,
      size = _h === void 0 ? 'medium' : _h,
      drawerClassName = props.drawerClassName,
      previewClassNameProp = props.previewClassName,
      previewStyle = props.previewStyle,
      _j = props.onSelect,
      onSelect = _j === void 0 ? function () {} : _j,
      _k = props.onClear,
      onClear = _k === void 0 ? function () {} : _k,
      onCancel = props.onCancel,
      _l = props.renderContent,
      renderContent = _l === void 0 ? defaultRenderContent : _l,
      others = tslib_1.__rest(props, ["prefix", "dataSource", "separator", "mode", "value", "defaultValue", "className", "hasClear", "useSimpleValue", "onChange", "rootTipText", "locale", "loadData", "isPreview", "renderPreview", "size", "drawerClassName", "previewClassName", "previewStyle", "onSelect", "onClear", "onCancel", "renderContent"]);

  var scrollRef = rax_1.useRef(null);
  var clsPrefix = prefix + "cascader-select";
  var isControlled = ('value' in props);
  var isNormalMode = mode !== 'mini';
  var previewClassName = classnames_1.default(previewClassNameProp, prefix + "form-item-input--preview-" + size);
  var loadingIcon = rax_1.createElement(icon_1.default, {
    className: clsPrefix + "-icon--loading",
    name: "loading",
    size: "s"
  });
  var selectedIcon = rax_1.createElement(icon_1.default, {
    className: clsPrefix + "-icon--selected",
    name: "select",
    size: "s"
  });

  var _m = rax_1.useState(getInitValue(props)),
      curVal = _m[0],
      setVal = _m[1];

  var _o = rax_1.useState(getInitInternalValue(props)),
      internalValue = _o[0],
      setInternalVal = _o[1];

  var _p = rax_1.useState(null),
      loadingNode = _p[0],
      setLoadingNode = _p[1];

  var _q = rax_1.useState(false),
      drawerVisible = _q[0],
      setDrawerVisible = _q[1];

  var locale = localeProp || locale_1.useLocale('Cascader', props, {
    rootTipText: '首页'
  });
  var innerSelectedPath = tree_1.getDataByValues(dataSource, internalValue);

  var handlePickerChange = function (v) {
    return setInternalVal(v);
  };

  var handleCancel = function (reason) {
    setInternalVal(curVal);

    if (utils_1.isFunction(onCancel)) {
      onCancel(reason);
    }
  };

  var handleListClick = function (item, dpt) {
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
      var val, newInternalVal;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            val = item.value;
            newInternalVal = tslib_1.__spreadArrays(internalValue.slice(0, dpt), [val]);

            if (loadData && internalValue.indexOf(val) > -1) {
              newInternalVal = internalValue.slice(0, internalValue.indexOf(val) + 1);
            }

            setInternalVal(newInternalVal);
            if (!(loadData && !item.isLeaf)) return [3, 2];
            setLoadingNode(val);
            return [4, loadData(item)];

          case 1:
            _a.sent();

            setLoadingNode(null);
            _a.label = 2;

          case 2:
            if (item.children && scrollRef.current) {
              scrollRef.current.scrollTo(0, 0);
            }

            if (onSelect) {
              onSelect(val, item);
            }

            return [2];
        }
      });
    });
  };

  rax_1.useEffect(function () {
    setVal(getInitValue(props));
    setInternalVal(getInitInternalValue(props));
  }, [value]);
  rax_1.useEffect(function () {
    if (!drawerVisible) {
      setVal(getInitValue(props));
      setInternalVal(getInitInternalValue(props));
    }
  }, [props.dataSource]);
  var nextList = [];

  if (isNormalMode) {
    if (utils_1.isValidArray(internalValue)) {
      var lastVal_2 = internalValue[internalValue.length - 1];
      var t = tree_1.find(dataSource, function (node) {
        return node.value === lastVal_2;
      });

      if (t && loadingNode === t.value) {
        nextList = [];
      } else if (t && utils_1.isValidArray(t.children)) {
        nextList = t.children;
      }
    } else {
      nextList = dataSource;
    }
  }

  if (isPreview) {
    if (utils_1.isFunction(renderPreview)) {
      return rax_1.createElement(view_1.default, {
        className: previewClassName,
        style: previewStyle
      }, renderPreview(innerSelectedPath));
    }

    return rax_1.createElement(rax_text_1.default, {
      className: previewClassName,
      style: previewStyle
    }, innerSelectedPath.map(function (node) {
      return node.label;
    }).join(separator));
  }

  return rax_1.createElement(select_drawer_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    hasClear: hasClear,
    className: classnames_1.default(clsPrefix, className),
    content: renderContent(tree_1.getDataByValues(dataSource, curVal), separator),
    drawerClassName: classnames_1.default(clsPrefix + "-container", drawerClassName),
    onVisibleChange: function handleVisibleChange(visible) {
      return setDrawerVisible(visible);
    },
    onOk: function handleOk() {
      if (isNormalMode) {
        if (utils_1.isValidArray(internalValue)) {
          var lastVal_1 = internalValue[internalValue.length - 1];
          var n = tree_1.find(dataSource, function (node) {
            return node.value === lastVal_1;
          });

          if (n && n.children) {
            handleCancel('invalid-selection');
            return;
          }
        } else {
          handleCancel('invalid-selection');
          return;
        }
      }

      if (!isControlled) {
        setVal(internalValue);
      }

      if (onChange) {
        var selectedPath = tree_1.getDataByValues(dataSource, internalValue);
        var lastData = selectedPath[selectedPath.length - 1];
        onChange(useSimpleValue ? lastData.value || '' : internalValue, lastData, {
          selectedPath: selectedPath
        });
      }
    },
    onCancel: handleCancel,
    onClear: function handleClear() {
      if (!isControlled) {
        setVal([]);
        setInternalVal([]);
      }

      if (onClear) {
        onClear();
      }

      if (onChange) {
        onChange(useSimpleValue ? '' : [], {}, {
          selectedPath: []
        });
      }
    }
  }), isNormalMode ? rax_1.createElement(rax_1.Fragment, null, rax_1.createElement(bread_crumb_1.default, {
    className: classnames_1.default(clsPrefix + "-nav", (_a = {}, _a[clsPrefix + "-nav--wechat"] = utils_1.isStrictWechatMiniProgram, _a)),
    onClick: function handleBreadCrumbClick(index) {
      if (index === void 0) {
        index = 0;
      }

      setInternalVal(internalValue.slice(0, index));

      if (scrollRef.current) {
        scrollRef.current.scrollTo(0, 0);
      }
    }
  }, rax_1.createElement(bread_crumb_1.default.Item, null, rootTipText || locale.rootTipText), utils_1.isValidArray(innerSelectedPath) ? innerSelectedPath.map(function (val) {
    return rax_1.createElement(bread_crumb_1.default.Item, {
      key: val.value
    }, val.label);
  }) : null), rax_1.createElement(view_1.default, {
    className: clsPrefix + "-gutter"
  })) : null, !isNormalMode ? function renderPicker() {
    return utils_1.isValidArray(dataSource) ? rax_1.createElement(picker_1.default, {
      cascade: true,
      data: dataSource,
      value: internalValue,
      onChange: handlePickerChange
    }) : null;
  }() : rax_1.createElement(rax_scrollview_1.default, {
    showsVerticalScrollIndicator: true,
    showsHorizontalScrollIndicator: false,
    ref: scrollRef,
    className: clsPrefix + "-scrollview"
  }, rax_1.createElement(view_1.default, {
    className: clsPrefix + "-item-container"
  }, utils_1.isValidArray(internalValue) ? internalValue.map(function (val, index) {
    var list = tree_1.getSiblings(dataSource, val);
    return utils_1.isValidArray(list) ? rax_1.createElement(list_1.default, {
      className: clsPrefix + "-list",
      key: val
    }, list.map(function (item) {
      var icon = null;
      var hasArrow = loadData && !item.isLeaf || !loadData && item.children;

      if (loadData && loadingNode === item.value) {
        icon = loadingIcon;
      } else if (loadData && item.value === val || !loadData && item.value === val) {
        icon = selectedIcon;
      }

      return rax_1.createElement(list_1.default.Item, {
        key: item.value,
        title: item.label,
        extra: icon,
        arrow: hasArrow && !icon ? 'right' : null,
        disabled: item.disabled,
        onClick: function onClick() {
          return handleListClick(item, index);
        }
      });
    })) : null;
  }) : null, utils_1.isValidArray(nextList) ? rax_1.createElement(list_1.default, {
    className: clsPrefix + "-list"
  }, nextList.map(function (item) {
    var icon = null;
    var hasArrow = item.children || loadData && !item.isLeaf;

    if (loadData && item.isLeaf && item.value === loadingNode) {
      icon = loadingIcon;
    }

    return rax_1.createElement(list_1.default.Item, {
      key: item.value,
      title: item.label,
      extra: icon,
      arrow: hasArrow && !icon ? 'right' : null,
      disabled: item.disabled,
      onClick: function onClick() {
        return handleListClick(item, internalValue ? internalValue.length : 0);
      }
    });
  })) : null)));
};

CascaderSelect.displayName = 'CascaderSelect';
exports.default = rax_1.forwardRef(CascaderSelect);