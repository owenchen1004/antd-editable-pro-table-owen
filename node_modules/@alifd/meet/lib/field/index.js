"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldElement = void 0;

var tslib_1 = require("tslib");

var field_1 = tslib_1.__importDefault(require("@alifd/field"));

var rax_1 = require("rax");

var rax_clone_element_1 = tslib_1.__importDefault(require("rax-clone-element"));

var rax_is_valid_element_1 = tslib_1.__importDefault(require("rax-is-valid-element"));

var element_1 = tslib_1.__importDefault(require("./element"));

exports.FieldElement = element_1.default;

function processErrorMessage(element) {
  if (element && rax_is_valid_element_1.default(element)) {
    return rax_clone_element_1.default(element, {
      key: 'error'
    });
  } else if (element && typeof element !== 'string') {
    element = element.message;
  }

  return element;
}

var MeetField = function (_super) {
  tslib_1.__extends(MeetField, _super);

  function MeetField(contextComp, options) {
    var _this = this;

    var newOptions = Object.assign({
      processErrorMessage: processErrorMessage
    }, options);
    _this = _super.call(this, contextComp, newOptions) || this;
    _this.validate = _this.validate.bind(_this);
    return _this;
  }

  MeetField.useField = function (options) {
    return this.getUseField({
      useState: rax_1.useState,
      useMemo: rax_1.useMemo
    })(options);
  };

  MeetField.prototype.validatePromise = function (names, callback) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _super.prototype.validatePromise.call(_this, names, callback).then(function (result) {
        if (_this.afterValidateRerender) {
          _this.afterValidateRerender({
            errorsGroup: _this.getErrors(),
            options: _this.options,
            instance: _this.instance
          });
        }

        resolve(result);
      }).catch(reject);
    });
  };

  MeetField.prototype.validate = function (names, callback) {
    return this.validatePromise(names, callback);
  };

  return MeetField;
}(field_1.default);

exports.default = MeetField;