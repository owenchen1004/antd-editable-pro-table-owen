"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var rax_1 = require("rax");

var context_1 = tslib_1.__importDefault(require("../../locale/context"));

var picker_1 = tslib_1.__importDefault(require("../../picker"));

var utils_1 = require("../../utils");

var date_1 = require("../../utils/date");

var BasePicker = function (_super) {
  tslib_1.__extends(BasePicker, _super);

  function BasePicker(props) {
    var _this = _super.call(this, props) || this;

    var d = date_1.toDate(props.value || props.defaultValue);

    var realDate = _this.getAvailableDate(date_1.isValidDate(d) ? d : new Date());

    _this.state = {
      value: realDate
    };
    _this.handleChange = _this.handleChange.bind(_this);

    if (d && realDate.getTime() !== d.getTime() && props.onChange) {
      props.onChange(realDate);
    }

    return _this;
  }

  BasePicker.prototype.componentDidUpdate = function (prevProps) {
    if ('value' in this.props) {
      var nowValue = this.state.value;
      var _a = this.props,
          value = _a.value,
          defaultValue = _a.defaultValue;

      if (value === prevProps.value) {
        return;
      }

      var newValue = this.getAvailableDate(date_1.toValidDate(value || defaultValue));

      if (newValue.getTime() === nowValue.getTime()) {
        return;
      }

      this.setState({
        value: newValue
      });
    }
  };

  Object.defineProperty(BasePicker.prototype, "value", {
    get: function get() {
      if (this.props.value) {
        return this.getAvailableDate(date_1.toValidDate(this.props.value));
      }

      return this.state.value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BasePicker.prototype, "validRange", {
    get: function get() {
      return this.props.validRange;
    },
    enumerable: false,
    configurable: true
  });

  BasePicker.prototype.filterDataSource = function (source, changeDate, type) {
    var validRange = this.validRange;
    var disabledDate = this.props.disabledDate;

    if (!disabledDate && !validRange) {
      return source;
    }

    for (var i = 0; i < source.length; i++) {
      var startDate = new Date();
      changeDate(startDate, source[i]);
      var endDate = dayjs_1.default(startDate).endOf(type);
      var isDisable = utils_1.isFunction(disabledDate) ? disabledDate(startDate, type) && disabledDate(endDate.toDate(), type) : false;

      if (!isDisable && validRange && this.getStep() === type) {
        isDisable = date_1.checkDateRange(startDate, this.getRangeCheck(), validRange) !== date_1.RANGE_CHECK_RESULT.IN_RANGE;
      }

      if (isDisable) {
        source.splice(i, 1);
        i--;
      }
    }

    return source;
  };

  BasePicker.prototype.getAvailableDate = function (d) {
    var validRange = this.validRange;
    var baseDate = d;

    if (validRange) {
      baseDate = date_1.getRangeDate(d, this.getRangeCheck(), validRange);
    }

    if (this.isAvailable(baseDate)) {
      return baseDate;
    }

    var dayjsObj = dayjs_1.default(baseDate);

    for (var i = 0; i < 9999; i++) {
      var a = dayjsObj.add(i, this.getStep()).toDate();

      if (this.isAvailable(a)) {
        return a;
      }

      var b = dayjsObj.add(0 - i, this.getStep()).toDate();

      if (this.isAvailable(b)) {
        return b;
      }
    }

    return baseDate;
  };

  BasePicker.prototype.handleChange = function (values) {
    var newDate = this.getAvailableDate(this.toDate(values));

    if (!('value' in this.props)) {
      this.setState({
        value: newDate
      });
    }

    if (this.props.onChange) {
      this.props.onChange(newDate);
    }
  };

  BasePicker.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        id = _a.id,
        className = _a.className,
        style = _a.style;
    return rax_1.createElement(context_1.default.Consumer, null, function (locale) {
      return rax_1.createElement(picker_1.default, {
        id: id,
        className: className,
        style: style,
        value: _this.toValues(_this.value),
        data: _this.getDataSource(locale || {}),
        onChange: _this.handleChange
      });
    });
  };

  BasePicker.prototype.hasAvailable = function () {
    var validRange = this.validRange;
    var disabledDate = this.props.disabledDate;
    return disabledDate || validRange;
  };

  BasePicker.prototype.isAvailable = function (d) {
    var validRange = this.validRange;
    var disabledDate = this.props.disabledDate;

    if (!this.hasAvailable()) {
      return true;
    }

    if (validRange) {
      if (date_1.checkDateRange(d, this.getRangeCheck(), validRange) !== date_1.RANGE_CHECK_RESULT.IN_RANGE) {
        return false;
      }
    }

    if (disabledDate) {
      return !disabledDate(d, this.getDisableType());
    }

    return true;
  };

  return BasePicker;
}(rax_1.Component);

exports.default = BasePicker;