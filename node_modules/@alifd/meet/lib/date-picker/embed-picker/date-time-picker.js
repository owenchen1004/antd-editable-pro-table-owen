"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var base_picker_1 = tslib_1.__importDefault(require("./base-picker"));

var utils_1 = require("../../time-picker/utils");

var date_1 = require("../../utils/date");

var utils_2 = require("../../utils");

var DateTimePicker = function (_super) {
  tslib_1.__extends(DateTimePicker, _super);

  function DateTimePicker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(DateTimePicker.prototype, "validRange", {
    get: function get() {
      if (!this.props.validRange) {
        return undefined;
      }

      var options = utils_1.getTimeOption(this.timeProps);
      return date_1.getRealRange(options, this.timeProps, this.props.validRange);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DateTimePicker.prototype, "timeProps", {
    get: function get() {
      var _a = this.props,
          showTime = _a.showTime,
          validRange = _a.validRange;
      var newRange;

      if (validRange) {
        var format = 'YYYY-MM-DD';
        var value = date_1.getRangeDate(date_1.toValidDate(this.props.value || this.state.value), {
          date: this.getDateOptions()
        }, validRange);

        if (dayjs_1.default(value).format(format) === dayjs_1.default(validRange[0]).format(format)) {
          newRange = [validRange[0], new Date(2020, 1, 1, 23, 59, 59)];
        }

        if (dayjs_1.default(value).format(format) === dayjs_1.default(validRange[1]).format(format)) {
          newRange = [new Date(2020, 1, 1, 0, 0, 0), validRange[1]];
        }
      }

      if (typeof showTime === 'object') {
        return tslib_1.__assign({
          validRange: newRange
        }, showTime);
      }

      return {
        validRange: newRange
      };
    },
    enumerable: false,
    configurable: true
  });

  DateTimePicker.prototype.getStep = function () {
    return 'day';
  };

  DateTimePicker.prototype.getDisableType = function () {
    return 'date';
  };

  DateTimePicker.prototype.getDataSource = function (locale) {
    var _a = this.props,
        validRange = _a.validRange,
        _b = _a.format,
        format = _b === void 0 ? 'YYYY-MM-DD' : _b;
    var result = [];
    var startDate = date_1.cloneDate(validRange[0]);
    startDate.setHours(0);
    startDate.setMinutes(0);
    startDate.setSeconds(0);
    startDate.setMilliseconds(0);

    for (var d = startDate; d.getTime() < validRange[1].getTime(); d = new Date(d.getTime() + 24 * 3600 * 1000)) {
      result.push({
        label: dayjs_1.default(d).format(format),
        value: d.getFullYear() + "," + d.getMonth() + "," + d.getDate()
      });
    }

    var timeProps = this.timeProps;

    if (!timeProps.locale && locale && !!utils_2.get(locale, 'locale.TimePicker', undefined)) {
      timeProps.locale = locale.locale.TimePicker;
    }

    var options = utils_1.getTimeOption(timeProps);
    return tslib_1.__spreadArrays([result], utils_1.getColumns(this.value, options, timeProps));
  };

  DateTimePicker.prototype.toDate = function (values) {
    var options = utils_1.getTimeOption(this.timeProps);
    var x = values.shift().split(',').map(function (it) {
      return parseInt(it, 10);
    });
    var d = utils_1.pickerToDate(values, options);
    d.setFullYear(x[0]);
    d.setDate(1);
    d.setMonth(x[1]);
    d.setDate(x[2]);
    return d;
  };

  DateTimePicker.prototype.getRangeCheck = function () {
    var showTime = this.props.showTime;
    var timeFormat = typeof showTime === 'object' ? showTime.format : undefined;
    return {
      date: this.getDateOptions(),
      time: utils_1.getTimeOption({
        format: timeFormat
      })
    };
  };

  DateTimePicker.prototype.toValues = function (d) {
    var options = utils_1.getTimeOption(this.timeProps);

    var values = tslib_1.__spreadArrays([d.getFullYear() + "," + d.getMonth() + "," + d.getDate()], utils_1.dateToPicker(d, options));

    return values;
  };

  DateTimePicker.prototype.getDateOptions = function () {
    var _a = this.props.format,
        format = _a === void 0 ? 'YYYY-MM-DD' : _a;
    return {
      hasYear: format.includes('Y'),
      hasMonth: format.includes('M'),
      hasDay: format.includes('D')
    };
  };

  return DateTimePicker;
}(base_picker_1.default);

exports.default = DateTimePicker;