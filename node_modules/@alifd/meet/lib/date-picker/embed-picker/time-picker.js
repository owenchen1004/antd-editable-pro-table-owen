"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var view_1 = tslib_1.__importDefault(require("../../view"));

var embed_picker_1 = tslib_1.__importDefault(require("../../time-picker/embed-picker"));

var date_indicator_1 = tslib_1.__importDefault(require("../date-indicator"));

var date_picker_1 = tslib_1.__importDefault(require("./date-picker"));

var mode_switch_1 = tslib_1.__importDefault(require("../mode-switch"));

var use_toggle_1 = tslib_1.__importDefault(require("../../utils/hooks/use-toggle"));

var DateTimePicker = function (props) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      defaultValue = props.defaultValue,
      value = props.value,
      _b = props.dateSelectTip,
      dateSelectTip = _b === void 0 ? '选择具体时间' : _b,
      _c = props.timeSelectTip,
      timeSelectTip = _c === void 0 ? '返回选择日期' : _c,
      disableDate = props.disableDate,
      validRange = props.validRange,
      onChange = props.onChange,
      others = tslib_1.__rest(props, ["prefix", "defaultValue", "value", "dateSelectTip", "timeSelectTip", "disableDate", "validRange", "onChange"]);

  var _d = use_toggle_1.default('date', 'time'),
      mode = _d[0],
      toggleMode = _d[1].toggle;

  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others), rax_1.createElement(date_indicator_1.default, {
    highlight: mode === 'date' ? 0 : 1,
    values: [dayjs_1.default(value).format('YYYY-MM-DD'), dayjs_1.default(value).format('HH:mm:ss')]
  }), mode === 'date' ? rax_1.createElement(date_picker_1.default, {
    defaultValue: defaultValue,
    value: value,
    validRange: validRange,
    onChange: function handleDateChange(d) {
      var curTime = dayjs_1.default(value);
      var newTime = dayjs_1.default(d).hour(curTime.hour()).minute(curTime.minute()).second(curTime.second());
      onChange(newTime.toDate());
    }
  }) : rax_1.createElement(embed_picker_1.default, {
    defaultValue: defaultValue,
    value: value,
    onChange: function handleTimeChange(d) {
      var curTime = dayjs_1.default(value);
      var newTime = dayjs_1.default(d).year(curTime.year()).month(curTime.month()).date(curTime.date());
      onChange(newTime.toDate());
    }
  }), rax_1.createElement(mode_switch_1.default, {
    defaultText: dateSelectTip,
    reverseText: timeSelectTip,
    value: mode === 'date' ? 'default' : 'reverse',
    onChange: toggleMode
  }));
};

exports.default = DateTimePicker;