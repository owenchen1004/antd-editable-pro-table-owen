"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var year_picker_1 = tslib_1.__importDefault(require("./year-picker"));

var utils_1 = require("./utils");

var utils_2 = require("../../utils");

var MonthPicker = function (_super) {
  tslib_1.__extends(MonthPicker, _super);

  function MonthPicker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MonthPicker.prototype.getStep = function () {
    return 'month';
  };

  MonthPicker.prototype.getDisableType = function () {
    return 'month';
  };

  MonthPicker.prototype.getRangeCheck = function () {
    return {
      date: {
        hasYear: true,
        hasMonth: true,
        hasDay: false
      }
    };
  };

  MonthPicker.prototype.getDataSource = function (locale) {
    var _this = this;

    var result = _super.prototype.getDataSource.call(this, locale);

    var monthLocale = utils_2.get(locale, 'locale.DatePicker.month', 'æœˆ');
    var year = dayjs_1.default().year(this.value.getFullYear());
    var startOfYear = year.startOf('year');
    var endOfYear = year.endOf('year');
    var range = this.validRange || [];
    var start = dayjs_1.default(range[0] || '-');
    var end = dayjs_1.default(range[1] || '-');
    var rangeOpts = utils_1.rangeOptions(1, 12, monthLocale);

    if (startOfYear.isValid() && start.isValid() && end.isValid()) {
      if (start.isBefore(startOfYear) && end.isAfter(startOfYear) && end.isBefore(endOfYear)) {
        rangeOpts = utils_1.rangeMonthOptions(startOfYear, end, monthLocale);
      } else if (start.isAfter(startOfYear) && end.isBefore(endOfYear)) {
        rangeOpts = utils_1.rangeMonthOptions(start, end, monthLocale);
      } else if (start.isAfter(startOfYear) && start.isBefore(endOfYear) && end.isAfter(endOfYear)) {
        rangeOpts = utils_1.rangeMonthOptions(start, endOfYear, monthLocale);
      }
    }

    result.push(this.filterDataSource(rangeOpts, function (d, it) {
      utils_1.resetTime(d);
      d.setDate(1);
      d.setFullYear(_this.value.getFullYear());
      d.setMonth(it.value - 1);
    }, 'month'));
    return result;
  };

  MonthPicker.prototype.toDate = function (values) {
    var d = _super.prototype.toDate.call(this, values);

    d.setMonth(values[1] - 1);
    return d;
  };

  MonthPicker.prototype.toValues = function (d) {
    var values = _super.prototype.toValues.call(this, d);

    values.push(d.getMonth() + 1);
    return values;
  };

  return MonthPicker;
}(year_picker_1.default);

exports.default = MonthPicker;