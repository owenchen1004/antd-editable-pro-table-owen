"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var view_1 = tslib_1.__importDefault(require("../../view"));

var select_drawer_1 = tslib_1.__importDefault(require("../../select-drawer"));

var form_1 = require("../../form");

var date_1 = require("../../utils/date");

var utils_1 = require("../../utils");

var utils_2 = require("../../time-picker/utils");

var utils_3 = require("../embed-picker/utils");

var DEFAULT_START_TIME = new Date('1970-01-01');
var DEFAULT_END_TIME = new Date('2100-12-31');

var BaseRangePicker = function (_super) {
  tslib_1.__extends(BaseRangePicker, _super);

  function BaseRangePicker(props) {
    var _this = _super.call(this, props) || this;

    _this.getPickerValidRange = function (step) {
      if (step === void 0) {
        step = 0;
      }

      var _a = _this.props.validRange,
          validRange = _a === void 0 ? [] : _a;

      if (step === 0) {
        return [date_1.toDate(validRange[0] || DEFAULT_START_TIME), date_1.toDate(validRange[1] || DEFAULT_END_TIME)];
      } else {
        return [date_1.toDate(_this.state.pickerValue[0] || validRange[0] || DEFAULT_START_TIME), date_1.toDate(validRange[1] || DEFAULT_END_TIME)];
      }
    };

    _this.handleChange = function (value) {
      var step = _this.state.step;

      if (step === 0) {
        _this.handleFirstStepChange(value);
      } else {
        _this.handleSecondStepChange(value);
      }
    };

    _this.handleFirstStepChange = function (value) {
      var pickerValue = _this.state.pickerValue;

      _this.setState({
        pickerValue: [value, pickerValue[1]]
      });
    };

    _this.handleSecondStepChange = function (value) {
      var pickerValue = _this.state.pickerValue;

      _this.setState({
        pickerValue: [pickerValue[0], value]
      });
    };

    _this.handleOk = function () {
      var _a = _this.props,
          onOk = _a.onOk,
          onChange = _a.onChange;
      var pickerValue = _this.state.pickerValue;
      var step = _this.state.step;
      var value = pickerValue;

      var _b = pickerValue || [],
          startDate = _b[0],
          endDate = _b[1];

      if (startDate && endDate && dayjs_1.default(startDate).isAfter(endDate)) {
        value = [startDate, startDate];
      }

      if (step === 1 && !('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      if (step === 0) {
        _this.scrollTo(1);

        return false;
      }

      _this.scrollTo(0);

      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      if (utils_1.isFunction(onOk)) {
        onOk(value);
      }

      if (utils_1.isFunction(onChange)) {
        onChange(value);
      }

      return true;
    };

    _this.handleCancel = function (reason) {
      var onCancel = _this.props.onCancel;
      var step = _this.state.step;

      if (reason === 'cancel-button' && step === 1) {
        _this.scrollTo(0);

        return false;
      }

      _this.scrollTo(0, 250);

      if (utils_1.isFunction(onCancel)) {
        onCancel(reason);
      }

      _this.setState({
        pickerValue: _this.getPickerValue(_this.props)
      });

      return true;
    };

    _this.handleClear = function () {
      var _a = _this.props,
          onClear = _a.onClear,
          onChange = _a.onChange;

      if (!('value' in _this.props)) {
        _this.setState({
          value: null
        });
      }

      if (onClear) {
        onClear();
      }

      if (onChange) {
        onChange(null);
      }
    };

    _this.state = {
      step: 0,
      value: props.value || props.defaultValue || null,
      pickerValue: _this.getPickerValue(props)
    };
    return _this;
  }

  Object.defineProperty(BaseRangePicker.prototype, "rangeType", {
    get: function get() {
      return 'second';
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseRangePicker.prototype, "timeFormat", {
    get: function get() {
      var showTime = this.props.showTime;
      return typeof showTime === 'object' && showTime.format ? showTime.format : utils_2.DEFAULT_FORMAT;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseRangePicker.prototype, "format", {
    get: function get() {
      var showTime = this.props.showTime;
      var format = this.props.format || 'YYYY-MM-DD';
      return showTime && !utils_3.withTime(format) ? format + " " + this.timeFormat : format;
    },
    enumerable: false,
    configurable: true
  });

  BaseRangePicker.prototype.getPickerValue = function (props) {
    var _a;

    var value = props.value,
        defaultValue = props.defaultValue;
    var today = dayjs_1.default().startOf(this.rangeType).toDate();

    if ((_a = this.state) === null || _a === void 0 ? void 0 : _a.value) {
      var _b = this.state.value,
          start = _b[0],
          end = _b[1];
      return [start || today, end || today];
    }

    if (value) {
      var start = value[0],
          end = value[1];
      return [start || today, end || today];
    }

    if (defaultValue) {
      var start = defaultValue[0],
          end = defaultValue[1];
      return [start || today, end || today];
    }

    return [today, today];
  };

  BaseRangePicker.prototype.scrollTo = function (step, wait) {
    var _this = this;

    if (wait) {
      setTimeout(function () {
        _this.setState({
          step: step
        });
      }, wait);
    } else {
      this.setState({
        step: step
      });
    }
  };

  BaseRangePicker.prototype.componentDidUpdate = function () {
    var _a, _b;

    if ('value' in this.props) {
      var _c = this.props,
          value = _c.value,
          defaultValue = _c.defaultValue;
      var newValue = value || defaultValue;

      if (!newValue && this.state.value) {
        this.setState({
          value: null
        });
        return;
      }

      if (!Array.isArray(newValue) || newValue === this.state.value) {
        return;
      }

      var d1 = date_1.toDate(newValue[0]);
      var d2 = date_1.toDate(newValue[1]);

      if (!date_1.isValidDate(d1) || !date_1.isValidDate(d2)) {
        return;
      }

      var newValueDate = [d1, d2];

      if (!this.state.value) {
        this.setState({
          value: newValueDate,
          pickerValue: newValueDate
        });
        return;
      }

      if (d1.getTime() === ((_a = date_1.toDate(this.state.value[0])) === null || _a === void 0 ? void 0 : _a.getTime()) && d2.getTime() === ((_b = date_1.toDate(this.state.value[1])) === null || _b === void 0 ? void 0 : _b.getTime())) {
        return;
      }

      this.setState({
        value: newValueDate,
        pickerValue: newValueDate
      });
    }
  };

  BaseRangePicker.prototype.render = function () {
    var _this = this;

    var _a = this.state,
        value = _a.value,
        step = _a.step,
        pickerValue = _a.pickerValue;

    var _b = this.props,
        _c = _b.prefix,
        prefix = _c === void 0 ? 'mt-' : _c,
        iconType = _b.iconType,
        placeholder = _b.placeholder,
        alignProp = _b.align,
        sizeProp = _b.size,
        disabled = _b.disabled,
        readOnly = _b.readOnly,
        hasClear = _b.hasClear,
        locale = _b.locale,
        others = tslib_1.__rest(_b, ["prefix", "iconType", "placeholder", "align", "size", "disabled", "readOnly", "hasClear", "locale"]);

    var clsPrefix = prefix + "datepicker-";
    var showNext = step === 0;
    var showPrev = step === 1;
    return rax_1.createElement(form_1.ItemContext.Consumer, null, function (context) {
      var _a;

      var isInsideForm = context.isInsideForm,
          contentAlign = context.contentAlign,
          contextSize = context.size;
      var align = alignProp || (isInsideForm ? contentAlign : 'left');
      var size = sizeProp || (isInsideForm ? contextSize : 'medium');
      var useRangeLocale = locale ? locale.ok && locale.cancel : null;
      return rax_1.createElement(select_drawer_1.default, tslib_1.__assign({}, others, {
        locale: useRangeLocale ? locale : undefined,
        prefix: prefix,
        content: value ? date_1.formatDate(dayjs_1.default(value[0]), _this.format) + " - " + date_1.formatDate(dayjs_1.default(value[1]), _this.format) : '',
        align: align,
        size: size,
        hasClear: hasClear,
        iconType: iconType,
        placeholder: placeholder,
        disabled: disabled,
        readOnly: readOnly,
        onOk: _this.handleOk,
        onCancel: _this.handleCancel,
        onClear: _this.handleClear,
        drawerTitle: showNext && locale ? locale.selectStartTime : locale.selectEndTime,
        okText: showNext && locale ? locale.next : null,
        cancelText: showPrev && locale ? locale.prev : null
      }), rax_1.createElement(view_1.default, {
        className: clsPrefix + "container"
      }, rax_1.createElement(view_1.default, {
        className: classnames_1.default(clsPrefix + "range", (_a = {}, _a[clsPrefix + "range--next"] = showPrev, _a))
      }, _this.renderFirstChild(pickerValue[0], _this.getPickerValidRange(0), _this.handleFirstStepChange), _this.renderSecondChild(pickerValue[1], _this.getPickerValidRange(1), _this.handleSecondStepChange))));
    });
  };

  return BaseRangePicker;
}(rax_1.Component);

exports.default = BaseRangePicker;