"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var view_1 = tslib_1.__importDefault(require("../../view"));

var select_drawer_1 = tslib_1.__importDefault(require("../../select-drawer"));

var form_1 = require("../../form");

var utils_1 = require("../../utils");

var date_1 = require("../../utils/date");

var BasePicker = function (_super) {
  tslib_1.__extends(BasePicker, _super);

  function BasePicker(props) {
    var _this = _super.call(this, props) || this;

    _this.ref = rax_1.createRef();

    _this.handleClear = function () {
      var _a = _this.props,
          onClear = _a.onClear,
          onChange = _a.onChange;

      if (!('value' in _this.props)) {
        _this.setState({
          pickerValue: new Date(),
          value: null
        });
      }

      if (onClear) {
        onClear();
      }

      if (onChange) {
        onChange(null);
      }
    };

    var v = date_1.toDate(props.value || props.defaultValue);
    var pv = new Date();

    if (date_1.isValidDate(v)) {
      pv = v;
    } else if (utils_1.isValidArray(_this.props.validRange) && !date_1.isBetween(new Date(), _this.props.validRange[0], _this.props.validRange[1], 'd')) {
      pv = _this.props.validRange[0];
    }

    _this.state = {
      value: date_1.isValidDate(v) ? v : null,
      pickerValue: pv
    };
    _this.handleOk = _this.handleOk.bind(_this);
    _this.handleCancel = _this.handleCancel.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleVisibleChange = _this.handleVisibleChange.bind(_this);
    _this.show = _this.show.bind(_this);
    _this.hide = _this.hide.bind(_this);
    return _this;
  }

  Object.defineProperty(BasePicker.prototype, "format", {
    get: function get() {
      return this.props.format || this.getDefaultFormat();
    },
    enumerable: false,
    configurable: true
  });

  BasePicker.prototype.handleChange = function (pickerValue) {
    this.setState({
      pickerValue: pickerValue
    });
  };

  BasePicker.prototype.handleOk = function () {
    var _a = this.props,
        onOk = _a.onOk,
        onChange = _a.onChange;
    var value = this.state.pickerValue;

    if (onChange) {
      onChange(value);
    }

    if (onOk) {
      onOk(value);
    }

    this.setState({
      value: value
    });
  };

  BasePicker.prototype.handleVisibleChange = function (to) {
    var onVisibleChange = this.props.onVisibleChange;

    if (onVisibleChange) {
      onVisibleChange(to);
    }
  };

  BasePicker.prototype.handleCancel = function (reason) {
    var onCancel = this.props.onCancel;
    this.setState({
      pickerValue: this.state.value || new Date()
    });

    if (utils_1.isFunction(onCancel)) {
      onCancel(reason);
    }
  };

  BasePicker.prototype.componentDidUpdate = function () {
    if ('value' in this.props) {
      var _a = this.props,
          value = _a.value,
          defaultValue = _a.defaultValue;
      var newValue = value || defaultValue;

      if (!newValue && this.state.value) {
        this.setState({
          value: null
        });
        return;
      }

      if (newValue === this.state.value) {
        return;
      }

      var newValueDate = date_1.toDate(newValue);

      if (!date_1.isValidDate(newValueDate)) {
        return;
      }

      if (!this.state.value) {
        var newPickerValue = date_1.toValidDate(value);
        this.setState({
          value: newValueDate,
          pickerValue: newPickerValue
        });
        return;
      }

      if (newValueDate.getTime() === this.state.value.getTime()) {
        return;
      }

      this.setState({
        value: newValueDate,
        pickerValue: date_1.toValidDate(value)
      });
    }
  };

  BasePicker.prototype.show = function () {
    var _a, _b;

    (_b = (_a = this.ref) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.show();
  };

  BasePicker.prototype.hide = function () {
    var _a, _b;

    (_b = (_a = this.ref) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.hide();
  };

  BasePicker.prototype.render = function () {
    var _this = this;

    var value = this.state.value;

    var _a = this.props,
        _b = _a.prefix,
        prefix = _b === void 0 ? 'mt-' : _b,
        iconType = _a.iconType,
        placeholder = _a.placeholder,
        alignProp = _a.align,
        sizeProp = _a.size,
        disabled = _a.disabled,
        readOnly = _a.readOnly,
        hasClear = _a.hasClear,
        others = tslib_1.__rest(_a, ["prefix", "iconType", "placeholder", "align", "size", "disabled", "readOnly", "hasClear"]);

    return rax_1.createElement(form_1.ItemContext.Consumer, null, function (context) {
      var isInsideForm = context.isInsideForm,
          contentAlign = context.contentAlign,
          contextSize = context.size;
      var align = alignProp || (isInsideForm ? contentAlign : 'left');
      var size = sizeProp || (isInsideForm ? contextSize : 'medium');
      return rax_1.createElement(select_drawer_1.default, tslib_1.__assign({}, others, {
        ref: _this.ref,
        prefix: prefix,
        hasClear: hasClear,
        content: value ? dayjs_1.default(value).format(_this.format) : '',
        align: align,
        size: size,
        iconType: iconType,
        placeholder: placeholder,
        disabled: disabled,
        readOnly: readOnly,
        onOk: _this.handleOk,
        onCancel: _this.handleCancel,
        onClear: _this.handleClear,
        onVisibleChange: _this.handleVisibleChange,
        disableScroll: true
      }), rax_1.createElement(view_1.default, {
        className: prefix + "datepicker-container"
      }, _this.renderPicker()));
    });
  };

  return BasePicker;
}(rax_1.Component);

exports.default = BasePicker;