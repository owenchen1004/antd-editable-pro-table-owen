"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var date_picker_1 = tslib_1.__importDefault(require("../embed-picker/date-picker"));

var minute_picker_1 = tslib_1.__importDefault(require("../embed-picker/minute-picker"));

var base_range_picker_1 = tslib_1.__importDefault(require("./base-range-picker"));

var locale_1 = require("../../locale");

var utils_1 = require("../embed-picker/utils");

var DateRangePicker = function (_super) {
  tslib_1.__extends(DateRangePicker, _super);

  function DateRangePicker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(DateRangePicker.prototype, "rangeType", {
    get: function get() {
      return 'date';
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DateRangePicker.prototype, "timeFormat", {
    get: function get() {
      var showTime = this.props.showTime;
      return typeof showTime === 'object' && showTime.format ? showTime.format : 'HH:mm';
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DateRangePicker.prototype, "format", {
    get: function get() {
      var showTime = this.props.showTime;
      var format = this.props.format || 'YYYY-MM-DD';
      return showTime && !utils_1.withTime(format) ? format + " " + this.timeFormat : format;
    },
    enumerable: false,
    configurable: true
  });

  DateRangePicker.prototype.renderFirstChild = function (value, validRange, onChange) {
    return this.renderBase(value, validRange, onChange);
  };

  DateRangePicker.prototype.renderSecondChild = function (value, validRange, onChange) {
    return this.renderBase(value, validRange, onChange);
  };

  DateRangePicker.prototype.renderBase = function (value, validRange, onChange) {
    var showTime = this.props.showTime;
    return showTime ? rax_1.createElement(minute_picker_1.default, {
      value: value,
      validRange: validRange,
      onChange: onChange
    }) : rax_1.createElement(date_picker_1.default, {
      value: value,
      validRange: validRange,
      onChange: onChange
    });
  };

  return DateRangePicker;
}(base_range_picker_1.default);

exports.default = locale_1.withLocale(DateRangePicker, {
  name: 'DateRangePicker',
  defaultLocale: {
    ok: '',
    cancel: '',
    prev: '上一步',
    next: '下一步',
    selectStartTime: '选择开始日期',
    selectEndTime: '选择结束日期'
  }
});