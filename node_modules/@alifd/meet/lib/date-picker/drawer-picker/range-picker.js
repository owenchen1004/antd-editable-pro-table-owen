"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var view_1 = tslib_1.__importDefault(require("../../view"));

var form_1 = require("../../form");

var select_drawer_1 = tslib_1.__importDefault(require("../../select-drawer"));

var calendar_1 = tslib_1.__importDefault(require("../../calendar"));

var date_time_picker_1 = tslib_1.__importDefault(require("../embed-picker/date-time-picker"));

var locale_1 = require("../../locale");

var utils_1 = require("../../utils");

var utils_2 = require("../../time-picker/utils");

var date_1 = require("../../utils/date");

var utils_3 = require("../embed-picker/utils");

var RangePicker = function (_super) {
  tslib_1.__extends(RangePicker, _super);

  function RangePicker(props) {
    var _this = _super.call(this, props) || this;

    _this.state = {
      step: 0,
      value: props.value || props.defaultValue || null,
      pickerValue: _this.getPickerValue(props)
    };
    _this.scrolling = false;
    _this.doScroll = _this.doScroll.bind(_this);
    _this.handleOk = _this.handleOk.bind(_this);
    _this.handleClear = _this.handleClear.bind(_this);
    _this.handleCancel = _this.handleCancel.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleVisibleChange = _this.handleVisibleChange.bind(_this);
    return _this;
  }

  RangePicker.prototype.getPickerValue = function (props) {
    if (this.state && this.state.value) {
      return this.state.value;
    }

    var today = new Date();
    return props.value || props.defaultValue || [today, new Date(today.getTime() + 86400000)];
  };

  RangePicker.prototype.handleChange = function (pickerValue) {
    this.setState({
      pickerValue: pickerValue
    });
  };

  RangePicker.prototype.handleOneChange = function (index, value) {
    var pickerValue = index === 0 ? [value] : [this.state.pickerValue[0], value];
    this.setState({
      pickerValue: pickerValue
    });
  };

  RangePicker.prototype.doScroll = function (to) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _this = this;

      return tslib_1.__generator(this, function () {
        if (this.scrolling || this.state.step === to) {
          return [2];
        }

        this.setState({
          step: to
        });
        this.scrolling = true;
        setTimeout(function () {
          return _this.scrolling = false;
        }, 200);
        return [2];
      });
    });
  };

  RangePicker.prototype.handleOk = function () {
    var _a = this.props,
        onOk = _a.onOk,
        showTime = _a.showTime,
        onChange = _a.onChange;
    var value = this.state.pickerValue;

    if (this.state.step === 0 && showTime) {
      this.setState({
        pickerValue: [this.state.pickerValue[0], this.state.pickerValue[0]]
      });
      this.doScroll(1);
      return false;
    }

    if (value.length === 1) {
      return;
    }

    if (!('value' in this.props)) {
      this.setState({
        value: value
      });
    }

    if (onChange) {
      onChange(value);
    }

    if (onOk) {
      onOk(value);
    }
  };

  RangePicker.prototype.handleVisibleChange = function (to) {
    var _a = this.props,
        onVisibleChange = _a.onVisibleChange,
        showTime = _a.showTime;

    if (onVisibleChange) {
      onVisibleChange(to);
    }

    if (to && showTime) {
      this.doScroll(0);
    }
  };

  RangePicker.prototype.handleCancel = function (reason) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var step, _a, showTime, onCancel;

      return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            step = this.state.step;
            _a = this.props, showTime = _a.showTime, onCancel = _a.onCancel;
            if (!(step === 1 && showTime)) return [3, 2];
            return [4, this.doScroll(0)];

          case 1:
            _b.sent();

            return [2, false];

          case 2:
            if (utils_1.isFunction(onCancel)) {
              onCancel(reason);
            }

            this.setState({
              pickerValue: this.getPickerValue(this.props)
            });
            return [2];
        }
      });
    });
  };

  RangePicker.prototype.handleClear = function () {
    var _a = this.props,
        onClear = _a.onClear,
        onChange = _a.onChange;

    if (!('value' in this.props)) {
      this.setState({
        value: null
      });
    }

    if (onClear) {
      onClear();
    }

    if (onChange) {
      onChange(null);
    }
  };

  Object.defineProperty(RangePicker.prototype, "timeFormat", {
    get: function get() {
      var showTime = this.props.showTime;
      return typeof showTime === 'object' && showTime.format ? showTime.format : utils_2.DEFAULT_FORMAT;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RangePicker.prototype, "format", {
    get: function get() {
      var showTime = this.props.showTime;
      var format = this.props.format || 'YYYY-MM-DD';
      return showTime && !utils_3.withTime(format) ? format + " " + this.timeFormat : format;
    },
    enumerable: false,
    configurable: true
  });

  RangePicker.prototype.componentDidUpdate = function () {
    var _a, _b;

    if ('value' in this.props) {
      var _c = this.props,
          value = _c.value,
          defaultValue = _c.defaultValue;
      var newValue = value || defaultValue;

      if (!newValue && this.state.value) {
        this.setState({
          value: null
        });
        return;
      }

      if (!Array.isArray(newValue) || newValue === this.state.value) {
        return;
      }

      var d1 = date_1.toDate(newValue[0]);
      var d2 = date_1.toDate(newValue[1]);

      if (!date_1.isValidDate(d1) || !date_1.isValidDate(d2)) {
        return;
      }

      var newValueDate = [d1, d2];

      if (!this.state.value) {
        this.setState({
          value: newValueDate,
          pickerValue: newValueDate
        });
        return;
      }

      if (d1.getTime() === ((_a = date_1.toDate(this.state.value[0])) === null || _a === void 0 ? void 0 : _a.getTime()) && d2.getTime() === ((_b = date_1.toDate(this.state.value[1])) === null || _b === void 0 ? void 0 : _b.getTime())) {
        return;
      }

      this.setState({
        value: newValueDate,
        pickerValue: newValueDate
      });
    }
  };

  RangePicker.prototype.render = function () {
    var _this = this;

    var _a = this.state,
        value = _a.value,
        step = _a.step,
        _b = _a.pickerValue,
        pickerValue = _b === void 0 ? [] : _b;

    var _c = this.props,
        _d = _c.prefix,
        prefix = _d === void 0 ? 'mt-' : _d,
        iconType = _c.iconType,
        placeholder = _c.placeholder,
        alignProp = _c.align,
        sizeProp = _c.size,
        disabled = _c.disabled,
        readOnly = _c.readOnly,
        hasClear = _c.hasClear,
        showTime = _c.showTime,
        validRange = _c.validRange,
        locale = _c.locale,
        disabledDate = _c.disabledDate,
        others = tslib_1.__rest(_c, ["prefix", "iconType", "placeholder", "align", "size", "disabled", "readOnly", "hasClear", "showTime", "validRange", "locale", "disabledDate"]);

    if (showTime && !validRange) {
      throw new Error('DatePicker with showTime must have validRange');
    }

    var showNext = showTime && step === 0;
    var showPrev = showTime && step === 1;
    var clsPrefix = prefix + "datepicker-";
    var nextRange = showTime && step === 1 ? [pickerValue[0], validRange[1]] : validRange;
    return rax_1.createElement(form_1.ItemContext.Consumer, null, function (context) {
      var _a;

      var isInsideForm = context.isInsideForm,
          contentAlign = context.contentAlign,
          contextSize = context.size;
      var align = alignProp || (isInsideForm ? contentAlign : 'left');
      var size = sizeProp || (isInsideForm ? contextSize : 'medium');
      var useRangeLocale = locale ? locale.ok && locale.cancel : null;
      return rax_1.createElement(select_drawer_1.default, tslib_1.__assign({}, others, {
        locale: useRangeLocale ? locale : undefined,
        prefix: prefix,
        content: value ? date_1.formatDate(value[0], _this.format) + " - " + date_1.formatDate(value[1], _this.format) : '',
        align: align,
        size: size,
        hasClear: hasClear,
        iconType: iconType,
        placeholder: placeholder,
        disabled: disabled,
        readOnly: readOnly,
        onOk: _this.handleOk,
        onCancel: _this.handleCancel,
        onClear: _this.handleClear,
        onVisibleChange: _this.handleVisibleChange,
        drawerTitle: showTime ? showNext && locale ? locale.selectStartTime : locale.selectEndTime : undefined,
        okText: showTime && showNext && locale ? locale.next : undefined,
        cancelText: showTime && showPrev && locale ? locale.prev : undefined
      }), rax_1.createElement(view_1.default, {
        className: clsPrefix + "container"
      }, showTime ? rax_1.createElement(view_1.default, {
        className: classnames_1.default(clsPrefix + "range", (_a = {}, _a[clsPrefix + "range--next"] = showPrev, _a))
      }, rax_1.createElement(date_time_picker_1.default, {
        className: clsPrefix + "range-item",
        showTime: showTime,
        validRange: validRange,
        value: pickerValue[0],
        disabledDate: disabledDate,
        onChange: _this.handleOneChange.bind(_this, 0)
      }), rax_1.createElement(date_time_picker_1.default, {
        className: clsPrefix + "range-item",
        showTime: showTime,
        validRange: nextRange,
        value: pickerValue[1],
        disabledDate: disabledDate,
        onChange: _this.handleOneChange.bind(_this, 1)
      })) : rax_1.createElement(calendar_1.default, {
        prefix: prefix,
        shape: "range",
        mode: "month",
        enableYearPicker: true,
        value: pickerValue,
        disabledDate: disabledDate,
        validRange: validRange,
        onSelect: _this.handleChange
      })));
    });
  };

  return RangePicker;
}(rax_1.Component);

exports.default = locale_1.withLocale(RangePicker, {
  name: 'DatePicker',
  defaultLocale: {
    ok: '',
    cancel: '',
    prev: '上一步',
    next: '下一步',
    selectStartTime: '选择开始时间',
    selectEndTime: '选择结束时间'
  }
});