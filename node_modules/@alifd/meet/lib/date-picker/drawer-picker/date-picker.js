"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var calendar_1 = tslib_1.__importDefault(require("../../calendar"));

var date_picker_1 = tslib_1.__importDefault(require("../embed-picker/date-picker"));

var time_picker_1 = tslib_1.__importDefault(require("../embed-picker/time-picker"));

var minute_picker_1 = tslib_1.__importDefault(require("../embed-picker/minute-picker"));

var utils_1 = require("../../time-picker/utils");

var utils_2 = require("../embed-picker/utils");

var base_picker_1 = tslib_1.__importDefault(require("./base-picker"));

var DatePicker = function (_super) {
  tslib_1.__extends(DatePicker, _super);

  function DatePicker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DatePicker.prototype.renderPicker = function () {
    var _a = this.props,
        showTime = _a.showTime,
        validRange = _a.validRange,
        mode = _a.mode;

    if (mode === 'picker') {
      var embedPicker = null;

      if (showTime) {
        var format = showTime.format;

        if (format === 'HH:mm') {
          embedPicker = rax_1.createElement(minute_picker_1.default, {
            value: this.state.pickerValue,
            disabledDate: this.props.disabledDate,
            validRange: validRange,
            onChange: this.handleChange
          });
        } else {
          embedPicker = rax_1.createElement(time_picker_1.default, {
            value: this.state.pickerValue,
            disabledDate: this.props.disabledDate,
            validRange: validRange,
            onChange: this.handleChange
          });
        }
      } else {
        embedPicker = rax_1.createElement(date_picker_1.default, {
          value: this.state.pickerValue,
          disabledDate: this.props.disabledDate,
          validRange: validRange,
          onChange: this.handleChange
        });
      }

      return embedPicker;
    }

    if (showTime) {
      if (!validRange) {
        throw new Error('DatePicker with showTime must have validRange');
      }

      var format = showTime.format;
      return rax_1.createElement(calendar_1.default, {
        shape: "panel",
        mode: "month",
        enableYearPicker: true,
        enableTimePicker: true,
        timeFormat: format,
        value: this.state.pickerValue,
        disabledDate: this.props.disabledDate,
        validRange: validRange,
        onSelect: this.handleChange
      });
    } else {
      return rax_1.createElement(calendar_1.default, {
        shape: "panel",
        mode: "month",
        enableYearPicker: true,
        value: this.state.pickerValue,
        disabledDate: this.props.disabledDate,
        validRange: this.props.validRange,
        onSelect: this.handleChange
      });
    }
  };

  Object.defineProperty(DatePicker.prototype, "timeFormat", {
    get: function get() {
      var showTime = this.props.showTime;
      return typeof showTime === 'object' && showTime.format ? showTime.format : utils_1.DEFAULT_FORMAT;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DatePicker.prototype, "format", {
    get: function get() {
      var showTime = this.props.showTime;
      var format = this.props.format || 'YYYY-MM-DD';
      return showTime && !utils_2.withTime(format) ? format + " " + this.timeFormat : format;
    },
    enumerable: false,
    configurable: true
  });

  DatePicker.prototype.getDefaultFormat = function () {
    return '';
  };

  return DatePicker;
}(base_picker_1.default);

exports.default = DatePicker;