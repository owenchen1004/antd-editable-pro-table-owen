"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var utils_1 = require("../utils");

var tree_1 = require("../utils/tree");

var view_1 = tslib_1.__importDefault(require("../view"));

var radio_1 = tslib_1.__importDefault(require("./radio"));

var getInitValue = function (props) {
  var ret = [];

  if ('value' in props) {
    ret = props.value;
  } else if (!utils_1.isUndef(props.defaultValue)) {
    ret = props.defaultValue;
  }

  return ret;
};

var RadioGroup = function (props, ref) {
  var _a = props.size,
      size = _a === void 0 ? 'medium' : _a,
      _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      _c = props.direction,
      direction = _c === void 0 ? 'ver' : _c,
      children = props.children,
      groupDisabled = props.disabled,
      defaultValue = props.defaultValue,
      value = props.value,
      readOnly = props.readOnly,
      onChange = props.onChange,
      className = props.className,
      isPreview = props.isPreview,
      renderPreview = props.renderPreview,
      previewClassNameProp = props.previewClassName,
      previewStyle = props.previewStyle,
      dataSource = props.dataSource,
      labelAlign = props.labelAlign,
      others = tslib_1.__rest(props, ["size", "prefix", "direction", "children", "disabled", "defaultValue", "value", "readOnly", "onChange", "className", "isPreview", "renderPreview", "previewClassName", "previewStyle", "dataSource", "labelAlign"]);

  var _d = rax_1.useState(getInitValue(props)),
      groupValue = _d[0],
      setGroupValue = _d[1];

  var isControlled = ('value' in props);
  var previewClassName = classnames_1.default(previewClassNameProp, prefix + "form-item-input--preview-" + size);
  var groupCls = classnames_1.default(prefix + "radio-group", prefix + "radio-group--" + direction, prefix + "radio-group--" + labelAlign + "-" + size, className);
  rax_1.useEffect(function () {
    var newValue = getInitValue(props);

    if (isControlled) {
      setGroupValue(newValue);
    }
  }, [value, groupValue]);

  var handleChange = function (selected, radioValue, e, isDisabled) {
    if (!isDisabled && !readOnly) {
      if (!isControlled) {
        setGroupValue(radioValue);
      }

      if (selected && utils_1.isFunction(onChange)) {
        onChange(radioValue, e);
      }
    }
  };

  var content;
  var ds = dataSource;

  if (!ds && rax_children_1.default.count(children) > 0) {
    ds = utils_1.getDataSourceFromChildren(children);
  }

  if (utils_1.isValidArray(ds)) {
    content = ds.map(function (item, index) {
      var _a;

      var itemData = {
        style: {},
        value: null,
        checked: false,
        label: '',
        text: '',
        disabled: false,
        size: size
      };

      var itemOnClick = item.onClick,
          itemOnChange = item.onChange,
          itemClassName = item.className,
          itemLabel = item.label,
          itemText = item.text,
          itemRest = tslib_1.__rest(item, ["onClick", "onChange", "className", "label", "text"]);

      if (utils_1.isString(item) || utils_1.isNumber(item)) {
        itemData.value = item;
      } else {
        itemData = tslib_1.__assign(tslib_1.__assign({}, itemData), itemRest);
      }

      var isDisabled = groupDisabled || itemData.disabled;
      var label = itemLabel || itemText || itemData.value;
      var isLast = index === ds.length - 1;
      return rax_1.createElement(radio_1.default, tslib_1.__assign({}, itemData, {
        key: "radio_" + index,
        className: classnames_1.default(itemClassName, (_a = {}, _a[prefix + "radio-item--" + direction + "-" + size] = !isLast, _a)),
        disabled: isDisabled,
        checked: itemData.checked || itemData.value === groupValue,
        onChange: function (selected, e) {
          if (utils_1.isFunction(itemOnChange)) {
            itemOnChange(selected, e);
          }

          handleChange(selected, itemData.value, e, isDisabled);
        },
        onClick: itemOnClick
      }), label);
    });
  }

  if (isPreview) {
    var arr = tree_1.getItemsFromDataSource(ds, groupValue);
    var previewItem = {};

    if (utils_1.isValidArray(arr)) {
      previewItem = arr[0];
    }

    if (utils_1.isFunction(renderPreview)) {
      return rax_1.createElement(view_1.default, {
        className: previewClassName,
        style: previewStyle
      }, renderPreview(previewItem));
    }

    return rax_1.createElement(rax_text_1.default, {
      className: previewClassName,
      style: previewStyle
    }, previewItem.label || previewItem.text);
  }

  return rax_1.createElement(view_1.default, tslib_1.__assign({
    ref: ref,
    className: groupCls
  }, others), content);
};

RadioGroup.displayName = 'Radio.Group';
exports.default = rax_1.forwardRef(RadioGroup);