"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var utils_1 = require("../utils");

var getInitCheckedStatus = function (props) {
  if ('checked' in props) {
    return props.checked;
  } else if (props.defaultChecked) {
    return props.defaultChecked;
  }
};

var Radio = function (props, ref) {
  var _a = props.size,
      size = _a === void 0 ? 'medium' : _a,
      _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      children = props.children,
      checked = props.checked,
      onChange = props.onChange,
      disabled = props.disabled,
      className = props.className,
      defaultChecked = props.defaultChecked,
      readOnly = props.readOnly,
      onClick = props.onClick,
      value = props.value,
      label = props.label,
      text = props.text,
      others = tslib_1.__rest(props, ["size", "prefix", "children", "checked", "onChange", "disabled", "className", "defaultChecked", "readOnly", "onClick", "value", "label", "text"]);

  var _c = rax_1.useState(getInitCheckedStatus(props)),
      selected = _c[0],
      setSelected = _c[1];

  var selectedPrefix = selected ? '--selected' : '--unselected';
  var disabledPrefix = disabled ? '-disabled' : '';
  var circleCls = classnames_1.default([prefix + "radio-circle", prefix + "radio-circle--" + size, prefix + "radio-circle" + selectedPrefix + disabledPrefix]);
  var pointCls = classnames_1.default([prefix + "radio-point", prefix + "radio-point--" + size, prefix + "radio-point" + selectedPrefix + disabledPrefix]);
  var textCls = classnames_1.default([prefix + "radio-text", prefix + "radio-text--" + size, prefix + "radio-text" + selectedPrefix + disabledPrefix]);
  rax_1.useEffect(function () {
    if ('checked' in props) {
      setSelected(props.checked);
    }
  });

  var handleClick = function (e) {
    if (!disabled && !readOnly) {
      if (utils_1.isFunction(onChange)) {
        onChange(!selected, e);
      }

      if (utils_1.isFunction(onClick)) {
        onClick(e);
      }

      if (!('checked' in props)) {
        setSelected(!selected);
      }
    }
  };

  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    className: classnames_1.default(prefix + "radio-container", prefix + "radio-container--" + size, className),
    onClick: handleClick
  }), rax_1.createElement(view_1.default, {
    className: circleCls
  }, rax_1.createElement(view_1.default, {
    className: pointCls
  })), utils_1.isString(children) || utils_1.isNumber(children) ? rax_1.createElement(rax_text_1.default, {
    className: textCls
  }, children) : rax_1.createElement(view_1.default, {
    className: textCls
  }, children));
};

Radio.displayName = 'Radio';
exports.default = rax_1.forwardRef(Radio);