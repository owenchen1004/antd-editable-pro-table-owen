"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var view_1 = tslib_1.__importDefault(require("../view"));

var utils_1 = require("./utils");

var Track = function (props, ref) {
  var size = props.size,
      prefix = props.prefix,
      min = props.min,
      max = props.max,
      ratio = props.ratio,
      disabled = props.disabled,
      marks = props.marks,
      rangeWidth = props.rangeWidth,
      marksPosition = props.marksPosition;
  var statePrefix = disabled ? '--disabled' : '';

  var _a = rax_1.useMemo(function () {
    var markEl = [];
    var labelEl = [];

    var getKey = function (key) {
      if (marks instanceof Object && !Array.isArray(marks)) {
        return marks[key];
      }

      return key;
    };

    utils_1.handleMarks(marks, min, max).forEach(function (key) {
      var _a;

      var left = (key - min) / (max - min) * rangeWidth;
      var isActive = utils_1.isInRange((key - min) / (max - min), ratio);
      markEl.push(rax_1.createElement(view_1.default, {
        key: "mark-" + key,
        className: classnames_1.default(prefix + "range--mark", isActive ? prefix + "range--mark--active" : '', isActive ? prefix + "range--mark" + statePrefix : ''),
        style: {
          left: left + utils_1.unit
        }
      }));
      labelEl.push(rax_1.createElement(view_1.default, {
        key: "label-" + key,
        className: classnames_1.default([prefix + "range--label", prefix + "range--label--" + marksPosition, (_a = {}, _a[prefix + "range--label--active"] = isActive, _a)]),
        style: {
          left: left + utils_1.unit
        }
      }, getKey(key)));
    });
    return [markEl, labelEl];
  }, [marks, min, max, ratio, rangeWidth, prefix, statePrefix]),
      markItems = _a[0],
      labelItems = _a[1];

  var selectedLeft = ratio.length === 2 ? ratio[0] * rangeWidth : 0;
  var width = ratio.length === 2 ? Math.abs(ratio[1] - ratio[0]) * rangeWidth : ratio[0] * rangeWidth;
  return rax_1.createElement(view_1.default, {
    ref: ref,
    className: classnames_1.default(prefix + "range--track", prefix + "range--track--" + size, prefix + "range--track" + statePrefix)
  }, rax_1.createElement(view_1.default, {
    ref: ref,
    className: classnames_1.default(prefix + "range--track--selected", prefix + "range--track--" + size, prefix + "range--track--selected" + statePrefix),
    style: {
      left: selectedLeft + utils_1.unit,
      width: width + utils_1.unit
    }
  }), rax_1.createElement(view_1.default, {
    style: {
      position: 'static'
    }
  }, markItems), rax_1.createElement(view_1.default, {
    style: {
      position: 'static'
    }
  }, labelItems));
};

exports.default = rax_1.forwardRef(Track);