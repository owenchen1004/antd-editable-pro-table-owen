"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var create_children_1 = tslib_1.__importDefault(require("./create-children"));

var getInitCheckedValue = function (props) {
  if ('checked' in props) {
    return props.checked;
  } else if (props.defaultChecked) {
    return props.defaultChecked;
  } else {
    return false;
  }
};

var SelectableTag = function (props, ref) {
  var _a, _b;

  var _c = props.prefix,
      prefix = _c === void 0 ? 'mt-' : _c,
      _d = props.size,
      size = _d === void 0 ? 'medium' : _d,
      _e = props.type,
      type = _e === void 0 ? 'normal' : _e,
      _f = props.disabled,
      disabled = _f === void 0 ? false : _f,
      _g = props.checked,
      checked = _g === void 0 ? false : _g,
      _h = props.defaultChecked,
      defaultChecked = _h === void 0 ? false : _h,
      _j = props.onChange,
      onChange = _j === void 0 ? function () {} : _j,
      _k = props.style,
      style = _k === void 0 ? {} : _k,
      children = props.children,
      className = props.className,
      others = tslib_1.__rest(props, ["prefix", "size", "type", "disabled", "checked", "defaultChecked", "onChange", "style", "children", "className"]);

  var shape = 'selectable';
  var initCheckedValue = getInitCheckedValue(props);

  var _l = rax_1.useState(initCheckedValue),
      hasChecked = _l[0],
      setChecked = _l[1];

  var cssType = type === 'normal' ? 'outline' : 'solid';
  var tagCls = classnames_1.default(className, prefix + "tag", prefix + "tag--" + size, prefix + "tag--" + shape + "-" + cssType, (_a = {}, _a[prefix + "tag--" + shape + "-" + cssType + "-selected-disabled"] = disabled && hasChecked, _a[prefix + "tag--" + shape + "-" + cssType + "-disabled"] = disabled, _a[prefix + "tag--" + shape + "-" + cssType + "-selected"] = hasChecked, _a));
  var selectCls = classnames_1.default(prefix + "tag--selectable-select");
  var selectIconCls = classnames_1.default(prefix + "tag-icon--" + size + "-select", (_b = {}, _b[prefix + "tag--" + shape + "-" + cssType + "-icon-selected-disabled"] = disabled && hasChecked, _b));

  var handleClick = function (e) {
    if (disabled) {
      return;
    }

    if (onChange) {
      onChange(!hasChecked, e);
    }

    if (!('checked' in props)) {
      setChecked(!hasChecked);
    }
  };

  rax_1.useEffect(function () {
    if ('checked' in props) {
      setChecked(checked);
    }
  }, [checked]);
  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    className: tagCls,
    onClick: handleClick,
    style: props.style
  }), create_children_1.default(children, {
    textCls: prefix + "tag-font--" + size,
    iconCls: prefix + "tag-font--" + size
  }, prefix, size), type === 'normal' && hasChecked ? rax_1.createElement(view_1.default, {
    className: selectCls,
    onChange: handleClick
  }, rax_1.createElement(icon_1.default, {
    name: "select",
    className: selectIconCls
  })) : null);
};

SelectableTag.displayName = 'SelectableTag';
exports.default = rax_1.forwardRef(SelectableTag);