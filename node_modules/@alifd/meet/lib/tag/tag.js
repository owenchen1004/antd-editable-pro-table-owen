"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var view_1 = tslib_1.__importDefault(require("../view"));

var create_children_1 = tslib_1.__importDefault(require("./create-children"));

var utils_1 = require("../utils");

var Tag = function (props, ref) {
  var _a;

  var _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      _c = props.size,
      size = _c === void 0 ? 'medium' : _c,
      _d = props.type,
      type = _d === void 0 ? 'normal' : _d,
      _e = props.disabled,
      disabled = _e === void 0 ? false : _e,
      _f = props.onClick,
      onClick = _f === void 0 ? function () {} : _f,
      _g = props.style,
      style = _g === void 0 ? {} : _g,
      children = props.children,
      color = props.color,
      textColorProp = props.textColor,
      className = props.className,
      others = tslib_1.__rest(props, ["prefix", "size", "type", "disabled", "onClick", "style", "children", "color", "textColor", "className"]);

  var cssType = type === 'normal' ? 'outline' : 'solid';
  var tagCls = classnames_1.default(className, prefix + "tag", prefix + "tag--" + size, prefix + "tag--readonly-" + size, prefix + "tag--normal-" + cssType, (_a = {}, _a[prefix + "tag--normal-" + cssType + "-disabled"] = disabled, _a));
  var textColor = textColorProp;

  if (utils_1.isString(color) && !textColor) {
    if (type === 'primary') {
      textColor = '#fff';
    } else {
      textColor = color;
    }
  }

  var newStyle = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, utils_1.isString(color) && type === 'primary' ? {
    backgroundColor: color
  } : {
    borderColor: color
  }), utils_1.isString(textColor) ? {
    color: textColor
  } : null), style);

  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    className: tagCls,
    onClick: function handleClick(e) {
      if (disabled) {
        return;
      }

      if (onClick) {
        onClick(e);
      }
    },
    style: newStyle
  }), create_children_1.default(children, {
    textCls: prefix + "tag-font--" + size,
    iconCls: prefix + "tag-font--" + size
  }, prefix, size));
};

Tag.displayName = 'Tag';
exports.default = rax_1.forwardRef(Tag);