"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var create_children_1 = tslib_1.__importDefault(require("./create-children"));

var utils_1 = require("../utils");

var ClosableTag = function (props, ref) {
  var _a;

  var _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      _c = props.size,
      size = _c === void 0 ? 'medium' : _c,
      _d = props.type,
      type = _d === void 0 ? 'normal' : _d,
      _e = props.closeArea,
      closeArea = _e === void 0 ? 'tail' : _e,
      _f = props.disabled,
      disabled = _f === void 0 ? false : _f,
      _g = props.onClose,
      onClose = _g === void 0 ? function () {} : _g,
      _h = props.onClick,
      onClick = _h === void 0 ? function () {} : _h,
      _j = props.afterClose,
      afterClose = _j === void 0 ? function () {} : _j,
      _k = props.style,
      style = _k === void 0 ? {} : _k,
      children = props.children,
      className = props.className,
      others = tslib_1.__rest(props, ["prefix", "size", "type", "closeArea", "disabled", "onClose", "onClick", "afterClose", "style", "children", "className"]);

  var shape = 'closable';

  var _l = rax_1.useState(false),
      closed = _l[0],
      setClosed = _l[1];

  var cssType = type === 'normal' ? 'outline' : 'solid';
  var tagCls = classnames_1.default(className, prefix + "tag", prefix + "tag--" + size, prefix + "tag--" + shape + "-" + cssType, (_a = {}, _a[prefix + "tag--" + shape + "-" + cssType + "-disabled"] = disabled, _a));
  var closeCls = classnames_1.default(prefix + "tag--closable-close");
  var closeIconCls = classnames_1.default(prefix + "tag-icon--" + size + "-close");

  var handleClose = function (e) {
    utils_1.stopPropagation(e);

    if (disabled) {
      return;
    }

    var isClosed = !(onClose && onClose() === false);
    setClosed(isClosed);
    afterClose(e);
  };

  if (closed) {
    return null;
  }

  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    className: tagCls,
    onClick: function handleClick(e) {
      if (disabled) {
        return;
      }

      if (closeArea === 'tag') {
        handleClose(e);
      }

      onClick(e);
    },
    style: props.style
  }), create_children_1.default(children, {
    textCls: prefix + "tag-font--" + size,
    iconCls: prefix + "tag-font--" + size
  }, prefix, size), rax_1.createElement(view_1.default, {
    className: closeCls,
    onClick: handleClose
  }, rax_1.createElement(icon_1.default, {
    name: "close",
    className: closeIconCls
  })));
};

ClosableTag.displayName = 'ClosableTag';
exports.default = rax_1.forwardRef(ClosableTag);