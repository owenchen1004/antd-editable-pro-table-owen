"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var vibrate_1 = require("@uni/vibrate");

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var safe_area_1 = tslib_1.__importDefault(require("../safe-area"));

var button_1 = tslib_1.__importDefault(require("../button"));

var modal_1 = tslib_1.__importDefault(require("../modal"));

var locale_1 = require("../locale");

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var utils_1 = require("../utils");

var FooterWrapper = function (wrapperProps) {
  var centered = wrapperProps.centered,
      children = wrapperProps.children,
      others = tslib_1.__rest(wrapperProps, ["centered", "children"]);

  if (centered) {
    return rax_1.createElement(view_1.default, tslib_1.__assign({}, others), children);
  }

  return rax_1.createElement(rax_1.Fragment, null, children);
};

var MESSAGE_TYPE = {
  alert: 'warning',
  confirm: 'help',
  success: 'success',
  error: 'error',
  warning: 'warning',
  notice: 'prompt',
  help: 'help'
};

var Dialog = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      _b = props.visible,
      visible = _b === void 0 ? false : _b,
      _c = props.type,
      type = _c === void 0 ? 'normal' : _c,
      _d = props.platform,
      platform = _d === void 0 ? 'ios' : _d,
      titleProp = props.title,
      content = props.content,
      contentClassName = props.contentClassName,
      closeModeProp = props.closeMode,
      footerActionsProp = props.footerActions,
      _e = props.vibrative,
      vibrative = _e === void 0 ? false : _e,
      _f = props.footer,
      footer = _f === void 0 ? true : _f,
      _g = props.centered,
      centered = _g === void 0 ? false : _g,
      _h = props.okProps,
      okProps = _h === void 0 ? {
    text: ''
  } : _h,
      _j = props.cancelProps,
      cancelProps = _j === void 0 ? {
    text: ''
  } : _j,
      className = props.className,
      showIconProp = props.showIcon,
      children = props.children,
      _k = props.onOk,
      onOk = _k === void 0 ? function () {} : _k,
      _l = props.onCancel,
      onCancel = _l === void 0 ? function () {} : _l,
      _m = props.onClose,
      onClose = _m === void 0 ? function () {} : _m,
      others = tslib_1.__rest(props, ["prefix", "visible", "type", "platform", "title", "content", "contentClassName", "closeMode", "footerActions", "vibrative", "footer", "centered", "okProps", "cancelProps", "className", "showIcon", "children", "onOk", "onCancel", "onClose"]);

  var showIcon = showIconProp === true ? true : !centered;
  var closeMode = rax_1.useMemo(function () {
    if (closeModeProp) {
      return closeModeProp;
    }

    return centered ? ['ok', 'mask', 'cancel'] : ['close', 'ok', 'mask', 'cancel'];
  }, [closeModeProp, centered]);
  var footerActions = rax_1.useMemo(function () {
    if (footerActionsProp) {
      return footerActionsProp;
    }

    if (['alert', 'success', 'error', 'notice', 'warning', 'help'].indexOf(type) > -1) {
      return ['ok'];
    }

    return ['cancel', 'ok'];
  }, [footerActionsProp, type]);
  var iconName = rax_1.useMemo(function () {
    return MESSAGE_TYPE[type] || '';
  }, [type]);
  var locale = locale_1.useLocale('Dialog', others, zh_cn_1.default.Dialog);
  var clsPrefix = prefix + "dialog";
  var closable = closeMode.includes('close');
  var clses = rax_1.useMemo(function () {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

    return {
      dialog: classnames_1.default("" + clsPrefix, className, (_a = {}, _a[clsPrefix + "--centered"] = centered, _a)),
      header: classnames_1.default(clsPrefix + "-header", (_b = {}, _b[clsPrefix + "-header--centered"] = centered, _b)),
      closeWrapper: classnames_1.default(clsPrefix + "-close-wrapper", (_c = {}, _c[clsPrefix + "-close-wrapper--content"] = !titleProp && closable, _c[clsPrefix + "-close-wrapper--centered"] = centered && closable, _c)),
      close: classnames_1.default(clsPrefix + "-close", (_d = {}, _d[clsPrefix + "-close--centered"] = centered, _d)),
      container: classnames_1.default(clsPrefix + "-container", (_e = {}, _e[clsPrefix + "-container--centered " + clsPrefix + "-container--" + platform] = centered, _e)),
      icon: classnames_1.default((_f = {}, _f[clsPrefix + "-icon"] = true, _f[clsPrefix + "-icon--" + type] = true, _f[clsPrefix + "-icon--centered"] = centered, _f)),
      title: classnames_1.default(clsPrefix + "-title", (_g = {}, _g[clsPrefix + "-title--centered"] = centered, _g[clsPrefix + "-title--" + platform] = platform && centered, _g[clsPrefix + "-title--fullwidth"] = titleProp && closable, _g)),
      content: classnames_1.default(contentClassName, (_h = {}, _h[clsPrefix + "-content"] = !centered, _h[clsPrefix + "-content--centered " + clsPrefix + "-content--centered-" + platform] = centered, _h)),
      innerContent: classnames_1.default(clsPrefix + "-inner-content", (_j = {}, _j[clsPrefix + "-inner-content--fullwidth"] = !closable || closable && titleProp, _j[clsPrefix + "-inner-content--centered"] = centered, _j)),
      footer: classnames_1.default((_k = {}, _k[clsPrefix + "-footer"] = !centered, _k[clsPrefix + "-footer--centered " + clsPrefix + "-footer--centered-" + platform] = centered, _k))
    };
  }, [clsPrefix, className, centered, closable, titleProp, platform]);
  var okBtnText = okProps.text || locale.ok;
  var cancelText = cancelProps.text || locale.cancel;
  var handleIconClose = rax_1.useCallback(function (e) {
    if (closable) {
      onClose('close', e);
    }
  }, [closable, onClose]);
  rax_1.useEffect(function () {
    if (visible === true && vibrative === true) {
      vibrate_1.vibrateLong({}).then(function () {});
    }
  }, [visible]);

  var titleEl = function renderTitle() {
    var title = titleProp || null;

    if (title) {
      title = utils_1.isString(title) ? rax_1.createElement(rax_text_1.default, {
        className: clses.title,
        numberOfLines: 3
      }, title) : rax_1.createElement(view_1.default, {
        className: clses.title
      }, title);
    }

    return title;
  }();

  return rax_1.createElement(modal_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    visible: visible,
    maskClosable: closeMode.includes('mask'),
    placement: centered === true ? 'center' : 'bottom',
    containerClassName: clses.dialog,
    onClose: onClose
  }), rax_1.createElement(view_1.default, {
    className: clses.container
  }, showIcon && centered && iconName ? rax_1.createElement(icon_1.default, {
    name: iconName,
    className: clses.icon,
    size: "xxl"
  }) : null, rax_1.createElement(view_1.default, {
    className: clsPrefix + "-main"
  }, titleEl || !centered && iconName || closable && titleProp ? rax_1.createElement(view_1.default, {
    className: clses.header
  }, showIcon && !centered && iconName ? rax_1.createElement(icon_1.default, {
    name: iconName,
    className: clses.icon,
    size: "s"
  }) : null, titleEl, closable && titleProp ? rax_1.createElement(view_1.default, {
    className: clses.closeWrapper
  }, rax_1.createElement(icon_1.default, {
    name: "close",
    className: clses.close,
    size: "xxs",
    onClick: handleIconClose
  })) : null) : null, rax_1.createElement(view_1.default, {
    className: clses.content
  }, rax_1.createElement(view_1.default, {
    className: clses.innerContent
  }, function renderInnerContent() {
    var innerContent = content;

    if (utils_1.isString(content)) {
      innerContent = rax_1.createElement(rax_text_1.default, {
        className: clsPrefix + "-content-text"
      }, content);
    } else if (children) {
      innerContent = children;
    }

    return innerContent;
  }()), !titleProp && closable ? rax_1.createElement(view_1.default, {
    className: clses.closeWrapper
  }, rax_1.createElement(icon_1.default, {
    name: "close",
    className: clses.close,
    size: "xxs",
    onClick: handleIconClose
  })) : null))), function renderFooter() {
    var wrapperClassName = classnames_1.default(clsPrefix + "-btn-col", clsPrefix + "-btn-col--" + platform);

    if (footer) {
      if (!utils_1.isBoolean(footer)) {
        return rax_1.createElement(view_1.default, {
          className: clses.footer
        }, footer);
      } else if (utils_1.isValidArray(footerActions)) {
        return rax_1.createElement(view_1.default, {
          className: clses.footer
        }, footerActions.map(function (actionType, index) {
          var _a;

          var buttonProps = okProps;

          if (typeof actionType === 'object') {
            buttonProps = actionType;
          } else if (actionType === 'cancel') {
            buttonProps = cancelProps;
          }

          var text = buttonProps.text,
              btnClassNameProp = buttonProps.className,
              model = buttonProps.model,
              _onClick = buttonProps.onClick,
              restProps = tslib_1.__rest(buttonProps, ["text", "className", "model", "onClick"]);

          var isCancel = actionType === 'cancel';
          var btnClassName = classnames_1.default(btnClassNameProp, (_a = {}, _a[clsPrefix + "-btn"] = !centered, _a[clsPrefix + "-btn--centered"] = centered, _a[clsPrefix + "-btn--centered-" + actionType] = centered, _a));
          var btnModel = model || 'text';

          if (!centered && !model) {
            btnModel = isCancel ? 'outline' : 'solid';
          }

          var btnText;

          if (text) {
            btnText = text;
          } else if (isCancel) {
            btnText = cancelText;
          } else {
            btnText = okBtnText;
          }

          return rax_1.createElement(FooterWrapper, {
            key: "mt_dialog_" + index,
            centered: centered,
            className: centered ? wrapperClassName : ''
          }, !(index === 0) ? rax_1.createElement(view_1.default, {
            className: clsPrefix + "-footer-gap"
          }) : null, rax_1.createElement(button_1.default, tslib_1.__assign({
            key: "mt_dialog_" + index,
            type: "primary",
            size: "large",
            model: btnModel
          }, restProps, {
            className: btnClassName,
            onClick: function onClick(e) {
              if (utils_1.isString(actionType)) {
                if (isCancel) {
                  onCancel(e);
                } else {
                  onOk(e);
                }

                if (closeMode.includes(actionType)) {
                  onClose(actionType, e);
                }
              } else if (actionType.onClick) {
                actionType.onClick(e);
              }
            }
          }), btnText));
        }));
      }
    }

    return null;
  }(), !centered ? rax_1.createElement(safe_area_1.default, null) : null);
};

Dialog.displayName = 'Dialog';
exports.default = rax_1.forwardRef(Dialog);