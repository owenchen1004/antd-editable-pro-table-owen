"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultLocalFilter = exports.getValidEvtValues = exports.isEqualItems = exports.isSelected = exports.innerRenderSelection = exports.getScrollHeight = exports.getPreviewValue = exports.getInitValues = exports.removeItemFromArray = void 0;

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var env_1 = require("@uni/env");

var utils_1 = require("../utils");

var select_value_1 = tslib_1.__importDefault(require("./section/select-value"));

function removeItemFromArray(arr, val) {
  if (arr === void 0) {
    arr = [];
  }

  if (val === void 0) {
    val = '';
  }

  return arr.filter(function (v) {
    return v.value !== val;
  });
}

exports.removeItemFromArray = removeItemFromArray;

function getInitValues(props) {
  var defaultValue = props.defaultValue,
      value = props.value;
  var initValues;

  if ('value' in props) {
    initValues = value;
  } else if (!utils_1.isUndef(defaultValue)) {
    initValues = defaultValue;
  }

  if (!Array.isArray(initValues)) {
    if (!utils_1.isUndef(initValues)) {
      initValues = [initValues];
    } else {
      initValues = [];
    }
  }

  return initValues;
}

exports.getInitValues = getInitValues;

function getPreviewValue(props) {
  var useDetailValue = props.useDetailValue,
      children = props.children,
      dataSource = props.dataSource,
      mode = props.mode;
  var initValues = getInitValues(props);
  var ds = dataSource || [];
  var arr = [];

  if (!dataSource && rax_children_1.default.count(children) > 0) {
    ds = utils_1.getDataSourceFromChildren(children);
  }

  if (useDetailValue && utils_1.isValidArray(initValues)) {
    arr = initValues;
  } else if (utils_1.isValidArray(initValues)) {
    arr = initValues.map(function (v) {
      var rs = ds.find(function (it) {
        return it.value === v;
      });
      return rs || {
        label: v,
        value: v
      };
    });
  }

  if (mode === 'single') {
    return utils_1.isValidArray(arr) ? arr[0] : '';
  }

  return arr;
}

exports.getPreviewValue = getPreviewValue;

function getScrollHeight() {
  if (env_1.isWeb) {
    return (screen.availHeight - 200) / (screen.width / 750) + "rpx";
  } else if (utils_1.isMiniappPlatform) {
    return utils_1.windowHeight - 100;
  }

  return 0;
}

exports.getScrollHeight = getScrollHeight;

function innerRenderSelection(items, values) {
  var labels = !Array.isArray(items) && items.label ? [items.label] : items.map(function (item) {
    return item.label;
  });

  if (labels.length === 0) {
    return null;
  }

  return rax_1.createElement(select_value_1.default, tslib_1.__assign(tslib_1.__assign({}, values), {
    items: labels
  }));
}

exports.innerRenderSelection = innerRenderSelection;

function isSelected(curItems, value) {
  var rs = utils_1.findInArray(curItems, function (item) {
    return item.value === value;
  });
  return !!rs;
}

exports.isSelected = isSelected;

function isEqualItems(arr1, arr2, strictMode) {
  if (arr1 === void 0) {
    arr1 = [];
  }

  if (arr2 === void 0) {
    arr2 = [];
  }

  if (strictMode === void 0) {
    strictMode = false;
  }

  if (!Array.isArray(arr1) || !Array.isArray(arr2) || arr1.length !== arr2.length) {
    return false;
  }

  var filterFn = function (item) {
    return item.value;
  };

  if (strictMode) {
    filterFn = function (item) {
      return item.label + item.value;
    };
  }

  return arr1.map(filterFn).sort().toString() === arr2.map(filterFn).sort().toString();
}

exports.isEqualItems = isEqualItems;

function getValidEvtValues(_a) {
  var selectedItems = _a.selectedItems,
      useDetailValue = _a.useDetailValue,
      isSingle = _a.isSingle;
  var value = isSingle ? null : [];
  var items = isSingle ? {} : [];

  if (utils_1.isValidArray(selectedItems)) {
    value = selectedItems[0].value;

    if (useDetailValue) {
      value = selectedItems;
    } else if (!isSingle) {
      value = selectedItems.map(function (item) {
        return item.value;
      });
    }

    items = isSingle ? selectedItems[0] : selectedItems;
  }

  return {
    value: value,
    items: items
  };
}

exports.getValidEvtValues = getValidEvtValues;

function defaultLocalFilter(searchText, item) {
  try {
    return new RegExp(searchText).test(item.label);
  } catch (e) {
    return item.label.includes(searchText);
  }
}

exports.defaultLocalFilter = defaultLocalFilter;