"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var form_1 = require("../form");

var bottom_button_1 = tslib_1.__importDefault(require("../bottom-button"));

var select_drawer_1 = tslib_1.__importDefault(require("../select-drawer"));

var locale_1 = require("../locale");

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var hooks_1 = require("../utils/hooks");

var utils_1 = require("../utils");

var select_body_1 = tslib_1.__importDefault(require("./section/select-body"));

var select_search_1 = tslib_1.__importDefault(require("./section/select-search"));

var selected_list_drawer_1 = tslib_1.__importDefault(require("./section/selected-list-drawer"));

var context_1 = tslib_1.__importDefault(require("./context"));

var util_1 = require("./util");

var AUTO_CLOSE_WAITING_TIME = 300;

var compare = function (a, b) {
  return util_1.isEqualItems(a, b, true);
};

var BaseSelect = function (props, ref) {
  var _a;

  var _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      placeholder = props.placeholder,
      _value = props.value,
      type = props.type,
      defaultValue = props.defaultValue,
      className = props.className,
      mode = props.mode,
      hasSearch = props.hasSearch,
      children = props.children,
      _dataSource = props.dataSource,
      displayType = props.displayType,
      disabled = props.disabled,
      autoConfirm = props.autoConfirm,
      hasClear = props.hasClear,
      filterLocal = props.filterLocal,
      transferSearchToOption = props.transferSearchToOption,
      _c = props.filter,
      filter = _c === void 0 ? util_1.defaultLocalFilter : _c,
      renderSelection = props.renderSelection,
      useDetailValue = props.useDetailValue,
      _locale = props.locale,
      sizeProp = props.size,
      notFoundContent = props.notFoundContent,
      onVisibleChange = props.onVisibleChange,
      _d = props.onChange,
      onChange = _d === void 0 ? function () {} : _d,
      _e = props.onClear,
      onClear = _e === void 0 ? function () {} : _e,
      _f = props.onCancel,
      onCancel = _f === void 0 ? function () {} : _f,
      _g = props.onOk,
      onOk = _g === void 0 ? function () {} : _g,
      onSearch = props.onSearch,
      drawerClassName = props.drawerClassName,
      others = tslib_1.__rest(props, ["prefix", "placeholder", "value", "type", "defaultValue", "className", "mode", "hasSearch", "children", "dataSource", "displayType", "disabled", "autoConfirm", "hasClear", "filterLocal", "transferSearchToOption", "filter", "renderSelection", "useDetailValue", "locale", "size", "notFoundContent", "onVisibleChange", "onChange", "onClear", "onCancel", "onOk", "onSearch", "drawerClassName"]);

  var _h = rax_1.useContext(form_1.ItemContext),
      isInsideForm = _h.isInsideForm,
      contextSize = _h.size;

  var size = sizeProp || (isInsideForm ? contextSize : 'medium');

  var _j = rax_1.useState(''),
      searchVal = _j[0],
      setSearchVal = _j[1];

  var _k = rax_1.useState(false),
      drawerVisible = _k[0],
      setDrawerVisible = _k[1];

  var selectLocale = locale_1.useLocale('Select', props, zh_cn_1.default.Select);
  var selectDrawerLocal = locale_1.useLocale('SelectDrawer', {}, zh_cn_1.default.SelectDrawer);
  var clsPrefix = prefix + "select";
  var baseSelectRef = rax_1.useRef(null);
  var dataSource = rax_1.useMemo(function () {
    return utils_1.getDataSource(props.dataSource, props.children);
  }, [props.dataSource, props.children]);

  var _l = hooks_1.useValue(props, [], {
    fitValue: function fitValue(v) {
      if (v === '' || v === null) {
        return [];
      }

      var x = Array.isArray(v) ? v : [v];

      if (useDetailValue) {
        return x;
      } else if (utils_1.isValidArray(x)) {
        return x.map(function (item) {
          var tmp = utils_1.findInArray(dataSource, function (d) {
            return d.value === item;
          });
          return tmp || {
            label: item,
            value: item
          };
        });
      } else {
        return [];
      }
    },
    compare: compare
  }),
      value = _l[0],
      setValue = _l[1],
      isControlled = _l[2];

  var _m = rax_1.useState(value),
      innerValue = _m[0],
      setInnerValue = _m[1];

  var _o = rax_1.useState(false),
      confirmVisible = _o[0],
      setConfirmVisible = _o[1];

  var isSingle = mode === 'single';
  var searchRef = rax_1.useRef(null);
  var realHasSearch = props.hasSearch || props.showSearch;
  rax_1.useMemo(function () {
    if (isControlled && !compare(value, innerValue)) {
      setInnerValue(value);
    }
  }, [value]);
  var handleCancel = rax_1.useCallback(function (reason) {
    if (searchRef && searchRef.current) {
      searchRef.current.setValue('');
    }

    if (utils_1.isFunction(onCancel)) {
      onCancel(reason);
    }

    setTimeout(function () {
      setInnerValue(value);
    }, 300);
  }, [value]);
  var contextValue = rax_1.useMemo(function () {
    return tslib_1.__assign(tslib_1.__assign({}, props), {
      hasSearch: realHasSearch,
      dataSource: dataSource,
      type: type,
      mode: mode,
      size: size,
      prefix: prefix,
      value: value,
      innerValue: innerValue,
      displayType: displayType,
      locale: selectLocale,
      onChange: function onChange(v) {
        setInnerValue(v);
      },
      searchValue: searchVal,
      setSearchValue: setSearchVal
    });
  }, [props, realHasSearch, dataSource, type, mode, size, prefix, value, innerValue, displayType, selectLocale, searchVal]);
  rax_1.useEffect(function () {
    if (drawerVisible && isSingle && !realHasSearch && autoConfirm === true) {
      setTimeout(function () {
        var _a;

        if ((_a = baseSelectRef === null || baseSelectRef === void 0 ? void 0 : baseSelectRef.current) === null || _a === void 0 ? void 0 : _a.ok) {
          baseSelectRef.current.ok();
        }
      }, AUTO_CLOSE_WAITING_TIME);
    }
  }, [innerValue]);
  rax_1.useImperativeHandle(ref, function () {
    return Object.assign(baseSelectRef.current);
  });
  return rax_1.createElement(rax_1.Fragment, null, rax_1.createElement(select_drawer_1.default, tslib_1.__assign({}, others, {
    hideButton: isSingle && autoConfirm === true,
    size: size,
    ref: baseSelectRef,
    showToolbar: !realHasSearch,
    type: type,
    disabled: disabled,
    placeholder: placeholder,
    hasClear: hasClear,
    className: classnames_1.default(clsPrefix, className),
    content: renderSelection ? renderSelection(value) : util_1.innerRenderSelection(value, contextValue),
    onClear: function handleClear() {
      if (!isControlled) {
        setValue([]);
        setInnerValue([]);

        if (searchRef === null || searchRef === void 0 ? void 0 : searchRef.current) {
          searchRef.current.setValue('');
        }
      }

      if (utils_1.isFunction(onClear)) {
        onClear();
      }

      if (utils_1.isFunction(onChange)) {
        var _a = util_1.getValidEvtValues({
          selectedItems: [],
          useDetailValue: useDetailValue,
          isSingle: isSingle
        }),
            val = _a.value,
            items = _a.items;

        onChange(val, 'clear', items);
      }
    },
    onCancel: handleCancel,
    onOk: function handleOk() {
      if (!isControlled) {
        setValue(innerValue);
      }

      var changed = !util_1.isEqualItems(value, innerValue);

      if (utils_1.isFunction(onOk)) {
        onOk();
      }

      if (changed && utils_1.isFunction(onChange)) {
        var _a = util_1.getValidEvtValues({
          selectedItems: innerValue,
          isSingle: isSingle,
          useDetailValue: useDetailValue
        }),
            val = _a.value,
            items = _a.items;

        onChange(val, 'change', items);
      }

      if (searchRef === null || searchRef === void 0 ? void 0 : searchRef.current) {
        searchRef.current.setValue('');
      }
    },
    onVisibleChange: function handleVisibleChange(visible) {
      setDrawerVisible(visible);

      if (utils_1.isFunction(onVisibleChange)) {
        onVisibleChange(visible);
      }
    },
    drawerClassName: classnames_1.default(drawerClassName, (_a = {}, _a[clsPrefix + "--searchable"] = realHasSearch, _a))
  }), rax_1.createElement(context_1.default.Provider, {
    value: contextValue
  }, rax_1.createElement(rax_1.Fragment, null, realHasSearch && rax_1.createElement(select_search_1.default, {
    ref: searchRef
  }), dataSource.length === 0 && !realHasSearch ? rax_1.createElement(view_1.default, {
    className: clsPrefix + "-drawer-content " + clsPrefix + "drawer-drawer--empty"
  }, utils_1.isString(notFoundContent) ? rax_1.createElement(rax_text_1.default, {
    className: clsPrefix + "drawer-drawer-empty-text"
  }, notFoundContent) : rax_1.createElement(view_1.default, {
    className: clsPrefix + "drawer-drawer-empty-text"
  }, notFoundContent)) : rax_1.createElement(view_1.default, {
    className: clsPrefix + "-option-list"
  }, rax_1.createElement(select_body_1.default, {
    emptySearchText: selectLocale.emptySearchText,
    searchToOptionBtnText: selectLocale.searchToOptionBtnText
  })), realHasSearch && rax_1.createElement(view_1.default, {
    className: clsPrefix + "-drawer-footer"
  }, rax_1.createElement(bottom_button_1.default, {
    okText: selectDrawerLocal.ok,
    cancelText: selectDrawerLocal.cancel,
    onOk: function handleBottomOk() {
      var _a;

      if ((_a = baseSelectRef === null || baseSelectRef === void 0 ? void 0 : baseSelectRef.current) === null || _a === void 0 ? void 0 : _a.ok) {
        baseSelectRef.current.ok();
      }
    },
    onCancel: function handleBottomCancel() {
      var _a;

      if ((_a = baseSelectRef === null || baseSelectRef === void 0 ? void 0 : baseSelectRef.current) === null || _a === void 0 ? void 0 : _a.cancel) {
        baseSelectRef.current.cancel('cancel-button');
      }
    }
  }, !isSingle && rax_1.createElement(view_1.default, {
    className: clsPrefix + "-footer-counter",
    onClick: function handleTotalClick() {
      setConfirmVisible(true);
    }
  }, rax_1.createElement(rax_text_1.default, null, selectLocale.totalPrefixText), rax_1.createElement(rax_text_1.default, {
    className: clsPrefix + "-total-num"
  }, innerValue.length), rax_1.createElement(rax_text_1.default, null, selectLocale.totalSuffixText))))))), !isSingle && rax_1.createElement(selected_list_drawer_1.default, {
    prefix: contextValue.prefix,
    innerValue: contextValue.innerValue,
    locale: contextValue.locale,
    visible: confirmVisible,
    onOk: function handleConfirmDone(items) {
      setInnerValue(items);
      setConfirmVisible(false);
    },
    onCancel: function handleConfirmCancel() {
      setConfirmVisible(false);
    }
  }));
};

var RefBaseSelect = rax_1.forwardRef(BaseSelect);
RefBaseSelect.displayName = 'BaseSelect';
RefBaseSelect.defaultProps = {
  mode: 'single',
  type: 'normal',
  displayType: 'normal',
  disabled: false,
  hideButton: false,
  transferSearchToOption: false,
  filterLocal: false,
  hasClear: false,
  autoConfirm: false,
  notFoundContent: '',
  stickyOnTop: false
};
exports.default = RefBaseSelect;