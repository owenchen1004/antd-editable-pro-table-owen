"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var form_1 = require("../../form");

var tag_select_1 = tslib_1.__importDefault(require("../../tag-select"));

var view_1 = tslib_1.__importDefault(require("../../view"));

var tag_1 = tslib_1.__importDefault(require("../../tag"));

var hooks_1 = require("../../utils/hooks");

var SelectValue = function (props) {
  var _a, _b;

  var items = props.items,
      prefix = props.prefix,
      displayType = props.displayType,
      sizeProp = props.size,
      disabled = props.disabled,
      type = props.type;

  var _c = rax_1.useContext(form_1.ItemContext),
      isInsideForm = _c.isInsideForm,
      labelAlign = _c.labelAlign,
      contextSize = _c.size;

  var clsPrefix = prefix + "select";
  var isInverse = type === 'inverse';
  var size = sizeProp || (isInsideForm ? contextSize : 'medium');
  var ref = rax_1.useRef(hooks_1.guid('select-val-'));

  switch (displayType) {
    case 'tag':
      return rax_1.createElement(tag_select_1.default, {
        disabled: disabled,
        isPreview: true,
        inlineMode: displayType === 'tag' && isInsideForm && labelAlign === 'inset',
        prefix: prefix,
        size: size,
        dataSource: items
      });

    case 'tag-value':
      return rax_1.createElement(view_1.default, {
        className: classnames_1.default(clsPrefix + "-tag-value", (_a = {}, _a[clsPrefix + "-value--inverse"] = isInverse, _a[clsPrefix + "-value--disabled"] = disabled, _a[clsPrefix + "-value--inverse-disabled"] = disabled && isInverse, _a))
      }, items.map(function (val) {
        return rax_1.createElement(tag_1.default, {
          key: ref.current + "-" + val,
          className: clsPrefix + "-tag-item",
          type: "primary",
          size: size
        }, "" + val);
      }));

    default:
      return rax_1.createElement(view_1.default, {
        className: classnames_1.default((_b = {}, _b[clsPrefix + "-value--inverse"] = isInverse, _b[clsPrefix + "-value--disabled"] = disabled, _b[clsPrefix + "-value--inverse-disabled"] = disabled && isInverse, _b))
      }, items.join(','));
  }
};

exports.default = SelectValue;