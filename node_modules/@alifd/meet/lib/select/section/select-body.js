"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var list_1 = tslib_1.__importDefault(require("../../list"));

var menu_1 = tslib_1.__importDefault(require("../../menu"));

var button_1 = tslib_1.__importDefault(require("../../button"));

var tag_select_1 = tslib_1.__importDefault(require("../../tag-select"));

var utils_1 = require("../../utils");

var view_1 = tslib_1.__importDefault(require("../../view"));

var context_1 = tslib_1.__importDefault(require("../context"));

var typography_1 = tslib_1.__importDefault(require("../../typography"));

var option_1 = tslib_1.__importDefault(require("../option"));

var util_1 = require("../util");

var Text = typography_1.default.Text;

var sort = function (arr, value) {
  var selectedArr = [];
  var unSelectedArr = [];
  arr.forEach(function (item) {
    if (util_1.isSelected(value, item.value)) {
      selectedArr.push(item);
    } else {
      unSelectedArr.push(item);
    }
  });
  return tslib_1.__spreadArrays(selectedArr, unSelectedArr);
};

var SelectBody = function (props) {
  var _a = rax_1.useContext(context_1.default),
      prefix = _a.prefix,
      size = _a.size,
      displayType = _a.displayType,
      disabled = _a.disabled,
      mode = _a.mode,
      dataSource = _a.dataSource,
      _b = _a.filterLocal,
      filterLocal = _b === void 0 ? true : _b,
      _c = _a.stickyOnTop,
      stickyOnTop = _c === void 0 ? true : _c,
      _d = _a.filter,
      filter = _d === void 0 ? util_1.defaultLocalFilter : _d,
      searchValue = _a.searchValue,
      innerValue = _a.innerValue,
      value = _a.value,
      transferSearchToOption = _a.transferSearchToOption,
      _onChange = _a.onChange,
      onSearchAdd = _a.onSearchAdd;

  var _e = props.searchToOptionBtnText,
      searchToOptionBtnText = _e === void 0 ? '' : _e,
      _f = props.emptySearchText,
      emptySearchText = _f === void 0 ? '' : _f;
  var renderWithTag = displayType === 'tag';
  var clsPrefix = prefix + "select";
  var filteredDataSource = filterLocal ? utils_1.mergeDataSource(dataSource, tslib_1.__spreadArrays(value, innerValue)).filter(function (item) {
    return filter(searchValue, item);
  }) : dataSource;

  if (mode === 'multiple' && stickyOnTop) {
    filteredDataSource = sort(filteredDataSource, value);
  }

  if (!renderWithTag && mode === 'single') {
    return rax_1.createElement(menu_1.default, {
      prefix: prefix,
      size: size,
      selectMode: "single",
      dataSource: filteredDataSource,
      selectedKeys: innerValue.map(function (it) {
        return it.value;
      }),
      onItemClick: function onItemClick(_, item) {
        var onClick = item.onClick;

        if (utils_1.isFunction(onClick)) {
          onClick(item.value);
        }

        _onChange([{
          label: item.label,
          value: item.value
        }]);
      }
    });
  }

  if (renderWithTag) {
    return rax_1.createElement(view_1.default, {
      className: prefix + "select--tag-" + size
    }, rax_1.createElement(tag_select_1.default, {
      prefix: prefix,
      mode: mode,
      size: size,
      value: innerValue.map(function (it) {
        return it.value;
      }),
      dataSource: filteredDataSource,
      onChange: function onChange(v) {
        if (utils_1.isNil(v)) {
          _onChange([]);

          return;
        }

        var newValue = Array.isArray(v) ? v : [v];
        var newItems = newValue.map(function (x) {
          return utils_1.findInArray(filteredDataSource, function (item) {
            return item.value === x;
          });
        });

        _onChange(newItems);
      }
    }));
  }

  var options = filteredDataSource.map(function (it) {
    return rax_1.createElement(option_1.default, tslib_1.__assign({
      key: it.value,
      selected: util_1.isSelected(innerValue, it.value),
      disabled: disabled || it.disabled,
      onClick: function onClick() {
        var selectedItem = utils_1.findInArray(innerValue, function (item) {
          return item.value === it.value;
        });

        if (selectedItem) {
          _onChange(util_1.removeItemFromArray(innerValue, selectedItem.value));
        } else {
          _onChange(tslib_1.__spreadArrays(innerValue, [{
            label: it.label,
            value: it.value
          }]));
        }
      }
    }, it), it.label);
  });
  return transferSearchToOption ? rax_1.createElement(list_1.default, null, searchValue && !utils_1.findInArray(filteredDataSource, function (it) {
    return "" + it.label === "" + searchValue;
  }) && rax_1.createElement(option_1.default, {
    isNew: true,
    onClick: function onClick() {
      if (onSearchAdd) {
        onSearchAdd(searchValue, innerValue);
      }

      _onChange(tslib_1.__spreadArrays(innerValue, [{
        label: searchValue,
        value: searchValue,
        userAdd: true
      }]));
    }
  }, rax_1.createElement(view_1.default, {
    style: {
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between'
    }
  }, rax_1.createElement("span", null, searchValue), rax_1.createElement(button_1.default, {
    size: "small",
    type: "primary",
    model: "outline"
  }, searchToOptionBtnText))), options) : utils_1.isValidArray(filteredDataSource) ? rax_1.createElement(list_1.default, null, options) : rax_1.createElement(view_1.default, {
    className: clsPrefix + "-search-empty"
  }, rax_1.createElement(Text, {
    className: clsPrefix + "-search-empty-tip",
    type: "body-2"
  }, utils_1.replaceMessage(emptySearchText, {
    searchVal: searchValue
  })));
};

exports.default = SelectBody;