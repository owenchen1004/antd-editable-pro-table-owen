"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeDataSource = exports.getDataSource = exports.getDataSourceFromChildren = exports.stopPropagation = exports.px2rpx = exports.makeChain = void 0;

var tslib_1 = require("tslib");

var env_1 = require("./env");

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var fp_1 = require("./fp");

function makeChain() {
  var fns = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    fns[_i] = arguments[_i];
  }

  if (fns.length === 1) {
    return fns[0];
  }

  return function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var i = 0;
    var j = fns.length;

    for (; i < j; i++) {
      if (fns[i] && fns[i].apply) {
        fns[i].apply(this, args);
      }
    }
  };
}

exports.makeChain = makeChain;

function px2rpx(val) {
  return val / env_1.screenRate;
}

exports.px2rpx = px2rpx;

function stopPropagation(e) {
  if (!e) {
    return;
  }

  if (e.stopPropagation) {
    e.stopPropagation();
    return;
  }

  if (typeof e.originalEvent === 'object' && e.originalEvent.stopPropagation) {
    e.originalEvent.stopPropagation();
  }
}

exports.stopPropagation = stopPropagation;

function getDataSourceFromChildren(children) {
  if (!children) {
    return [];
  }

  return rax_children_1.default.map(children, function (child) {
    var _a = child.props,
        value = _a.value,
        text = _a.text,
        childText = _a.children,
        rest = tslib_1.__rest(_a, ["value", "text", "children"]);

    return tslib_1.__assign({
      value: value,
      label: childText || text
    }, rest);
  });
}

exports.getDataSourceFromChildren = getDataSourceFromChildren;

function getDataSource(dataSource, children) {
  var ds = dataSource;

  if (!dataSource && rax_children_1.default.count(children) > 0) {
    ds = getDataSourceFromChildren(children);
  }

  return ds || [];
}

exports.getDataSource = getDataSource;

function mergeDataSource(ds1, ds2) {
  var tmpArr = [];
  ds2.forEach(function (it) {
    if ((it === null || it === void 0 ? void 0 : it.value) && !fp_1.findInArray(tslib_1.__spreadArrays(ds1, tmpArr), function (_it) {
      return _it.value === it.value;
    })) {
      tmpArr.push(it);
    }
  });
  return tslib_1.__spreadArrays(tmpArr, ds1);
}

exports.mergeDataSource = mergeDataSource;