"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNotUndef = exports.getValueFromEvents = exports.replaceMessage = exports.removeFromArray = exports.nextTick = exports.isInvalidValue = exports.isNil = exports.isBoolean = exports.isFunction = exports.isUndef = exports.isNumber = exports.isString = exports.range = exports.findInArray = exports.isValidArray = exports.get = exports.noop = void 0;

function noop() {}

exports.noop = noop;

function get(source, path, defaultValue) {
  var paths = path.replace(/\[(\d+)]/g, '.$1').split('.');
  var result = source;

  for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
    var p = paths_1[_i];
    result = Object(result)[p];

    if (result === undefined) {
      return defaultValue;
    }
  }

  return result;
}

exports.get = get;

function isValidArray(obj) {
  return Array.isArray(obj) && obj.length > 0;
}

exports.isValidArray = isValidArray;

function findInArray(arr, fn) {
  if (arr === void 0) {
    arr = [];
  }

  var ret = null;

  if (isValidArray(arr)) {
    arr.forEach(function (item, index) {
      if (!ret && fn(item, index)) {
        ret = item;
      }
    });
  }

  return ret;
}

exports.findInArray = findInArray;

function range(start, end, step) {
  var ret = [];

  if (!end && !step) {
    end = start;
    start = 0;
    step = 1;
  } else if (!end) {
    end = 0;
  } else if (!step) {
    step = 1;
  }

  if (end <= start || step < 1) {
    return ret;
  }

  for (var i = start; i < end; i = i + step) {
    ret.push(i);
  }

  return ret;
}

exports.range = range;

function isString(str) {
  return typeof str === 'string';
}

exports.isString = isString;

function isNumber(num) {
  if (num === '' || num === null) {
    return false;
  }

  return typeof num === 'number' && !isNaN(num) || !isNaN(Number(num));
}

exports.isNumber = isNumber;

function isUndef(obj) {
  return typeof obj === 'undefined';
}

exports.isUndef = isUndef;

function isFunction(fn) {
  return typeof fn === 'function';
}

exports.isFunction = isFunction;

function isBoolean(val) {
  return typeof val === 'boolean';
}

exports.isBoolean = isBoolean;

function isNil(val) {
  return typeof val === 'undefined' || val === null;
}

exports.isNil = isNil;

function isInvalidValue(val) {
  return isNil(val) || val === '';
}

exports.isInvalidValue = isInvalidValue;

exports.nextTick = function (handler) {
  if (typeof requestAnimationFrame !== 'undefined') {
    requestAnimationFrame(handler);
    return;
  }

  if (typeof setTimeout !== 'undefined') {
    setTimeout(handler, 0);
    return;
  }

  handler();
};

function removeFromArray(arr, val) {
  if (arr === void 0) {
    arr = [];
  }

  if (val === void 0) {
    val = '';
  }

  return arr.filter(function (v) {
    return v !== val;
  });
}

exports.removeFromArray = removeFromArray;

function replaceMessage(template, kv) {
  return template.replace(/\${\w+}/g, function (str) {
    var key = str.slice(2, -1);
    return kv[key];
  });
}

exports.replaceMessage = replaceMessage;

function getValueFromEvents(e) {
  if (!isUndef(e.value)) {
    return e.value;
  }

  if (get(e, 'target.value')) {
    return e.target.value;
  }

  if (get(e, 'detail.value')) {
    return e.target.value;
  }

  if (get(e, 'originalEvent.detail.value')) {
    return e.originalEvent.detail.value;
  }
}

exports.getValueFromEvents = getValueFromEvents;

function getNotUndef() {
  var values = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }

  for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {
    var it_1 = values_1[_a];

    if (!isUndef(it_1)) {
      return it_1;
    }
  }
}

exports.getNotUndef = getNotUndef;