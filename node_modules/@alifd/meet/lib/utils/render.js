"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderToRoot = exports.onProviderUnMount = exports.onProviderMount = void 0;

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var rax_unmount_component_at_node_1 = tslib_1.__importDefault(require("rax-unmount-component-at-node"));

var driver_universal_1 = tslib_1.__importDefault(require("driver-universal"));

var env_1 = require("./env");

var provider = null;

function onProviderMount(p) {
  provider = p;
}

exports.onProviderMount = onProviderMount;

function onProviderUnMount() {
  provider = null;
}

exports.onProviderUnMount = onProviderUnMount;

function renderWithProvider(element, onHide) {
  return provider.addPortal({
    element: element,
    onHide: onHide
  });
}

function renderWithDriver(element, onHide) {
  var _a;

  if (!rax_1.shared || !rax_1.shared.Host || !rax_1.shared.Host.driver) {
    console.warn('shared.Host.driver is invalid, using DriverUniversal instead.');
  }

  var driver = ((_a = rax_1.shared === null || rax_1.shared === void 0 ? void 0 : rax_1.shared.Host) === null || _a === void 0 ? void 0 : _a.driver) || driver_universal_1.default;
  var root = document.createElement('div');
  var hid = false;

  if (env_1.isStrictWechatMiniProgram || env_1.isStrictByteDanceMicroApp) {
    rax_1.render(element, root, {
      driver: tslib_1.__assign(tslib_1.__assign({}, driver), {
        afterRender: function afterRender() {
          try {
            if (env_1.isStrictWechatMiniProgram || env_1.isStrictByteDanceMicroApp) {
              setTimeout(function () {
                document.body.appendChild(root);
              });
            } else {
              document.body.appendChild(root);
            }
          } catch (e) {
            console.warn(e);
          }
        }
      })
    });
  } else {
    document.body.appendChild(root);
    rax_1.render(element, root, {
      driver: driver
    });
  }

  return function hide() {
    if (hid) {
      return;
    }

    try {
      hid = true;
      rax_unmount_component_at_node_1.default(root);
      document.body.removeChild(root);

      if (onHide) {
        onHide();
      }
    } catch (e) {
      throw new Error('remove element error');
    }
  };
}

function renderToRoot(element, onHide) {
  if (provider) {
    return renderWithProvider(element, onHide);
  }

  return renderWithDriver(element, onHide);
}

exports.renderToRoot = renderToRoot;