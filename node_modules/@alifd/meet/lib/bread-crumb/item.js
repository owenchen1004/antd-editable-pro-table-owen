"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var utils_1 = require("../utils");

var Item = function (props, ref) {
  var _a;

  var _b = props.disabled,
      disabled = _b === void 0 ? false : _b,
      _c = props.prefix,
      prefix = _c === void 0 ? 'mt-' : _c,
      size = props.size,
      last = props.last,
      disabledAll = props.disabledAll,
      _onClick = props.onClick,
      index = props.index,
      count = props.count,
      maxNode = props.maxNode,
      separator = props.separator;

  var renderSeparator = function renderSeparator() {
    var _a, _b;

    return separator ? rax_1.createElement(view_1.default, {
      className: classnames_1.default([prefix + "breadcrumb-item-icon-custom", prefix + "breadcrumb-item--font-" + size + "-size", prefix + "breadcrumb-item--margin-" + size + "-size", (_a = {}, _a[prefix + "breadcrumb-item--arrow-disabled"] = disabledAll, _a)])
    }, separator) : rax_1.createElement(view_1.default, {
      className: classnames_1.default([prefix + "breadcrumb-item-icon", prefix + "breadcrumb-item--arrow-" + size + "-size", prefix + "breadcrumb-item--margin-" + size + "-size", (_b = {}, _b[prefix + "breadcrumb-item--arrow-disabled"] = disabledAll, _b)])
    });
  };

  var renderFull = function renderFull() {
    var _a;

    return rax_1.createElement(rax_1.Fragment, null, rax_1.createElement(view_1.default, {
      className: classnames_1.default(prefix + "breadcrumb-item--action", (_a = {}, _a[prefix + "breadcrumb-item--action-disabled"] = disabled || disabledAll, _a[prefix + "breadcrumb-item--action-active"] = last, _a))
    }, props.children), last ? '' : renderSeparator());
  };

  var shouldHide = count > maxNode && index !== 0 && count - index >= maxNode - 1;

  if (shouldHide && index !== 1) {
    return null;
  }

  return rax_1.createElement(view_1.default, {
    ref: ref,
    className: classnames_1.default([prefix + "breadcrumb-item", prefix + "breadcrumb-item--font-" + size + "-size", prefix + "breadcrumb-item--space-" + size + "-size", (_a = {}, _a[prefix + "breadcrumb-item--disabled"] = disabled || disabledAll, _a)]),
    onClick: function onClick(e) {
      if (disabled || disabledAll) {
        utils_1.stopPropagation(e);
      } else {
        _onClick(index);
      }
    }
  }, function renderItem() {
    if (shouldHide && index === 1) {
      return rax_1.createElement(rax_1.Fragment, null, rax_1.createElement(rax_text_1.default, null, '...'), last ? '' : renderSeparator());
    }

    return renderFull();
  }());
};

Item.displayName = 'BreadCrumb.Item';
exports.default = rax_1.forwardRef(Item);