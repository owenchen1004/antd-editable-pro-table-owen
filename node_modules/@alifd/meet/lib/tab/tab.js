"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabContext = void 0;

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var rax_clone_element_1 = tslib_1.__importDefault(require("rax-clone-element"));

var rax_scrollview_1 = tslib_1.__importDefault(require("rax-scrollview"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var picker_1 = tslib_1.__importDefault(require("../picker"));

var select_drawer_1 = require("../select-drawer");

var item_1 = tslib_1.__importDefault(require("./item"));

var locale_1 = require("../locale");

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

exports.TabContext = rax_1.createContext({
  activeKey: -1,
  fullWidth: true,
  shape: 'normal',
  activeLineType: 'normal',
  change: function change() {}
});

var getTabData = function (props) {
  var dataSource = props.dataSource,
      children = props.children;

  if (utils_1.isValidArray(dataSource)) {
    return dataSource.map(function (item) {
      return tslib_1.__assign(tslib_1.__assign({}, item), {
        label: item.title,
        value: item.key
      });
    });
  } else if (children) {
    return rax_children_1.default.map(children, function (child) {
      var title = child.props.title;
      var key = child.key;
      return {
        label: title,
        value: key
      };
    });
  } else {
    return [];
  }
};

var getInitActiveKey = function (props) {
  if ('activeKey' in props && props.activeKey) {
    return props.activeKey;
  } else if (props.defaultActiveKey || props.defaultActiveKey === 0) {
    return props.defaultActiveKey;
  } else {
    return undefined;
  }
};

var timerMap = {};

var Tab = function (props, ref) {
  var _a, _b, _c;

  var _d = props.prefix,
      prefix = _d === void 0 ? 'mt-' : _d,
      activeKey = props.activeKey,
      _e = props.defaultActiveKey,
      defaultActiveKey = _e === void 0 ? -1 : _e,
      _f = props.size,
      size = _f === void 0 ? 'medium' : _f,
      _g = props.activeLineType,
      activeLineType = _g === void 0 ? 'normal' : _g,
      _h = props.shape,
      shape = _h === void 0 ? 'normal' : _h,
      _j = props.fullWidth,
      fullWidth = _j === void 0 ? true : _j,
      renderTool = props.renderTool,
      _k = props.onChange,
      onChange = _k === void 0 ? function () {} : _k,
      _l = props.dataSource,
      dataSource = _l === void 0 ? [] : _l,
      className = props.className,
      contentClassName = props.contentClassName,
      contentStyle = props.contentStyle,
      renderTab = props.renderTab,
      children = props.children,
      others = tslib_1.__rest(props, ["prefix", "activeKey", "defaultActiveKey", "size", "activeLineType", "shape", "fullWidth", "renderTool", "onChange", "dataSource", "className", "contentClassName", "contentStyle", "renderTab", "children"]);

  var locale = locale_1.useLocale('Tab', others, zh_cn_1.default.Tab);

  var _m = rax_1.useState(getInitActiveKey(props)),
      curActiveKey = _m[0],
      setActiveKey = _m[1];

  var _o = rax_1.useState(false),
      drawerVisible = _o[0],
      setDrawerVisible = _o[1];

  var _p = rax_1.useState(getInitActiveKey(props)),
      internalTabKey = _p[0],
      setInternalActiveKey = _p[1];

  var curTabScrollId = hooks_1.useGuid('tab-scroll-');
  var curScrollContainerId = hooks_1.useGuid('tab-ctn-');
  var scrollRef = rax_1.useRef();
  var activeTabRef = rax_1.useRef();
  var isControlled = ('activeKey' in props);

  var _q = rax_1.useState(false),
      isOverflow = _q[0],
      setOverflow = _q[1];

  var isExcessMode = !fullWidth && isOverflow;
  var clsPrefix = prefix + "tab";
  var clses = {
    tab: classnames_1.default([clsPrefix, clsPrefix + "--" + shape, className]),
    divider: classnames_1.default((_a = {}, _a[clsPrefix + "-divider"] = shape !== 'capsule', _a)),
    container: classnames_1.default((_b = {}, _b[clsPrefix + "-container"] = true, _b[clsPrefix + "-container--" + size] = true, _b[clsPrefix + "-container--wechat"] = utils_1.isStrictWechatMiniProgram, _b)),
    scrollContainer: classnames_1.default(clsPrefix + "-scroll-container", clsPrefix + "-scroll-container--" + size, (_c = {}, _c[clsPrefix + "-scroll-container--fullwidth"] = fullWidth, _c[clsPrefix + "-scroll-container--wechat"] = utils_1.isStrictWechatMiniProgram, _c)),
    tool: classnames_1.default(clsPrefix + "-tool", clsPrefix + "-tool--" + size),
    toolIcon: classnames_1.default(clsPrefix + "-tool-icon", clsPrefix + "-tool-icon--" + size),
    drawer: classnames_1.default(clsPrefix + "-drawer"),
    content: classnames_1.default(clsPrefix + "-content", contentClassName)
  };

  var scrollTo = function (offset) {
    if (!timerMap[curTabScrollId]) {
      timerMap[curTabScrollId] = setTimeout(function () {
        if (scrollRef && scrollRef.current && scrollRef.current.scrollTo) {
          scrollRef.current.scrollTo(tslib_1.__assign(tslib_1.__assign({}, offset), {
            duration: 150
          }));
          timerMap[curTabScrollId] = null;
        }
      }, 200);
    }
  };

  rax_1.useEffect(function () {
    if (isControlled && curActiveKey && !props.activeKey) {
      setActiveKey(getInitActiveKey(props));
      return;
    }

    if (isControlled) {
      setActiveKey(props.activeKey);
    }
  });
  rax_1.useEffect(function () {
    setTimeout(function () {
      (function () {
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
          var activeTabId, containerWidth, containerOffsetLeft, scrollLeft, activeTabWidth, activeTabOffsetLeft, totalWidth, centerMarkerPos, distance;
          return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                activeTabId = activeTabRef.current && activeTabRef.current.id;
                return [4, utils_1.getWidth(curTabScrollId)];

              case 1:
                containerWidth = _a.sent();
                return [4, utils_1.getLeft(curTabScrollId)];

              case 2:
                containerOffsetLeft = _a.sent();
                return [4, utils_1.getScrollLeft(curTabScrollId)];

              case 3:
                scrollLeft = _a.sent();
                return [4, utils_1.getWidth(activeTabId)];

              case 4:
                activeTabWidth = _a.sent();
                return [4, utils_1.getLeft(activeTabId)];

              case 5:
                activeTabOffsetLeft = _a.sent() - containerOffsetLeft;
                return [4, utils_1.getWidth(curScrollContainerId)];

              case 6:
                totalWidth = _a.sent();
                centerMarkerPos = containerWidth / 2;

                if (!fullWidth) {
                  setOverflow(totalWidth > containerWidth);
                }

                if (scrollRef.current && activeTabRef.current) {
                  distance = Math.floor(Math.max(activeTabOffsetLeft - centerMarkerPos + scrollLeft + activeTabWidth / 2, 0));

                  if (scrollLeft !== distance) {
                    scrollTo({
                      x: distance / utils_1.screenPixelRatio,
                      y: 0
                    });
                  }
                }

                return [2];
            }
          });
        });
      })();
    }, 50);
  });
  var content;

  if (dataSource && dataSource.length > 0) {
    content = dataSource.map(function (item, index) {
      return rax_1.createElement(item_1.default, tslib_1.__assign({
        key: item.key || index,
        itemKey: item.key,
        renderContent: renderTab,
        ref: item.key === curActiveKey ? activeTabRef : null,
        prefix: prefix,
        size: size
      }, item));
    });
  } else {
    content = rax_children_1.default.map(children, function (child, index) {
      return rax_clone_element_1.default(child, {
        key: "mt_tab_" + index,
        itemKey: child.key || index,
        ref: "" + child.key === "" + curActiveKey ? activeTabRef : null,
        renderContent: child.renderContent || renderTab,
        prefix: prefix,
        size: size
      });
    });
  }

  var handleChange = function (v) {
    if (!isControlled) {
      setActiveKey(v);
    }

    if (utils_1.isFunction(onChange) && v !== curActiveKey) {
      onChange(v);
    }
  };

  return rax_1.createElement(exports.TabContext.Provider, {
    value: {
      activeKey: curActiveKey,
      change: handleChange,
      shape: shape,
      fullWidth: fullWidth,
      activeLineType: activeLineType
    }
  }, rax_1.createElement(view_1.default, null, rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    className: clses.tab,
    ref: ref
  }), rax_1.createElement(rax_scrollview_1.default, {
    ref: scrollRef,
    id: curTabScrollId,
    className: clses.container,
    contentContainerStyle: {
      flex: props.renderTool ? null : 1
    },
    horizontal: true,
    showsHorizontalScrollIndicator: false
  }, rax_1.createElement(view_1.default, {
    id: curScrollContainerId,
    className: clses.scrollContainer
  }, content)), shape !== 'capsule' && rax_1.createElement(view_1.default, {
    className: clses.divider
  }), function getTool() {
    if (!isExcessMode) {
      return null;
    }

    var _children = rax_1.createElement(rax_1.Fragment, null, rax_1.createElement(rax_text_1.default, null, locale.more), rax_1.createElement(icon_1.default, {
      className: clses.toolIcon,
      name: "arrow-down",
      size: "xxs"
    }));

    if (utils_1.isFunction(renderTool)) {
      var renderedToolEl = renderTool();

      if (renderedToolEl) {
        _children = renderedToolEl;
      } else {
        _children = null;
      }
    }

    return _children ? rax_1.createElement(view_1.default, {
      className: clses.tool,
      onClick: function onClick() {
        setDrawerVisible(true);
        setInternalActiveKey(curActiveKey);
      }
    }, _children) : null;
  }()), rax_1.createElement(view_1.default, {
    className: clses.content,
    style: contentStyle
  }, function getChildren(activeTabKey) {
    var ret = null;
    rax_children_1.default.forEach(children, function (child) {
      if (ret) {
        return;
      }

      var _key = child.key;

      if ("" + _key === "" + activeTabKey) {
        ret = child.props.children;
      }
    });
    return ret;
  }(curActiveKey))), isExcessMode ? rax_1.createElement(select_drawer_1.BaseSelectDrawer, {
    visible: drawerVisible,
    onOk: function handleDrawerOk() {
      setDrawerVisible(false);
      handleChange(internalTabKey);
    },
    onCancel: function handleDrawerCancel() {
      setDrawerVisible(false);
      setInternalActiveKey(curActiveKey);
    }
  }, rax_1.createElement(rax_scrollview_1.default, {
    className: clses.drawer
  }, rax_1.createElement(picker_1.default, {
    cascade: true,
    data: getTabData(props),
    value: [internalTabKey],
    onChange: function (v) {
      if (utils_1.isValidArray(v)) {
        setInternalActiveKey(v[0]);
      }
    }
  }))) : null);
};

Tab.displayName = 'Tab';
exports.default = rax_1.forwardRef(Tab);