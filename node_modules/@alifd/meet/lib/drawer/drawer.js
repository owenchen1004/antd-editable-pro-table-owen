"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var modal_1 = tslib_1.__importDefault(require("../modal"));

var utils_1 = require("../utils");

var Drawer = function (props, ref) {
  var _a;

  var _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      _c = props.placement,
      placement = _c === void 0 ? 'bottom' : _c,
      _d = props.visible,
      visible = _d === void 0 ? false : _d,
      className = props.className,
      height = props.height,
      width = props.width,
      title = props.title,
      _e = props.titleAlign,
      titleAlign = _e === void 0 ? 'left' : _e,
      containerClassName = props.containerClassName,
      _f = props.closeMode,
      closeMode = _f === void 0 ? ['mask', 'close'] : _f,
      _g = props.onShow,
      onShow = _g === void 0 ? function () {} : _g,
      _h = props.onClose,
      onClose = _h === void 0 ? function () {} : _h,
      children = props.children,
      _j = props.style,
      style = _j === void 0 ? {} : _j,
      others = tslib_1.__rest(props, ["prefix", "placement", "visible", "className", "height", "width", "title", "titleAlign", "containerClassName", "closeMode", "onShow", "onClose", "children", "style"]);

  var drawerCls = classnames_1.default(prefix + "drawer", className, prefix + "drawer--" + placement);

  var _k = rax_1.useState(visible),
      drawerVisible = _k[0],
      setVisible = _k[1];

  var showCloseIcon = Array.isArray(closeMode) && closeMode.indexOf('close') > -1;
  rax_1.useEffect(function () {
    if (visible && (utils_1.isStrictWechatMiniProgram || utils_1.isStrictByteDanceMicroApp)) {
      setTimeout(function () {
        setVisible(true);
      }, 50);
    } else {
      setVisible(visible);
    }
  }, [visible]);
  return rax_1.createElement(modal_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    maskClosable: closeMode.indexOf('mask') > -1,
    onClose: onClose,
    visible: drawerVisible,
    placement: placement,
    className: prefix + "drawer-modal",
    containerClassName: drawerCls,
    containerStyle: tslib_1.__assign({
      width: width,
      height: height
    }, style)
  }), rax_1.createElement(view_1.default, {
    className: prefix + "drawer-container"
  }, title ? rax_1.createElement(rax_text_1.default, {
    className: classnames_1.default(prefix + "drawer-title", (_a = {}, _a[prefix + "drawer-title--center"] = titleAlign === 'center', _a[prefix + "drawer-title--with-icon"] = titleAlign === 'left' && showCloseIcon, _a)),
    numberOfLines: 1
  }, title) : null, showCloseIcon ? rax_1.createElement(view_1.default, {
    className: prefix + "drawer-close",
    onClick: function onClick() {
      onClose('close');
    }
  }, rax_1.createElement(icon_1.default, {
    className: prefix + "drawer-close-icon",
    name: "close"
  })) : null, rax_1.createElement(view_1.default, {
    className: classnames_1.default(prefix + "drawer-body", containerClassName)
  }, children)));
};

Drawer.displayName = 'Drawer';
exports.default = rax_1.forwardRef(Drawer);