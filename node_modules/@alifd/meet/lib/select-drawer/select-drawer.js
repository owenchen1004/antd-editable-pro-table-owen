"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var safe_area_1 = tslib_1.__importDefault(require("../safe-area"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var drawer_1 = tslib_1.__importDefault(require("../drawer"));

var button_1 = tslib_1.__importDefault(require("../button"));

var bottom_button_1 = tslib_1.__importDefault(require("../bottom-button"));

var form_1 = require("../form");

var locale_1 = require("../locale");

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var utils_1 = require("../utils");

var children_1 = require("../utils/children");

var SelectDrawer = function (props, ref) {
  var _a, _b, _c;

  var _d = props.prefix,
      prefix = _d === void 0 ? 'mt-' : _d,
      alignProp = props.align,
      children = props.children,
      _e = props.drawerTitle,
      drawerTitle = _e === void 0 ? '' : _e,
      _f = props.iconType,
      iconType = _f === void 0 ? 'arrow-right' : _f,
      _g = props.content,
      content = _g === void 0 ? '' : _g,
      placeholder = props.placeholder,
      _h = props.type,
      type = _h === void 0 ? 'normal' : _h,
      _j = props.buttonPosition,
      buttonPosition = _j === void 0 ? 'top' : _j,
      className = props.className,
      drawerClassName = props.drawerClassName,
      _k = props.disabled,
      disabled = _k === void 0 ? false : _k,
      _l = props.readOnly,
      readOnly = _l === void 0 ? false : _l,
      _m = props.showIcon,
      showIcon = _m === void 0 ? true : _m,
      _o = props.hasClear,
      hasClear = _o === void 0 ? false : _o,
      hideButton = props.hideButton,
      _p = props.showToolbar,
      showToolbarProp = _p === void 0 ? true : _p,
      notFoundContent = props.notFoundContent,
      onOk = props.onOk,
      onCancel = props.onCancel,
      onClear = props.onClear,
      onVisibleChange = props.onVisibleChange,
      okText = props.okText,
      cancelText = props.cancelText,
      zIndex = props.zIndex,
      sizeProp = props.size,
      disableScroll = props.disableScroll,
      others = tslib_1.__rest(props, ["prefix", "align", "children", "drawerTitle", "iconType", "content", "placeholder", "type", "buttonPosition", "className", "drawerClassName", "disabled", "readOnly", "showIcon", "hasClear", "hideButton", "showToolbar", "notFoundContent", "onOk", "onCancel", "onClear", "onVisibleChange", "okText", "cancelText", "zIndex", "size", "disableScroll"]);

  var _q = rax_1.useState(false),
      visible = _q[0],
      setVisible = _q[1];

  var _r = rax_1.useContext(form_1.ItemContext),
      contextAlign = _r.contentAlign,
      contextSize = _r.size,
      isInsideForm = _r.isInsideForm;

  var _children = children_1.getValidChildren(children);

  var align = alignProp || (isInsideForm ? contextAlign : null) || 'left';
  var size = sizeProp || (isInsideForm ? contextSize : null) || 'medium';
  var shouldShowClear = !disabled && hasClear && content;
  var isInverse = type === 'inverse';
  var locale = locale_1.useLocale('SelectDrawer', others, zh_cn_1.default.SelectDrawer);
  var clsPrefix = prefix + "selectdrawer";
  var doHide = rax_1.useCallback(function () {
    if (visible) {
      setVisible(false);
    }

    if (onVisibleChange) {
      onVisibleChange(false);
    }
  }, [visible, setVisible, onVisibleChange]);
  var handleOk = rax_1.useCallback(function () {
    var shouldHide = true;

    if (onOk) {
      shouldHide = onOk();
    }

    if (shouldHide !== false) {
      doHide();
    }
  }, [onOk, doHide]);
  var handleCancel = rax_1.useCallback(function (reason) {
    var shouldHide = true;

    if (onCancel) {
      shouldHide = onCancel(reason);
    }

    if (shouldHide !== false) {
      doHide();
    }
  }, [onCancel, doHide]);
  var handleClear = rax_1.useCallback(function (e) {
    e.preventDefault();
    utils_1.stopPropagation(e);

    if (onClear) {
      onClear();
    }
  }, [onClear]);

  var handleOpen = function handleOpen() {
    if (disabled || readOnly || visible) {
      return;
    }

    if (_children || notFoundContent) {
      setVisible(true);

      if (onVisibleChange) {
        onVisibleChange(true);
      }
    }
  };

  rax_1.useImperativeHandle(ref, function () {
    return Object.assign(ref.current || {}, {
      hide: doHide,
      show: handleOpen,
      ok: handleOk,
      cancel: handleCancel
    });
  });
  return rax_1.createElement(rax_1.Fragment, null, rax_1.createElement(view_1.default, tslib_1.__assign({
    ref: ref
  }, others, {
    className: classnames_1.default(clsPrefix, clsPrefix + "--" + size, className),
    onClick: handleOpen
  }), rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-content", clsPrefix + "-content--" + size, clsPrefix + "-content--" + align)
  }, function getContent() {
    var _a, _b;

    if (!content) {
      return rax_1.createElement(view_1.default, {
        className: classnames_1.default((_a = {}, _a[clsPrefix + "-placeholder"] = true, _a[clsPrefix + "-placeholder--" + align] = true, _a[clsPrefix + "-placeholder--disabled"] = disabled, _a[clsPrefix + "-placeholder--inverse"] = isInverse, _a[clsPrefix + "-placeholder--inverse-disabled"] = disabled && isInverse, _a))
      }, placeholder || locale.placeHolderText);
    } else if (utils_1.isString(content)) {
      return rax_1.createElement(rax_text_1.default, {
        numberOfLines: 1,
        className: classnames_1.default((_b = {}, _b[clsPrefix + "-content-text"] = true, _b[clsPrefix + "-content-text--" + align] = true, _b[clsPrefix + "-content-text--" + size] = size, _b[clsPrefix + "-content-text--disabled"] = disabled, _b[clsPrefix + "-content-text--inverse"] = isInverse, _b[clsPrefix + "-content-text--inverse-disabled"] = isInverse && disabled, _b)),
        style: {
          textAlign: align
        }
      }, content);
    } else {
      return content;
    }
  }()), showIcon && !shouldShowClear ? rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-icon", clsPrefix + "-icon--" + size)
  }, rax_1.createElement(icon_1.default, {
    className: classnames_1.default(clsPrefix + "-icon-text", clsPrefix + "-icon-text--" + size, (_a = {}, _a[clsPrefix + "-icon-text--inverse"] = isInverse, _a[clsPrefix + "-icon-text--disabled"] = disabled, _a[clsPrefix + "-icon-text--inverse-disabled"] = isInverse && disabled, _a)),
    name: iconType
  })) : null, shouldShowClear ? rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-icon", clsPrefix + "-icon--" + size),
    onClick: handleClear
  }, rax_1.createElement(icon_1.default, {
    className: classnames_1.default(clsPrefix + "-icon-text--" + size, (_b = {}, _b[clsPrefix + "-icon-text--inverse"] = isInverse, _b[clsPrefix + "-icon-text--disabled"] = disabled, _b[clsPrefix + "-icon-text--inverse-disabled"] = isInverse && disabled, _b)),
    name: "delete-filling"
  })) : null), rax_1.createElement(drawer_1.default, {
    visible: visible,
    placement: "bottom",
    closeMode: ['mask'],
    onClose: handleCancel,
    zIndex: zIndex,
    className: classnames_1.default(clsPrefix + "-drawer", drawerClassName),
    containerClassName: clsPrefix + "-container",
    disableScroll: disableScroll
  }, showToolbarProp && (drawerTitle || buttonPosition === 'top' && !hideButton) ? rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-toolbar", (_c = {}, _c[clsPrefix + "-toolbar--no-border"] = buttonPosition === 'bottom', _c))
  }, !hideButton && buttonPosition !== 'bottom' ? rax_1.createElement(button_1.default, {
    className: clsPrefix + "-toolbar-btn-cancel",
    model: "text",
    onClick: function onClick() {
      return handleCancel('cancel-button');
    }
  }, cancelText || locale.cancel) : null, rax_1.createElement(view_1.default, {
    className: clsPrefix + "-toolbar-title"
  }, drawerTitle), !hideButton && buttonPosition !== 'bottom' ? rax_1.createElement(button_1.default, {
    className: clsPrefix + "-toolbar-btn-ok",
    model: "text",
    type: "primary",
    onClick: handleOk
  }, okText || locale.ok) : null) : null, function renderChildren() {
    var ret = null;

    if (_children) {
      ret = rax_1.createElement(view_1.default, {
        className: clsPrefix + "-drawer-content"
      }, _children);
    } else if (utils_1.isString(notFoundContent)) {
      ret = rax_1.createElement(view_1.default, {
        className: clsPrefix + "-drawer-content " + clsPrefix + "-drawer--empty"
      }, rax_1.createElement(rax_text_1.default, {
        className: clsPrefix + "-drawer-empty-text"
      }, notFoundContent));
    } else if (notFoundContent) {
      ret = rax_1.createElement(view_1.default, {
        className: clsPrefix + "-drawer-content " + clsPrefix + "-drawer--empty"
      }, rax_1.createElement(view_1.default, {
        className: clsPrefix + "-drawer-empty-text"
      }, notFoundContent));
    }

    return ret;
  }(), showToolbarProp && buttonPosition === 'bottom' && !hideButton ? rax_1.createElement(bottom_button_1.default, {
    okText: okText || locale.ok,
    cancelText: cancelText || locale.cancel,
    onOk: handleOk,
    onCancel: function onCancel() {
      return handleCancel('cancel-button');
    }
  }) : rax_1.createElement(safe_area_1.default, null)));
};

SelectDrawer.displayName = 'SelectDrawer';
exports.default = rax_1.forwardRef(SelectDrawer);