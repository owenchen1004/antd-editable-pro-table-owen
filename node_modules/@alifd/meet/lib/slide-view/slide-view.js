"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var view_1 = tslib_1.__importDefault(require("../view"));

var utils_1 = require("../utils");

var getEndPosition = function (_a) {
  var translateX = _a.translateX,
      actualOffset = _a.actualOffset,
      triggerOffset = _a.triggerOffset,
      leftCellWidth = _a.leftCellWidth,
      rightCellWidth = _a.rightCellWidth;

  if (Math.abs(actualOffset) < triggerOffset) {
    return 0;
  }

  if (actualOffset > 0 && translateX > 0) {
    return leftCellWidth;
  } else if (actualOffset < 0 && translateX < 0) {
    return -rightCellWidth;
  }

  return 0;
};

var SlideView = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      children = props.children,
      _b = props.duration,
      duration = _b === void 0 ? 500 : _b,
      className = props.className,
      _c = props.leftActions,
      leftActions = _c === void 0 ? [] : _c,
      _d = props.rightActions,
      rightActions = _d === void 0 ? [] : _d,
      _e = props.triggerOffset,
      triggerOffset = _e === void 0 ? 50 : _e,
      _f = props.uid,
      uid = _f === void 0 ? 0 : _f,
      onOpen = props.onOpen,
      onClose = props.onClose,
      others = tslib_1.__rest(props, ["prefix", "children", "duration", "className", "leftActions", "rightActions", "triggerOffset", "uid", "onOpen", "onClose"]);

  var _g = rax_1.useState(0),
      translateX = _g[0],
      setTranslateX = _g[1];

  var _h = rax_1.useState(false),
      duringTransition = _h[0],
      toggleTransition = _h[1];

  var startTouchRecord = rax_1.useRef(null);
  var prevTouchRecord = rax_1.useRef(null);
  var rightWidthRecord = rax_1.useRef(0);
  var leftWidthRecord = rax_1.useRef(0);
  var openStatusRecored = rax_1.useRef(false);
  var clsPrefix = prefix + "slide-view";
  var resetPosition = rax_1.useCallback(function () {
    scroll(0);
  }, []);
  var handleTouchStart = rax_1.useCallback(function (e) {
    startTouchRecord.current = e.changedTouches[0];
    prevTouchRecord.current = e.changedTouches[0];
  }, []);
  var handleTouchMove = rax_1.useCallback(function (e) {
    if (!prevTouchRecord.current) {
      return;
    }

    var currentTouch = getCurrentTouch(Array.from(e.changedTouches));
    var offsetX = currentTouch.pageX - prevTouchRecord.current.pageX;
    var offsetY = currentTouch.pageY - prevTouchRecord.current.pageY;

    if (Math.abs(offsetX) < Math.abs(offsetY)) {
      return;
    }

    if (e.cancelable) {
      e.preventDefault();
    }

    prevTouchRecord.current = currentTouch;
    var nextTranslateX = translateX + offsetX;

    if (nextTranslateX > leftWidthRecord.current || -nextTranslateX > rightWidthRecord.current) {
      return;
    }

    if (openStatusRecored.current === false && prevTouchRecord.current.pageX !== startTouchRecord.current.pageX) {
      var direction = prevTouchRecord.current.pageX > startTouchRecord.current.pageX ? 'left' : 'right';
      openStatusRecored.current = true;

      if (utils_1.isFunction(onOpen)) {
        onOpen(direction);
      }
    }

    setTranslateX(nextTranslateX);
  }, [translateX]);
  var handleTouchEnd = rax_1.useCallback(function (e) {
    if (!prevTouchRecord.current) {
      return;
    }

    var endTouch = getCurrentTouch(Array.from(e.changedTouches));
    var actualOffset = endTouch.pageX - startTouchRecord.current.pageX;
    var endPosition = getEndPosition({
      translateX: translateX,
      actualOffset: actualOffset,
      triggerOffset: triggerOffset,
      leftCellWidth: leftWidthRecord.current,
      rightCellWidth: rightWidthRecord.current
    });
    startTouchRecord.current = null;
    prevTouchRecord.current = null;
    scroll(endPosition);

    if (openStatusRecored.current === true && endPosition === 0) {
      openStatusRecored.current = false;

      if (utils_1.isFunction(onClose)) {
        onClose();
      }
    }
  }, [translateX, duringTransition]);
  var scroll = rax_1.useCallback(function (pos) {
    toggleTransition(true);
    setTranslateX(pos);
    setTimeout(function () {
      toggleTransition(false);
    }, duration);
  }, [duration]);
  var getCurrentTouch = rax_1.useCallback(function (touches) {
    return touches.find(function (_a) {
      var identifier = _a.identifier;
      return identifier === prevTouchRecord.current.identifier;
    });
  }, []);
  var handleClick = rax_1.useCallback(function (cb) {
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
      var hideFlag;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            hideFlag = true;
            if (!(cb && typeof cb === 'function')) return [3, 2];
            return [4, cb()];

          case 1:
            hideFlag = _a.sent();
            _a.label = 2;

          case 2:
            if (hideFlag === false) {
              return [2];
            }

            resetPosition();
            return [2];
        }
      });
    });
  }, [duringTransition]);
  rax_1.useEffect(function () {
    (function () {
      return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var _a, _b;

        return tslib_1.__generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              _a = leftWidthRecord;
              return [4, utils_1.getWidth(prefix + "cell-left-" + uid)];

            case 1:
              _a.current = _c.sent();
              _b = rightWidthRecord;
              return [4, utils_1.getWidth(prefix + "cell-right-" + uid)];

            case 2:
              _b.current = _c.sent();
              return [2];
          }
        });
      });
    })();
  }, [uid, leftActions, rightActions]);
  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    className: classnames_1.default(className, "" + clsPrefix)
  }), rax_1.createElement(view_1.default, {
    className: clsPrefix + "-wrapper",
    style: {
      transform: "translate3d(" + translateX + "px, 0, 0)",
      transitionDuration: duringTransition ? (duration / 1000).toFixed(1) + "s" : '0s'
    }
  }, rax_1.createElement(view_1.default, {
    className: clsPrefix + "-cell " + clsPrefix + "-cell--left",
    id: prefix + "cell-left-" + uid
  }, leftActions.map(function (item, index) {
    return rax_1.createElement(view_1.default, {
      className: clsPrefix + "-button-item",
      onClick: function onClick() {
        return handleClick(item.onClick);
      },
      key: index
    }, item.content);
  })), rax_1.createElement(view_1.default, {
    className: clsPrefix + "-children",
    onClick: resetPosition,
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd
  }, children), rax_1.createElement(view_1.default, {
    className: clsPrefix + "-cell " + clsPrefix + "-cell--right",
    id: prefix + "cell-right-" + uid
  }, rightActions.map(function (item, index) {
    return rax_1.createElement(view_1.default, {
      className: clsPrefix + "-button-item",
      onClick: function onClick() {
        return handleClick(item.onClick);
      },
      key: index
    }, item.content);
  }))));
};

SlideView.displayName = 'SlideView';
exports.default = rax_1.forwardRef(SlideView);