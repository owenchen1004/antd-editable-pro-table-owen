"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var picker_1 = tslib_1.__importDefault(require("../picker"));

var button_1 = tslib_1.__importDefault(require("../button"));

var select_drawer_1 = tslib_1.__importDefault(require("../select-drawer"));

var locale_1 = require("../locale");

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

var getPageNumber = function (totalPage) {
  var pageNumberList = [];

  for (var i = 1; i <= totalPage; i++) {
    pageNumberList.push({
      label: i,
      value: i
    });
  }

  return [pageNumberList];
};

var getCurPageNum = function (current, totalPage, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = 1;
  }

  if (utils_1.isNumber(current)) {
    if (current >= 1 && current <= totalPage) {
      return current;
    } else if (current > totalPage) {
      return totalPage;
    } else if (current < 1) {
      return defaultValue;
    }
  } else {
    return defaultValue;
  }
};

var selectedValue = 1;

var Pagination = function (props, ref) {
  var _a = props.size,
      size = _a === void 0 ? 'medium' : _a,
      _b = props.type,
      typeProp = _b === void 0 ? 'normal' : _b,
      _c = props.current,
      current = _c === void 0 ? 1 : _c,
      defaultCurrent = props.defaultCurrent,
      _d = props.total,
      totalProp = _d === void 0 ? 100 : _d,
      _e = props.pageSize,
      pageSizeProp = _e === void 0 ? 10 : _e,
      _f = props.isOpenDisabled,
      isOpenDisabled = _f === void 0 ? true : _f,
      _g = props.previousButtonText,
      previousButtonText = _g === void 0 ? 'Previous' : _g,
      _h = props.nextButtonText,
      nextButtonText = _h === void 0 ? 'Next' : _h,
      _j = props.onChange,
      onChange = _j === void 0 ? function () {} : _j,
      _k = props.style,
      style = _k === void 0 ? {} : _k,
      _l = props.prefix,
      prefix = _l === void 0 ? 'mt-' : _l,
      others = tslib_1.__rest(props, ["size", "type", "current", "defaultCurrent", "total", "pageSize", "isOpenDisabled", "previousButtonText", "nextButtonText", "onChange", "style", "prefix"]);

  var type = typeProp === 'simple' ? 'normal' : typeProp;
  var locale = locale_1.useLocale('Pagination', others, zh_cn_1.default.Pagination);
  var pageSize = utils_1.isNumber(pageSizeProp) && pageSizeProp > 0 ? pageSizeProp : 1;
  var total = utils_1.isNumber(totalProp) && totalProp > 0 ? totalProp : 1;
  var totalPage = Math.ceil(total / pageSize) || 1;
  var pageNumberData = getPageNumber(totalPage);

  var _m = hooks_1.useValue(props, 1, {
    valueName: 'current',
    fitValue: function fitValue(v) {
      return getCurPageNum(v, totalPage);
    }
  }),
      currentPageValue = _m[0],
      setCurrentPageValue = _m[1],
      isControlled = _m[2];

  selectedValue = currentPageValue;
  var previousButtonDisabled = currentPageValue === 1 && isOpenDisabled;
  var nextButtonDisabled = currentPageValue === totalPage && isOpenDisabled;
  var clsPrefix = prefix + "pagination";
  var classNameObj = {
    pagination: classnames_1.default(clsPrefix, clsPrefix + "--" + size),
    paginationTextMini: classnames_1.default(clsPrefix + "--" + size + "-text-mini"),
    paginationText: classnames_1.default(clsPrefix + "-text", clsPrefix + "--" + size + "-text"),
    paginationNumber: classnames_1.default(clsPrefix + "--" + size + "-text-number"),
    paginationTextCurrent: classnames_1.default(clsPrefix + "-text-current", clsPrefix + "--" + size + "-text-number"),
    paginationTextSelectDrawer: classnames_1.default(clsPrefix + "-text-select-drawer"),
    paginationIconFirst: classnames_1.default(clsPrefix + "-icon", clsPrefix + "--" + size + "-icon", clsPrefix + "-icon--first", clsPrefix + "--" + size + "-icon--first", previousButtonDisabled ? clsPrefix + "-icon--disabled" : ''),
    paginationIconLast: classnames_1.default(clsPrefix + "-icon", clsPrefix + "--" + size + "-icon", clsPrefix + "-icon--last", clsPrefix + "--" + size + "-icon--last", nextButtonDisabled ? clsPrefix + "-icon--disabled" : '')
  };

  var handleOk = function handleOk() {
    setCurrentPageValue(selectedValue);

    if (onChange) {
      onChange(selectedValue);
    }
  };

  var handleCancel = function handleCancel() {
    selectedValue = currentPageValue;

    if (onChange) {
      onChange(selectedValue);
    }
  };

  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    className: classNameObj.pagination,
    ref: ref
  }), rax_1.createElement(button_1.default, {
    size: size,
    model: "outline",
    disabled: previousButtonDisabled,
    onClick: function handlePreviousButton(e) {
      if (currentPageValue <= 1) {
        return;
      }

      var prePageValue = currentPageValue - 1;

      if (!isControlled) {
        setCurrentPageValue(prePageValue);
      }

      if (onChange) {
        onChange(prePageValue, e);
      }
    }
  }, rax_1.createElement(icon_1.default, {
    name: "arrow-left",
    className: classNameObj.paginationIconFirst
  }), rax_1.createElement(rax_text_1.default, null, locale.prev || previousButtonText)), type === 'normal' ? rax_1.createElement(view_1.default, null, rax_1.createElement(select_drawer_1.default, {
    content: rax_1.createElement(view_1.default, {
      className: classNameObj.paginationText
    }, rax_1.createElement(rax_text_1.default, {
      className: classNameObj.paginationTextCurrent
    }, currentPageValue), rax_1.createElement(rax_text_1.default, {
      className: classNameObj.paginationNumber
    }, "/", totalPage)),
    className: classNameObj.paginationTextSelectDrawer,
    placeholder: "",
    iconType: "",
    size: "small",
    drawerTitle: locale.tip,
    onOk: handleOk,
    onCancel: handleCancel,
    style: {
      width: '100%'
    }
  }, rax_1.createElement(picker_1.default, {
    data: pageNumberData,
    defaultValue: [currentPageValue],
    onChange: function changePageNumber(item) {
      selectedValue = item[0];
    }
  }))) : rax_1.createElement(view_1.default, {
    className: classNameObj.paginationTextMini
  }), rax_1.createElement(button_1.default, {
    size: size,
    model: "outline",
    disabled: nextButtonDisabled,
    onClick: function handleNextButton(e) {
      if (currentPageValue >= totalPage) {
        return;
      }

      var nextPageValue = currentPageValue + 1;

      if (!isControlled) {
        setCurrentPageValue(nextPageValue);
      }

      if (onChange) {
        onChange(nextPageValue, e);
      }
    }
  }, rax_1.createElement(rax_text_1.default, null, locale.next || nextButtonText), rax_1.createElement(icon_1.default, {
    name: "arrow-right",
    className: classNameObj.paginationIconLast
  })));
};

Pagination.displayName = 'Pagination';
exports.default = rax_1.forwardRef(Pagination);