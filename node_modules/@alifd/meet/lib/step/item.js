"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_is_valid_element_1 = tslib_1.__importDefault(require("rax-is-valid-element"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var progress_1 = tslib_1.__importDefault(require("../progress"));

var utils_1 = require("../utils");

var Item = function (props) {
  var _a, _b, _c, _d, _e;

  var _f = props.prefix,
      prefix = _f === void 0 ? 'mt-' : _f,
      order = props.order,
      shape = props.shape,
      _g = props.isFirst,
      isFirst = _g === void 0 ? false : _g,
      _h = props.isLast,
      isLast = _h === void 0 ? false : _h,
      _j = props.disabled,
      disabled = _j === void 0 ? false : _j,
      _k = props.isPreDisabled,
      isPreDisabled = _k === void 0 ? false : _k,
      direction = props.direction,
      percent = props.percent,
      addon = props.addon,
      title = props.title,
      content = props.content,
      status = props.status,
      className = props.className,
      icon = props.icon,
      onClick = props.onClick,
      others = tslib_1.__rest(props, ["prefix", "order", "shape", "isFirst", "isLast", "disabled", "isPreDisabled", "direction", "percent", "addon", "title", "content", "status", "className", "icon", "onClick"]);

  var clsPrefix = prefix + "step-item";
  var isArrow = shape === 'arrow';
  var isCircle = shape === 'circle';
  var clses = {
    item: classnames_1.default(clsPrefix, className, clsPrefix + "--" + status, clsPrefix + "--" + shape, (_a = {}, _a[clsPrefix + "--last"] = isLast, _a[clsPrefix + "--first"] = isFirst, _a[clsPrefix + "--disabled"] = disabled, _a[clsPrefix + "--pre-disabled"] = isPreDisabled, _a)),
    dot: classnames_1.default(clsPrefix + "-dot"),
    indicator: clsPrefix + "-indicator",
    hornLeft: classnames_1.default(clsPrefix + "-horn", clsPrefix + "-horn--left", (_b = {}, _b[clsPrefix + "-horn--hide"] = isFirst, _b)),
    hornRight: classnames_1.default(clsPrefix + "-horn", clsPrefix + "-horn--right", (_c = {}, _c[clsPrefix + "-horn--hide"] = isLast, _c)),
    node: classnames_1.default(clsPrefix + "-node", (_d = {}, _d[clsPrefix + "-node--percent"] = isCircle && utils_1.isNumber(percent), _d)),
    addon: classnames_1.default(clsPrefix + "-addon", (_e = {}, _e[clsPrefix + "-addon--first"] = isFirst, _e))
  };
  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    className: clses.item,
    onClick: onClick
  }), addon && ['dot', 'circle'].indexOf(shape) > -1 && direction === 'ver' ? rax_1.createElement(view_1.default, {
    className: clses.addon
  }, addon) : null, rax_1.createElement(view_1.default, {
    className: clses.indicator
  }, !isArrow || !isFirst ? rax_1.createElement(view_1.default, {
    className: clses.hornLeft
  }) : null, isCircle && percent ? rax_1.createElement(progress_1.default, {
    className: clses.node,
    percent: percent,
    shape: "circle"
  }) : rax_1.createElement(view_1.default, {
    className: clses.node
  }, " ", function renderCirleContent() {
    if (isCircle) {
      if (utils_1.isString(icon) && icon !== '') {
        return rax_1.createElement(icon_1.default, {
          name: icon,
          size: "xs"
        });
      } else if (rax_is_valid_element_1.default(icon)) {
        return icon;
      } else if (status === 'finish') {
        return rax_1.createElement(icon_1.default, {
          name: "select",
          size: "xs"
        });
      } else {
        return (order || 0) + 1;
      }
    } else if (shape === 'arrow') {
      return title;
    } else {
      return null;
    }
  }()), !isArrow || !isLast ? rax_1.createElement(view_1.default, {
    className: clses.hornRight
  }) : null), !isArrow ? rax_1.createElement(view_1.default, {
    className: clsPrefix + "-body"
  }, rax_is_valid_element_1.default(title) ? rax_1.createElement(view_1.default, {
    className: clsPrefix + "-title"
  }, title) : rax_1.createElement(rax_text_1.default, {
    className: clsPrefix + "-title"
  }, title || ' '), rax_is_valid_element_1.default(content) ? rax_1.createElement(view_1.default, {
    className: clsPrefix + "-content"
  }, content) : rax_1.createElement(rax_text_1.default, {
    className: clsPrefix + "-content"
  }, content || ' ')) : null);
};

Item.displayName = 'Step.Item';
exports.default = Item;