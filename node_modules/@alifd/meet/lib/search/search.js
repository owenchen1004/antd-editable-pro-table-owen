"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var env_1 = require("@uni/env");

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var input_1 = tslib_1.__importDefault(require("../input"));

var locale_1 = require("../locale");

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var hooks_1 = require("../utils/hooks");

var utils_1 = require("../utils");

var SearchTag = function (props) {
  var children = props.children,
      _a = props.inForm,
      inForm = _a === void 0 ? false : _a,
      _b = props.onSubmit,
      _onSubmit = _b === void 0 ? function () {} : _b,
      others = tslib_1.__rest(props, ["children", "inForm", "onSubmit"]);

  if (env_1.isWeb && !inForm) {
    return rax_1.createElement("form", tslib_1.__assign({}, others, {
      action: "#",
      onSubmit: function onSubmit(e) {
        e.preventDefault();

        _onSubmit();
      }
    }), children);
  } else {
    return rax_1.createElement(view_1.default, tslib_1.__assign({}, others), children);
  }
};

var Search = function (props, _ref) {
  var _a;

  var _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      _c = props.size,
      size = _c === void 0 ? 'medium' : _c,
      valueProp = props.value,
      placeholder = props.placeholder,
      defaultValue = props.defaultValue,
      searchText = props.searchText,
      _d = props.icon,
      icon = _d === void 0 ? 'search' : _d,
      _e = props.keyboardType,
      keyboardType = _e === void 0 ? 'web-search' : _e,
      maxLength = props.maxLength,
      _f = props.enableNative,
      enableNative = _f === void 0 ? false : _f,
      _g = props.focused,
      focused = _g === void 0 ? false : _g,
      _h = props.highlightable,
      highlightable = _h === void 0 ? false : _h,
      _j = props.hasIcon,
      hasIcon = _j === void 0 ? true : _j,
      _k = props.hasClear,
      hasClear = _k === void 0 ? false : _k,
      _l = props.hasCancel,
      hasCancel = _l === void 0 ? false : _l,
      _m = props.disabled,
      disabled = _m === void 0 ? false : _m,
      className = props.className,
      cancelText = props.cancelText,
      onChange = props.onChange,
      _onConfirm = props.onConfirm,
      _onSearch = props.onSearch,
      _o = props.onBlur,
      onBlur = _o === void 0 ? function () {} : _o,
      _p = props.onFocus,
      onFocus = _p === void 0 ? function () {} : _p,
      _q = props.onCancel,
      onCancel = _q === void 0 ? function () {} : _q,
      onClear = props.onClear,
      others = tslib_1.__rest(props, ["prefix", "size", "value", "placeholder", "defaultValue", "searchText", "icon", "keyboardType", "maxLength", "enableNative", "focused", "highlightable", "hasIcon", "hasClear", "hasCancel", "disabled", "className", "cancelText", "onChange", "onConfirm", "onSearch", "onBlur", "onFocus", "onCancel", "onClear"]);

  var clsPrefix = prefix + "search";
  var rcRef = rax_1.useRef(null);
  var ref = _ref || rcRef;

  var _r = rax_1.useState(false),
      isFocused = _r[0],
      setFocused = _r[1];

  var _s = rax_1.useState(true),
      isInForm = _s[0],
      setInForm = _s[1];

  var locale = locale_1.useLocale('Search', props, zh_cn_1.default.Search);

  var _t = hooks_1.useValue(props, ''),
      value = _t[0],
      setValue = _t[1],
      isControlled = _t[2];

  var clses = {
    search: classnames_1.default(className, (_a = {}, _a["" + clsPrefix] = true, _a[clsPrefix + "--" + size] = true, _a[clsPrefix + "--highlighted"] = highlightable && isFocused, _a))
  };
  rax_1.useEffect(function () {
    if (env_1.isWeb && ref && ref.current) {
      var el = ref.current;
      var _inForm = false;

      while (el.parentNode && el.parentNode !== el) {
        if (el.parentNode.tagName && el.parentNode.tagName.toLowerCase() === 'form') {
          _inForm = true;
          break;
        }

        el = el.parentNode;
      }

      setInForm(_inForm);
    }
  }, []);
  var onSearch = hooks_1.useDeprecated('Search', props, 'onConfirm', 'onSearch');

  var handleSubmit = function (v) {
    if (onSearch) {
      onSearch(v);
    }
  };

  var focusProp = tslib_1.__assign({}, focused ? {
    focused: true
  } : null);

  return rax_1.createElement(SearchTag, tslib_1.__assign({}, others, {
    inForm: isInForm,
    className: clses.search,
    onSubmit: function handleWebSubmit() {
      if (env_1.isWeb) {
        var inputEl = ref.current.getElementsByTagName('input');

        if (inputEl && inputEl[0] && inputEl[0].value) {
          handleSubmit(inputEl[0].value);
        } else {
          handleSubmit('');
        }
      }
    }
  }), rax_1.createElement(view_1.default, {
    ref: ref,
    className: classnames_1.default(className, prefix + "search--wrapper")
  }, function renderIcon() {
    var searchIcon = icon;

    if (!hasIcon) {
      searchIcon = null;
    } else if (utils_1.isString(icon)) {
      searchIcon = rax_1.createElement(icon_1.default, {
        name: icon,
        className: classnames_1.default(prefix + "search--icon", prefix + "search--icon-" + size)
      });
    }

    return searchIcon;
  }(), rax_1.createElement(input_1.default, tslib_1.__assign({}, focusProp, {
    className: classnames_1.default(prefix + "search-input", prefix + "search-input--" + size),
    composition: true,
    confirmType: "search",
    value: value,
    size: size,
    placeholder: placeholder || locale.searchTipText,
    keyboardType: keyboardType,
    disabled: disabled,
    maxLength: maxLength,
    hasClear: hasClear,
    enableNative: enableNative,
    onChange: function handleChange(v, e) {
      if (!isControlled) {
        setValue(v);
      }

      if (onChange) {
        onChange(v, e);
      }
    },
    onConfirm: handleSubmit,
    onFocus: function handleFocus() {
      setFocused(true);

      if (utils_1.isFunction(onFocus)) {
        onFocus();
      }
    },
    onBlur: function handleBlur() {
      setFocused(false);

      if (utils_1.isFunction(onBlur)) {
        onBlur();
      }
    },
    onClear: onClear
  }))), hasCancel ? rax_1.createElement(rax_text_1.default, {
    onClick: onCancel,
    className: classnames_1.default(prefix + "search--" + size + "-cancel")
  }, cancelText || locale.cancelText) : null);
};

Search.displayName = 'Search';
exports.default = rax_1.forwardRef(Search);