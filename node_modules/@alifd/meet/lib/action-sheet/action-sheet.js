"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_image_1 = tslib_1.__importDefault(require("rax-image"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var safe_area_1 = tslib_1.__importDefault(require("../safe-area"));

var badge_1 = tslib_1.__importDefault(require("../badge"));

var drawer_1 = tslib_1.__importDefault(require("../drawer"));

var locale_1 = require("../locale");

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var utils_1 = require("../utils");

var ActionSheet = function (props, ref) {
  var _a, _b;

  var _c = props.prefix,
      prefix = _c === void 0 ? 'mt-' : _c,
      message = props.message,
      options = props.options,
      _d = props.visible,
      visible = _d === void 0 ? false : _d,
      _e = props.fullWidth,
      fullWidth = _e === void 0 ? true : _e,
      _f = props.showCancel,
      showCancel = _f === void 0 ? true : _f,
      _g = props.maskClosable,
      maskClosable = _g === void 0 ? true : _g,
      destructiveIndex = props.destructiveIndex,
      cancelText = props.cancelText,
      alignProps = props.align,
      disabledIndexes = props.disabledIndexes,
      onClick = props.onClick,
      onClose = props.onClose,
      className = props.className,
      others = tslib_1.__rest(props, ["prefix", "message", "options", "visible", "fullWidth", "showCancel", "maskClosable", "destructiveIndex", "cancelText", "align", "disabledIndexes", "onClick", "onClose", "className"]);

  var locale = locale_1.useLocale('ActionSheet', others, zh_cn_1.default.ActionSheet);
  var handleOptionClick = rax_1.useCallback(function (option, index, e) {
    if (onClick) {
      onClick(option, index, e);
    }

    if (onClose) {
      onClose(index, e);
    }
  }, [onClick, onClose]);
  var clsPrefix = prefix + "actionsheet";
  var buttons = rax_1.useMemo(function () {
    if (!options) {
      return null;
    }

    var len = options.length;
    return options.map(function (option, index) {
      var _a;

      var disabled = disabledIndexes ? disabledIndexes.indexOf(index) > -1 : false;
      var content = null;
      var align = alignProps || (typeof option === 'object' && option.icon ? 'left' : 'center');

      if (utils_1.isString(option)) {
        content = rax_1.createElement(rax_text_1.default, {
          className: clsPrefix + "-option-text " + clsPrefix + "-option--" + align
        }, option);
      } else if (typeof option === 'object') {
        var badge = option.badge,
            icon = option.icon,
            text = option.text,
            badgeType = option.badgeType;
        content = rax_1.createElement(rax_1.Fragment, null, icon ? rax_1.createElement(rax_image_1.default, {
          source: {
            uri: icon
          },
          className: clsPrefix + "-icon"
        }) : null, rax_1.createElement(view_1.default, {
          className: clsPrefix + "-option-content " + clsPrefix + "-option--" + align
        }, rax_1.createElement(rax_text_1.default, {
          className: clsPrefix + "-option-text"
        }, text), badge ? rax_1.createElement(badge_1.default, {
          className: clsPrefix + "-badge",
          count: badge,
          dot: badgeType === 'dot'
        }) : null));
      }

      return rax_1.createElement(view_1.default, {
        key: clsPrefix + "-option-" + index,
        onClick: function (e) {
          if (!disabled) {
            handleOptionClick(option, index, e);
          }
        },
        className: classnames_1.default(clsPrefix + "-option", (_a = {}, _a[clsPrefix + "-option--destructive"] = destructiveIndex === index, _a[clsPrefix + "-option--disabled"] = disabled, _a[clsPrefix + "-option--advanced"] = typeof option === 'object' && option.icon, _a[clsPrefix + "-option--last"] = index === len - 1, _a))
      }, content);
    });
  }, [options, clsPrefix, disabledIndexes, destructiveIndex, alignProps, handleOptionClick]);
  var handleMaskClose = rax_1.useCallback(function (r, e) {
    return onClose && onClose('mask', e);
  }, [onClose]);
  var handleCancelClose = rax_1.useCallback(function (e) {
    return onClose && onClose('cancel', e);
  }, [onClose]);
  return rax_1.createElement(drawer_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    visible: visible,
    closeMode: maskClosable ? ['mask'] : [],
    className: classnames_1.default(clsPrefix + "-drawer", className),
    placement: "bottom",
    onClose: handleMaskClose,
    disableScroll: true
  }), rax_1.createElement(view_1.default, {
    className: classnames_1.default("" + clsPrefix, (_a = {}, _a[clsPrefix + "--fullwidth"] = fullWidth, _a))
  }, message ? rax_1.createElement(rax_text_1.default, {
    className: clsPrefix + "-msg",
    numberOfLines: 1
  }, message) : null, rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-option-list")
  }, buttons), showCancel ? rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-option", clsPrefix + "-cancel"),
    onClick: handleCancelClose
  }, rax_1.createElement(rax_text_1.default, {
    className: clsPrefix + "-option-text"
  }, cancelText || locale.cancel || 'Cancel')) : null, rax_1.createElement(safe_area_1.default, {
    className: classnames_1.default(clsPrefix + "-safe-area", (_b = {}, _b[clsPrefix + "-safe-area--fullwidth"] = fullWidth, _b))
  })));
};

ActionSheet.displayName = 'ActionSheet';
exports.default = rax_1.forwardRef(ActionSheet);