"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var universal_choose_image_1 = tslib_1.__importDefault(require("universal-choose-image"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var message_1 = tslib_1.__importDefault(require("../message"));

var card_1 = tslib_1.__importDefault(require("./item/card"));

var locale_1 = require("../locale");

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var request_1 = tslib_1.__importDefault(require("./request"));

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

var utils_2 = require("./utils");

var types_1 = require("../utils/types");

var FILE_CACHAE = {};

var updateFileStatus = function (files) {
  if (files === void 0) {
    files = [];
  }

  if (!utils_1.isValidArray(files)) {
    return [];
  }

  return tslib_1.__spreadArrays(files).map(function (file) {
    var uid = file.uid,
        state = file.state;

    if (FILE_CACHAE[uid] === 'done' && state === 'uploading') {
      file.state = 'done';
    }

    return file;
  });
};

var Upload = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      extraIcon = props.extraIcon,
      className = props.className,
      action = props.action,
      _b = props.limit,
      limit = _b === void 0 ? 1 : _b,
      _c = props.label,
      label = _c === void 0 ? '' : _c,
      valueProp = props.value,
      defaultValue = props.defaultValue,
      dataProp = props.data,
      headers = props.headers,
      request = props.request,
      formatter = props.formatter,
      disabled = props.disabled,
      _d = props.cols,
      cols = _d === void 0 ? 4 : _d,
      _e = props.size,
      size = _e === void 0 ? 'medium' : _e,
      _f = props.listType,
      listType = _f === void 0 ? 'card' : _f,
      _g = props.name,
      nameProp = _g === void 0 ? 'file' : _g,
      filePicker = props.filePicker,
      withCredentials = props.withCredentials,
      fileKeyName = props.fileKeyName,
      _h = props.fileType,
      fileType = _h === void 0 ? 'image' : _h,
      _j = props.accept,
      accept = _j === void 0 ? 'image/*' : _j,
      _k = props.useDataURL,
      useDataURL = _k === void 0 ? true : _k,
      _l = props.autoUpload,
      autoUpload = _l === void 0 ? true : _l,
      _m = props.hasRemove,
      hasRemove = _m === void 0 ? true : _m,
      _o = props.showAddButton,
      showAddButton = _o === void 0 ? true : _o,
      _p = props.singleLimit,
      singleLimit = _p === void 0 ? 9 : _p,
      beforeUpload = props.beforeUpload,
      afterSelect = props.afterSelect,
      onProgress = props.onProgress,
      _onSuccess = props.onSuccess,
      _onError = props.onError,
      progressProps = props.progressProps,
      onSelect = props.onSelect,
      onChange = props.onChange,
      onRemove = props.onRemove,
      onPreview = props.onPreview,
      _q = props.sizeType,
      sizeType = _q === void 0 ? ['original', 'compressed'] : _q,
      _r = props.sourceType,
      sourceType = _r === void 0 ? ['album', 'camera'] : _r,
      children = props.children,
      style = props.style,
      others = tslib_1.__rest(props, ["prefix", "extraIcon", "className", "action", "limit", "label", "value", "defaultValue", "data", "headers", "request", "formatter", "disabled", "cols", "size", "listType", "name", "filePicker", "withCredentials", "fileKeyName", "fileType", "accept", "useDataURL", "autoUpload", "hasRemove", "showAddButton", "singleLimit", "beforeUpload", "afterSelect", "onProgress", "onSuccess", "onError", "progressProps", "onSelect", "onChange", "onRemove", "onPreview", "sizeType", "sourceType", "children", "style"]);

  var locale = locale_1.useLocale('Upload', others, zh_cn_1.default.Upload);

  var _s = rax_1.useState('0px'),
      itemSize = _s[0],
      setItemSize = _s[1];

  var _t = rax_1.useState(valueProp || defaultValue || []),
      value = _t[0],
      setValue = _t[1];

  var newestValue = rax_1.useRef(value);
  var timerQueue = rax_1.useRef([]);
  var uploadRef = rax_1.useRef();
  var uploadId = hooks_1.useGuid('mtUpload');

  var uploadStyle = tslib_1.__assign({
    gridTemplateColumns: "repeat(" + cols + ", 1fr)"
  }, style);

  rax_1.useEffect(function () {
    if (utils_1.isValidArray(valueProp)) {
      valueProp.forEach(function (file) {
        if (file.state && file.uid) {
          FILE_CACHAE[file.uid] = file.state;
        }
      });
    }

    setTimeout(function () {
      (function () {
        return tslib_1.__awaiter(void 0, void 0, void 0, function () {
          var width, newCardSize;
          return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                return [4, utils_1.getWidth(uploadId)];

              case 1:
                width = _a.sent();
                newCardSize = "calc(((" + width + "px - var(--upload-card-spacing)*" + (cols - 1) + " )) / " + cols + ")";
                setItemSize(newCardSize);
                return [2];
            }
          });
        });
      })();
    }, 200);
    return function () {
      timerQueue.current.forEach(function (x) {
        return clearInterval(x);
      });
      timerQueue.current = [];
    };
  }, []);
  var getFile = rax_1.useCallback(function (uid) {
    var item = newestValue.current.find(function (it) {
      return it.uid === uid;
    });

    if (item) {
      return {
        file: item,
        index: newestValue.current.indexOf(item)
      };
    }

    return undefined;
  }, []);
  var updateFile = rax_1.useCallback(function (uid, mod) {
    var gotFile = getFile(uid);

    if (!gotFile) {
      throw new Error("File id " + uid + " not found");
    }

    var file = gotFile.file,
        index = gotFile.index;

    if (mod.state) {
      FILE_CACHAE[uid] = mod.state;
    }

    var isSame = true;

    for (var k in mod) {
      if (mod.hasOwnProperty(k) && file[k] !== mod[k]) {
        isSame = false;
        break;
      }
    }

    if (isSame) {
      return file;
    }

    var newFile = tslib_1.__assign(tslib_1.__assign({}, file), mod);

    var newValue = tslib_1.__spreadArrays(newestValue.current);

    newValue.splice(index, 1, newFile);
    newestValue.current = newValue;

    if (onChange) {
      onChange(newValue);
    }

    if (!('value' in props)) {
      setValue(newValue);
    }

    return newFile;
  }, [valueProp, onChange]);
  var uploadFiles = rax_1.useCallback(function (files) {
    var uploadFile = function (it) {
      return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var uid, options, res, e_1, curFile, timer, clearTimer, complete, newProcess;
        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (it.state !== 'selected') {
                return [2];
              }

              uid = it.uid;
              updateFile(uid, {
                state: 'pending'
              });
              options = {
                action: action,
                data: dataProp || {},
                headers: headers || {}
              };

              if (utils_1.isFunction(options.data)) {
                options.data = options.data();
              }

              if (!beforeUpload) return [3, 7];
              _a.label = 1;

            case 1:
              _a.trys.push([1, 6,, 7]);

              res = beforeUpload(it, options);
              if (!utils_1.isBoolean(res)) return [3, 2];

              if (res === false) {
                updateFile(uid, {
                  state: 'uploading'
                });
                return [2];
              }

              return [3, 5];

            case 2:
              if (!types_1.isPromise(res)) return [3, 4];
              return [4, res];

            case 3:
              options = _a.sent();
              return [3, 5];

            case 4:
              options = res;
              _a.label = 5;

            case 5:
              return [3, 7];

            case 6:
              e_1 = _a.sent();
              updateFile(uid, {
                state: 'error'
              });
              console.error(e_1);
              return [2];

            case 7:
              curFile = updateFile(uid, {
                state: 'uploading'
              });

              if (onProgress) {
                onProgress();
              }

              if (!(options === null || options === void 0 ? void 0 : options.action)) {
                console.warn('Upload request failed,  action prop is required');
                curFile = updateFile(uid, {
                  state: 'error'
                });

                if (_onError) {
                  _onError(curFile, newestValue.current);
                }

                return [2];
              }

              timer = null;

              clearTimer = function () {
                if (timer && timerQueue.current.includes(timer)) {
                  clearInterval(timer);
                  timerQueue.current.splice(timerQueue.current.indexOf(timer), 1);
                }

                timer = null;
              };

              complete = function () {
                return clearTimer();
              };

              newProcess = 0;
              return [4, new Promise(function (resolve) {
                var requestObj = {
                  onProgress: function (ev) {
                    if (curFile.state !== 'uploading') {
                      return;
                    }

                    if (!timer) {
                      timer = setInterval(function () {
                        if (curFile.state !== 'uploading') {
                          clearTimer();
                          return;
                        }

                        curFile = updateFile(uid, {
                          state: 'uploading',
                          percent: newProcess
                        });

                        if (newProcess === 100) {
                          clearTimer();
                        }
                      }, utils_2.UPLOAD_THROTTLE);
                      timerQueue.current.push(timer);
                    }

                    newProcess = ev.percent;
                  },
                  onError: function onError(err, body) {
                    console.error('Upload request failed', err);
                    curFile = updateFile(uid, {
                      state: 'error',
                      response: body
                    });

                    if (_onError) {
                      _onError(curFile, newestValue.current);
                    }

                    resolve('error');
                    complete();
                  },
                  onSuccess: function onSuccess(res) {
                    res.status = res.statusCode;

                    if (utils_1.isString(res.data)) {
                      try {
                        res.data = JSON.parse(res.data);
                      } catch (e) {}
                    }

                    var result = formatter ? formatter(res, it) : res.data;

                    if (typeof result !== 'object') {
                      console.error("Expect a json object response, " + result + " got");
                      curFile = updateFile(uid, {
                        state: 'error'
                      });

                      if (_onError) {
                        _onError(curFile, newestValue.current);
                      }

                      resolve('error');
                      return;
                    }

                    var finalState = {
                      response: result,
                      percent: 100,
                      state: result.success ? 'done' : 'error'
                    };

                    if (result.success && result.url) {
                      finalState.url = result.url;
                      finalState.imgURL = result.imgURL || result.url;
                      finalState.downloadURL = result.downloadURL || result.url;
                    }

                    curFile = updateFile(uid, finalState);

                    if (finalState.state === 'done' && _onSuccess) {
                      _onSuccess(curFile, newestValue.current);
                    }

                    if (finalState.state === 'error' && _onError) {
                      _onError(curFile, newestValue.current);
                    }

                    clearTimer();
                    resolve('success');
                  },
                  fileType: fileType,
                  data: options.data,
                  filename: fileKeyName || nameProp,
                  file: it.file,
                  withCredentials: withCredentials,
                  action: options.action,
                  method: 'post',
                  timeout: 0,
                  headers: options.headers
                };

                if (request) {
                  request(requestObj);
                } else {
                  request_1.default(requestObj);
                }
              })];

            case 8:
              _a.sent();

              return [2];
          }
        });
      });
    };

    if (!utils_1.isValidArray(files)) {
      return;
    }

    try {
      Promise.all(files.map(function (it) {
        return uploadFile(it);
      })).then(function () {
        var arr = updateFileStatus(newestValue.current);

        if (arr) {
          if (utils_1.isFunction(onChange)) {
            onChange(arr);
          }

          if (!('value' in props)) {
            setValue(arr);
            newestValue.current = arr;
          }
        }
      });
    } catch (e) {
      console.warn('上传失败');
    }
  }, [action, dataProp, headers, beforeUpload, onProgress, formatter, _onSuccess, _onError, request]);
  var doUpload = rax_1.useCallback(function () {
    return uploadFiles(newestValue.current.filter(function (it) {
      return it.state === 'selected';
    }));
  }, []);
  var doReUpload = rax_1.useCallback(function (it) {
    updateFile(it.uid, {
      state: 'selected',
      percent: 0
    });
    doUpload();
  }, []);
  var handleAdd = rax_1.useCallback(function () {
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
      var file, defaultSizeType, defaultSourceType, mediaType, e_2, fileItems, newValue;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (limit <= newestValue.current.length || disabled) {
              message_1.default.notice(utils_1.replaceMessage(locale.limit, {
                limit: limit
              }));
              return [2];
            }

            defaultSizeType = ['original', 'compressed'];
            defaultSourceType = ['album', 'camera'];
            _a.label = 1;

          case 1:
            _a.trys.push([1, 8,, 9]);

            if (!utils_1.isFunction(filePicker)) return [3, 3];
            return [4, filePicker()];

          case 2:
            file = _a.sent();
            return [3, 7];

          case 3:
            if (!utils_1.isStrictWechatMiniProgram) return [3, 5];
            mediaType = ['video', 'image'];

            if (accept === 'image/*') {
              mediaType = ['image'];
            } else if (accept === 'video/*') {
              mediaType = ['video'];
            }

            return [4, utils_2.chooseImageForWechat({
              count: Math.min(singleLimit, limit - newestValue.current.length),
              mediaType: mediaType,
              sizeType: sizeType || defaultSizeType,
              sourceType: sourceType || defaultSourceType
            })];

          case 4:
            file = _a.sent();
            return [3, 7];

          case 5:
            return [4, universal_choose_image_1.default({
              count: Math.min(singleLimit, limit - newestValue.current.length),
              accept: accept,
              sizeType: sizeType || defaultSizeType,
              sourceType: sourceType || defaultSourceType
            })];

          case 6:
            file = _a.sent();
            _a.label = 7;

          case 7:
            return [3, 9];

          case 8:
            e_2 = _a.sent();
            console.error(e_2);
            return [3, 9];

          case 9:
            if (!file || !Array.isArray(file === null || file === void 0 ? void 0 : file.data)) {
              return [2];
            }

            fileItems = file.data.map(function (it, index) {
              return utils_2.createFileItem(it, file.files ? file.files[index] : null);
            });

            if (afterSelect) {
              fileItems = fileItems.filter(function (it) {
                return afterSelect(it) !== false;
              });
            }

            if (useDataURL) {
              fileItems.forEach(function (it) {
                if (it.dataURL && it.isImage) {
                  it.imgURL = it.dataURL;
                }
              });
            }

            if (onSelect) {
              onSelect();
            }

            newValue = tslib_1.__spreadArrays(newestValue.current, fileItems);

            if (onChange) {
              onChange(newValue);
            }

            if (!('value' in props)) {
              setValue(newValue);
              newestValue.current = newValue;
            }

            if (autoUpload) {
              doUpload();
            }

            return [2];
        }
      });
    });
  }, [limit, disabled, locale, sizeType, sourceType, afterSelect, autoUpload, onSelect, onChange]);
  var handleRemove = rax_1.useCallback(function (file) {
    var doRemove = function () {
      var index = newestValue.current.indexOf(file);

      if (index === -1) {
        return;
      }

      var newValue = tslib_1.__spreadArrays(newestValue.current);

      newValue.splice(index, 1);

      if (onChange) {
        onChange(newValue);
      }

      if (!('value' in props)) {
        setValue(newValue);
        newestValue.current = newValue;
      }
    };

    if (!onRemove) {
      doRemove();
      return;
    }

    var result = onRemove(file);

    if (utils_1.isBoolean(result)) {
      if (result === true) {
        doRemove();
      }

      return;
    }

    if (types_1.isPromise(result)) {
      result.then(function (should) {
        return should && doRemove();
      }).catch(function () {});
    }
  }, [onChange, onRemove]);
  var handleItemClick = rax_1.useCallback(function (file, e) {
    if (onPreview) {
      onPreview(file, tslib_1.__assign(tslib_1.__assign({}, e), {
        fileList: value
      }));
    }
  }, [onPreview]);
  rax_1.useEffect(function () {
    if ('value' in props) {
      newestValue.current = updateFileStatus(valueProp || defaultValue || []);
      setValue(newestValue.current);

      if (autoUpload) {
        doUpload();
      }
    }
  }, [valueProp]);
  rax_1.useImperativeHandle(ref, function () {
    return Object.assign(uploadRef.current, {
      add: handleAdd,
      upload: doUpload,
      getInstance: function getInstance() {
        return {
          startUpload: doUpload
        };
      }
    });
  });
  var clsPrefix = prefix + "upload";
  var hasAdd = showAddButton && limit > value.length && !disabled;
  var ItemComponent = card_1.default;
  return rax_1.createElement(view_1.default, {
    id: uploadId,
    ref: uploadRef
  }, label || extraIcon ? rax_1.createElement(view_1.default, {
    className: clsPrefix + "-header"
  }, rax_1.createElement(rax_text_1.default, {
    className: clsPrefix + "-label " + clsPrefix + "-label--" + size
  }, label), extraIcon ? rax_1.createElement(view_1.default, {
    className: clsPrefix + "-extra"
  }, rax_1.createElement(rax_text_1.default, {
    className: clsPrefix + "-counter"
  }, value.length || 0, "/", limit), rax_1.createElement(icon_1.default, {
    className: clsPrefix + "-extra-icon",
    size: size,
    onClick: handleAdd,
    name: extraIcon
  })) : null) : null, rax_1.createElement(view_1.default, tslib_1.__assign({
    className: classnames_1.default(clsPrefix, clsPrefix + "--" + listType, className),
    style: uploadStyle
  }, others), value.map(function (file) {
    return rax_1.createElement(ItemComponent, {
      key: file.uid,
      file: file,
      prefix: clsPrefix,
      progressProps: progressProps,
      onClick: handleItemClick,
      reUpload: locale.reupload,
      onReUpload: doReUpload,
      hasRemove: hasRemove && !disabled,
      onRemove: handleRemove,
      style: {
        width: "" + itemSize,
        height: "" + itemSize
      }
    });
  }), hasAdd && rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-item", clsPrefix + "-item--add", clsPrefix + "-item--" + listType),
    onClick: handleAdd,
    style: {
      width: "" + itemSize,
      height: "" + itemSize
    }
  }, children ? children : rax_1.createElement(icon_1.default, {
    className: clsPrefix + "-item-icon",
    name: "add"
  }))));
};

Upload.displayName = 'Upload';
exports.default = rax_1.forwardRef(Upload);