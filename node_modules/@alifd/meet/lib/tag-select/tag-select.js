"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var view_1 = tslib_1.__importDefault(require("../view"));

var form_1 = require("../form");

var tag_1 = tslib_1.__importDefault(require("../tag"));

var hooks_1 = require("../utils/hooks");

var Selectable = tag_1.default.Selectable;

var TagSelect = function (props, ref) {
  var _a;

  var _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      isPreview = props.isPreview,
      className = props.className,
      _c = props.dataSource,
      dataSource = _c === void 0 ? [] : _c,
      _d = props.mode,
      mode = _d === void 0 ? 'single' : _d,
      onChange = props.onChange,
      sizeProp = props.size,
      disabled = props.disabled,
      _e = props.inlineMode,
      inlineMode = _e === void 0 ? false : _e;

  var _f = rax_1.useContext(form_1.ItemContext),
      isInsideForm = _f.isInsideForm,
      contextSize = _f.size;

  var size = sizeProp || (isInsideForm ? contextSize : 'medium');

  var _g = hooks_1.useValue(props, [], {
    fitValue: function fitValue(v) {
      return Array.isArray(v) ? v : [v];
    },
    compare: function compare(a, b) {
      return a.join(',') === b.join(',');
    }
  }),
      value = _g[0],
      setValue = _g[1],
      isControlled = _g[2];

  var handleClick = function (v) {
    if (isPreview) {
      return;
    }

    if (mode === 'single') {
      var hasChecked = value.includes(v);

      if (isControlled) {
        if (onChange) {
          onChange(hasChecked ? undefined : v);
        }
      } else {
        setValue(hasChecked ? [] : [v]);
      }
    } else {
      var newValue = tslib_1.__spreadArrays(value);

      if (newValue.includes(v)) {
        newValue.splice(newValue.indexOf(v), 1);
      } else {
        newValue.push(v);
      }

      if (isControlled) {
        if (onChange) {
          onChange(newValue);
        }
      } else {
        setValue(newValue);
      }
    }
  };

  var tagType;

  if (isPreview) {
    tagType = 'primary';
  } else {
    tagType = mode === 'single' ? 'primary' : 'normal';
  }

  var clsPrefix = prefix + "tag-select";
  return rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix, clsPrefix + "--" + size, className, (_a = {}, _a[clsPrefix + "--inline"] = inlineMode, _a)),
    ref: ref
  }, dataSource.map(function (it) {
    var v = typeof it === 'object' ? it.value : it;
    var label = typeof it === 'object' ? it.label : it;
    var itemDisabled = disabled || (typeof it === 'object' ? it.disabled : false);
    return rax_1.createElement(Selectable, {
      key: v,
      size: size,
      type: tagType,
      disabled: itemDisabled,
      onChange: handleClick.bind(null, v),
      checked: isPreview ? false : value.includes(v)
    }, label);
  }));
};

exports.default = rax_1.forwardRef(TagSelect);