"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var form_1 = tslib_1.__importDefault(require("../form"));

var hooks_1 = require("../utils/hooks");

var Rating = function (props, ref) {
  var _a, _b;

  var _c = props.prefix,
      prefix = _c === void 0 ? 'mt-' : _c,
      sizeProp = props.size,
      _d = props.disabled,
      disabled = _d === void 0 ? false : _d,
      _e = props.readOnly,
      readOnly = _e === void 0 ? false : _e,
      _f = props.count,
      count = _f === void 0 ? 5 : _f,
      _g = props.iconType,
      iconType = _g === void 0 ? 'favorites-filling' : _g,
      onChange = props.onChange,
      className = props.className,
      style = props.style;

  var _h = hooks_1.useValue(props, 0),
      value = _h[0],
      setValue = _h[1],
      isControlled = _h[2];

  var _j = rax_1.useContext(form_1.default.ItemContext),
      contentAlign = _j.contentAlign,
      contextSize = _j.size;

  var size = sizeProp || contextSize;
  var gradeType = value > count * 0.4 ? 'high' : 'low';
  var iconClassName = classnames_1.default(prefix + "rating--" + size + "-icon", prefix + "rating-icon");
  var classnames = {
    rating: classnames_1.default(prefix + "rating", prefix + "rating--" + size, prefix + "rating--" + contentAlign, prefix + "rating--grade-" + gradeType, (_a = {}, _a[prefix + "rating--readonly"] = readOnly, _a[prefix + "rating--disabled"] = disabled, _a), className),
    iconWrapper: classnames_1.default(prefix + "rating--" + size + "-icon-wrapper", prefix + "rating-icon-wrapper"),
    icon: iconClassName,
    activeIcon: classnames_1.default(iconClassName, prefix + "rating-icon--active", prefix + "rating-icon--active-" + gradeType)
  };

  var handleClick = function (v) {
    if (disabled || readOnly || v < 0) {
      return;
    }

    if (!isControlled) {
      setValue(v);
    }

    if (onChange) {
      onChange(v);
    }
  };

  var stars = [];

  for (var i = 0; i < count; i++) {
    var isActive = Math.floor(value - 1) >= i;
    var half = value - i < 1 && value - i > 0 ? rax_1.createElement(view_1.default, {
      key: i + "-overlay",
      className: classnames_1.default(classnames.iconWrapper, classnames.iconWrapper + "--overlay"),
      onClick: handleClick.bind(null, i + 1)
    }, rax_1.createElement(icon_1.default, {
      name: iconType,
      size: size,
      className: classnames.activeIcon,
      style: {
        width: 100 * (value - i) + "%"
      }
    })) : null;
    stars.push(rax_1.createElement(view_1.default, {
      key: i,
      className: classnames_1.default(classnames.iconWrapper, (_b = {}, _b[classnames.iconWrapper + "--first"] = i === 0, _b[classnames.iconWrapper + "--last"] = i === count - 1, _b)),
      onClick: handleClick.bind(null, i + 1)
    }, rax_1.createElement(icon_1.default, {
      name: iconType,
      size: size,
      className: isActive ? classnames.activeIcon : classnames.icon
    }), half));
  }

  return rax_1.createElement(view_1.default, {
    ref: ref,
    className: classnames.rating,
    style: style
  }, stars);
};

Rating.displayName = 'Rating';
exports.default = rax_1.forwardRef(Rating);