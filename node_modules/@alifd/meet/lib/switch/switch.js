"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var vibrate_1 = require("@uni/vibrate");

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var utils_1 = require("../utils");

var getCheckedState = function (props) {
  return utils_1.isUndef(props.checked) ? !!props.defaultChecked : !!props.checked;
};

var Switch = function (props) {
  var _a;

  var _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      className = props.className,
      style = props.style,
      _c = props.size,
      size = _c === void 0 ? 'medium' : _c,
      _d = props.defaultChecked,
      defaultChecked = _d === void 0 ? false : _d,
      checked = props.checked,
      _e = props.disabled,
      disabled = _e === void 0 ? false : _e,
      _f = props.readOnly,
      readOnly = _f === void 0 ? false : _f,
      _g = props.loading,
      loading = _g === void 0 ? false : _g,
      _h = props.vibrative,
      vibrative = _h === void 0 ? true : _h,
      onChange = props.onChange,
      others = tslib_1.__rest(props, ["prefix", "className", "style", "size", "defaultChecked", "checked", "disabled", "readOnly", "loading", "vibrative", "onChange"]);

  var initChecked = getCheckedState(props);

  var _j = rax_1.useState(initChecked),
      hasChecked = _j[0],
      setChecked = _j[1];

  var checkedPrefix = hasChecked ? '-checked' : '';
  var disabledPrefix = disabled ? '-disabled' : '';
  var switchClassNames = classnames_1.default(prefix + "switch", prefix + "switch--" + size, (_a = {}, _a[prefix + "switch-" + disabledPrefix + checkedPrefix] = hasChecked || disabled, _a), className);
  var switchKnobClassNames = classnames_1.default(prefix + "switch-knob", prefix + "switch-knob--" + size + checkedPrefix);
  var switchLoadingClassNames = classnames_1.default(prefix + "switch-knob-loading", prefix + "switch-knob-loading--" + size);

  var onSwitchTap = function (e) {
    if (disabled || readOnly) {
      return;
    }

    var checkedValue = !hasChecked;

    if (vibrative) {
      vibrate_1.vibrateShort({}).then(function () {});
    }

    if (!('checked' in props)) {
      setChecked(checkedValue);
    }

    if (onChange) {
      onChange(checkedValue, e);
    }
  };

  rax_1.useEffect(function () {
    if (initChecked !== hasChecked) {
      setChecked(initChecked);
    }
  }, [checked]);
  return rax_1.createElement(view_1.default, tslib_1.__assign({
    className: switchClassNames,
    style: style,
    onClick: onSwitchTap
  }, others), rax_1.createElement(view_1.default, {
    className: switchKnobClassNames
  }, loading ? rax_1.createElement(icon_1.default, {
    className: switchLoadingClassNames,
    name: "loading"
  }) : null));
};

Switch.displayName = 'Switch';
exports.default = rax_1.forwardRef(Switch);