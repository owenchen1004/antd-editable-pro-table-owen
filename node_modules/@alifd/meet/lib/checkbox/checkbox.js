"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

var Checkbox = function (props, ref) {
  var _a = props.size,
      size = _a === void 0 ? 'medium' : _a,
      _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      children = props.children,
      _checked = props.checked,
      _indeterminate = props.indeterminate,
      disabled = props.disabled,
      className = props.className,
      _defaultChecked = props.defaultChecked,
      _defaultIndeterminate = props.defaultIndeterminate,
      _c = props.checkIcon,
      checkIcon = _c === void 0 ? 'select' : _c,
      _d = props.indeterminateIcon,
      indeterminateIcon = _d === void 0 ? 'semi-select' : _d,
      readOnly = props.readOnly,
      onChange = props.onChange,
      value = props.value,
      label = props.label,
      text = props.text,
      others = tslib_1.__rest(props, ["size", "prefix", "children", "checked", "indeterminate", "disabled", "className", "defaultChecked", "defaultIndeterminate", "checkIcon", "indeterminateIcon", "readOnly", "onChange", "value", "label", "text"]);

  var _e = hooks_1.useValue(props, false, {
    valueName: 'checked'
  }),
      checked = _e[0],
      setChecked = _e[1],
      isCheckedControlled = _e[2];

  var _f = hooks_1.useValue(props, false, {
    valueName: 'indeterminate'
  }),
      indeterminate = _f[0],
      setIndeterminate = _f[1],
      isIndeterminateControlled = _f[2];

  var state = 'normal';
  var selectedPrefix = !indeterminate && checked ? '--selected' : '--unselected';
  var disabledPrefix = disabled ? '-disabled' : '';
  var indeterminatePrefix = indeterminate ? '-indeterminate' : '';
  var statePrefix = '';
  var iconCls = classnames_1.default(prefix + "checkbox-icon", prefix + "checkbox-icon--" + size, prefix + "checkbox-icon" + selectedPrefix + indeterminatePrefix + disabledPrefix);
  var textCls = classnames_1.default(prefix + "checkbox-text", prefix + "checkbox-text--" + size, prefix + "checkbox-text" + selectedPrefix + indeterminatePrefix + disabledPrefix);
  var handleClick = rax_1.useCallback(function (e) {
    if (disabled || readOnly) {
      return;
    }

    var newChecked = null;

    if (indeterminate) {
      if (isIndeterminateControlled) {
        if (onChange) {
          onChange(!checked, e);
        }

        return;
      } else {
        setIndeterminate(false);
        newChecked = true;
      }
    }

    if (newChecked === null) {
      newChecked = !checked;
    }

    if (!isCheckedControlled) {
      setChecked(newChecked);
    }

    if (onChange) {
      onChange(newChecked, e);
    }
  }, [onChange, disabled, readOnly, checked, setChecked, isCheckedControlled, indeterminate, setIndeterminate, isIndeterminateControlled]);
  return rax_1.createElement(view_1.default, tslib_1.__assign({
    ref: ref
  }, others, {
    className: classnames_1.default(prefix + "checkbox-container", prefix + "checkbox-container--" + size, className),
    onClick: handleClick
  }), rax_1.createElement(view_1.default, {
    className: classnames_1.default(prefix + "checkbox-circle", prefix + "checkbox-circle--" + size, prefix + "checkbox-circle" + selectedPrefix + indeterminatePrefix + statePrefix + disabledPrefix)
  }, indeterminate && rax_1.createElement(icon_1.default, {
    name: indeterminateIcon,
    className: iconCls
  }), checked && !indeterminate && rax_1.createElement(icon_1.default, {
    name: checkIcon,
    className: iconCls
  })), function renderChildren(c) {
    if (utils_1.isString(c)) {
      return rax_1.createElement(rax_text_1.default, {
        className: textCls
      }, children);
    } else if (!utils_1.isUndef(c)) {
      return rax_1.createElement(view_1.default, {
        className: textCls
      }, children);
    }

    return null;
  }(children));
};

Checkbox.displayName = 'Checkbox';
exports.default = rax_1.forwardRef(Checkbox);