"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var checkbox_1 = tslib_1.__importDefault(require("./checkbox"));

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

var tree_1 = require("../utils/tree");

var CheckboxGroup = function (props, ref) {
  var _a = props.size,
      size = _a === void 0 ? 'medium' : _a,
      _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      _c = props.direction,
      direction = _c === void 0 ? 'ver' : _c,
      defaultValue = props.defaultValue,
      dataSource = props.dataSource,
      className = props.className,
      onChange = props.onChange,
      disabled = props.disabled,
      children = props.children,
      readOnly = props.readOnly,
      valueProp = props.value,
      labelAlign = props.labelAlign,
      isPreview = props.isPreview,
      renderPreview = props.renderPreview,
      previewClassNameProp = props.previewClassName,
      previewStyle = props.previewStyle,
      others = tslib_1.__rest(props, ["size", "prefix", "direction", "defaultValue", "dataSource", "className", "onChange", "disabled", "children", "readOnly", "value", "labelAlign", "isPreview", "renderPreview", "previewClassName", "previewStyle"]);

  var previewClassName = classnames_1.default(previewClassNameProp, prefix + "form-item-input--preview-" + size);

  var _d = hooks_1.useValue(props, [], {
    fitValue: function fitValue(v) {
      if (v && !Array.isArray(v)) {
        return [v];
      }

      if (!utils_1.isValidArray(v)) {
        return [];
      }

      return v;
    },
    compare: function compare(a, b) {
      return a.toString() === b.toString();
    }
  }),
      value = _d[0],
      setValue = _d[1],
      isControlled = _d[2];

  var handleChange = rax_1.useCallback(function (selected, checkBoxValue, e) {
    if (!selected) {
      var index = value.indexOf(checkBoxValue);

      var newGroup = tslib_1.__spreadArrays(value);

      if (index >= 0) {
        newGroup.splice(index, 1);

        if (!isControlled) {
          setValue(newGroup);
        }
      }

      if (!disabled && !readOnly && onChange) {
        onChange(newGroup, e);
      }
    }

    if (!disabled && !readOnly && selected) {
      var newGroup = tslib_1.__spreadArrays(value, [checkBoxValue]);

      if (!isControlled) {
        setValue(newGroup);
      }

      if (onChange) {
        onChange(newGroup, e);
      }
    }
  }, [value, setValue, isControlled, onChange]);
  var content;
  var ds = dataSource;

  if (!ds && rax_children_1.default.count(children) > 0) {
    ds = utils_1.getDataSourceFromChildren(children);
  }

  if (utils_1.isValidArray(ds)) {
    content = ds.map(function (item, index) {
      var _a;

      var itemData = {
        style: {},
        value: null,
        checked: false,
        label: '',
        text: '',
        disabled: false,
        size: size
      };

      var itemOnClick = item.onClick,
          itemOnChange = item.onChange,
          itemClassName = item.className,
          itemLabel = item.label,
          itemText = item.text,
          itemRest = tslib_1.__rest(item, ["onClick", "onChange", "className", "label", "text"]);

      if (utils_1.isString(item) || utils_1.isNumber(item)) {
        itemData.value = item;
      } else {
        itemData = tslib_1.__assign(tslib_1.__assign({}, itemData), itemRest);
      }

      var label = itemLabel || itemText || itemData.value;
      var isLast = index === ds.length - 1;
      return rax_1.createElement(checkbox_1.default, tslib_1.__assign({}, itemData, {
        key: "meet_ck_" + index,
        className: classnames_1.default(itemClassName, (_a = {}, _a[prefix + "checkbox-item--" + direction + "-" + size] = !isLast, _a)),
        style: itemData.style,
        onChange: function (selected, e) {
          return handleChange(selected, itemData.value, e);
        },
        checked: itemData.checked || value.includes(itemData.value),
        disabled: disabled || itemData.disabled,
        onClick: itemOnClick
      }), label);
    });
  }

  if (isPreview) {
    if (utils_1.isFunction(renderPreview)) {
      return rax_1.createElement(view_1.default, {
        className: previewClassName,
        style: previewStyle
      }, renderPreview(tree_1.getItemsFromDataSource(ds, value)));
    }

    return rax_1.createElement(rax_text_1.default, {
      className: previewClassName,
      style: previewStyle
    }, tree_1.getItemsFromDataSource(ds, value).map(function (v) {
      return v.label || v.text;
    }).join(','));
  }

  return rax_1.createElement(view_1.default, tslib_1.__assign({
    ref: ref,
    className: classnames_1.default(className, prefix + "checkbox-group", prefix + "checkbox-group--" + direction, prefix + "checkbox-group--" + labelAlign + "-" + size)
  }, others), content);
};

CheckboxGroup.displayName = 'Checkbox.Group';
exports.default = rax_1.forwardRef(CheckboxGroup);