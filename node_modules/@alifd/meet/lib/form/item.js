"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormItemContext = void 0;

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var rax_clone_element_1 = tslib_1.__importDefault(require("rax-clone-element"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var list_1 = tslib_1.__importDefault(require("../list"));

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

var context_1 = tslib_1.__importDefault(require("./context"));

var utils_2 = require("./utils");

exports.FormItemContext = rax_1.createContext({
  isInsideForm: false,
  labelAlign: 'top',
  validateState: 'normal',
  labelTextAlign: 'left',
  contentAlign: 'left',
  hasFeedback: true,
  size: 'medium'
});

var FormItem = function (props, ref) {
  var _a, _b, _c, _d, _e;

  var _f = props.prefix,
      prefix = _f === void 0 ? 'mt-' : _f,
      label = props.label,
      labelWidthProp = props.labelWidth,
      labelAlignProp = props.labelAlign,
      labelTextAlignProp = props.labelTextAlign,
      contentAlignProp = props.contentAlign,
      helpProp = props.help,
      extra = props.extra,
      className = props.className,
      style = props.style,
      children = props.children,
      isPreviewProp = props.isPreview,
      renderPreview = props.renderPreview,
      validateStateProp = props.validateState,
      _g = props.hasFeedback,
      hasFeedback = _g === void 0 ? false : _g,
      _h = props.embedded,
      embedded = _h === void 0 ? false : _h,
      previewClassNameProp = props.previewClassName,
      _j = props.previewStyle,
      previewStyle = _j === void 0 ? {} : _j,
      sizeProp = props.size,
      valuePropName = props.valuePropName,
      required = props.required,
      requiredMessage = props.requiredMessage,
      requiredTrigger = props.requiredTrigger,
      min = props.min,
      max = props.max,
      minmaxMessage = props.minmaxMessage,
      minmaxTrigger = props.minmaxTrigger,
      minLength = props.minLength,
      maxLength = props.maxLength,
      minmaxLengthMessage = props.minmaxLengthMessage,
      minmaxLengthTrigger = props.minmaxLengthTrigger,
      length = props.length,
      lengthMessage = props.lengthMessage,
      lengthTrigger = props.lengthTrigger,
      pattern = props.pattern,
      patternMessage = props.patternMessage,
      patternTrigger = props.patternTrigger,
      format = props.format,
      formatMessage = props.formatMessage,
      formatTrigger = props.formatTrigger,
      validator = props.validator,
      validatorTrigger = props.validatorTrigger;

  var _k = rax_1.useContext(context_1.default),
      contextLabelAlign = _k.labelAlign,
      contextLabelWidth = _k.labelWidth,
      contextLabelTextAlign = _k.labelTextAlign,
      useLabelForErrorMessage = _k.useLabelForErrorMessage,
      contextContentAlign = _k.contentAlign,
      form = _k.form,
      field = _k.field,
      sizeContext = _k.size,
      contextIsPreview = _k.isPreview;

  var itemId = hooks_1.useGuid('form-item-');
  var size = sizeProp || sizeContext;
  var valueNames = [];
  var validateName;

  if (label && useLabelForErrorMessage) {
    validateName = utils_1.isString(label) ? label : label.toString();
  } else {
    validateName = valueNames.join(' ');
  }

  var _l = rax_1.useState(validateStateProp || 'normal'),
      validateStateInner = _l[0],
      setValidateState = _l[1];

  var validateState = 'validateState' in props ? validateStateProp || 'normal' : validateStateInner;

  var _m = rax_1.useState(''),
      error = _m[0],
      setError = _m[1];

  var rules = rax_1.useMemo(function () {
    return utils_2.getValidationRules(validateName, props);
  }, [required, requiredMessage, requiredTrigger, min, max, minmaxMessage, minmaxTrigger, minLength, maxLength, minmaxLengthMessage, minmaxLengthTrigger, length, lengthMessage, lengthTrigger, pattern, patternMessage, patternTrigger, format, formatMessage, formatTrigger, validator, validatorTrigger]);
  var clsPrefix = prefix + "form-item";
  var previewClassName = classnames_1.default(previewClassNameProp, clsPrefix + "-input", clsPrefix + "-input--preview-" + size);
  var isPreview = !utils_1.isUndef(isPreviewProp) ? isPreviewProp : contextIsPreview;
  var labelAlign = labelAlignProp || contextLabelAlign;

  if (labelAlign === 'left') {
    labelAlign = 'inset';
  }

  var contentAlign = contentAlignProp || contextContentAlign || 'left';
  var labelTextAlign = labelTextAlignProp || contextLabelTextAlign || 'left';
  var help = helpProp;

  if (!help && validateState === 'error') {
    help = error;
  }

  var hasError = validateState === 'error';
  var hasHelp = !!help;
  var isInset = labelAlign === 'inset';
  rax_1.useEffect(function () {
    if (validateStateProp && validateStateProp !== validateState) {
      setValidateState(validateStateProp);
    }
  }, [validateState, validateStateProp]);

  var getValidateResult = function () {
    if (rules.length === 0) {
      if (validateState !== 'normal') {
        setValidateState('normal');
      }

      return;
    }

    if (!('validateState' in props) && field) {
      var errors_1 = [];
      Object.values(field.getErrors(valueNames)).forEach(function (err) {
        if (err && Array.isArray(err) && err.length > 0) {
          err.forEach(function (it) {
            return errors_1.push(it);
          });
        }
      });

      if (errors_1.length > 0) {
        if (validateState !== 'error') {
          setValidateState('error');
        }

        if (errors_1[0] !== error) {
          setError(errors_1[0]);
        }
      } else if (validateState !== 'success' && validateState !== 'normal') {
        setValidateState('success');
      }
    }
  };

  rax_1.useEffect(function () {
    if (form) {
      return form.onValidate(getValidateResult);
    }
  }, []);
  rax_1.useEffect(function () {
    return getValidateResult();
  });
  var newChildren = rax_children_1.default.map(children, function (child, index) {
    var _a;

    if (!field) {
      return child;
    }

    var valueName = valuePropName;

    if (!valueName) {
      if ((child === null || child === void 0 ? void 0 : child.type) && ((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.valueName)) {
        valueName = child.type.valueName;
      } else if ('checked' in child.props || 'defaultChecked' in child.props) {
        valueName = 'checked';
      } else {
        valueName = 'value';
      }
    }

    if ('name' in child.props) {
      var name_1 = child.props.name;
      valueNames.push(name_1);

      if (form && form.mapNameToGuid) {
        form.mapNameToGuid[name_1] = itemId;
      }

      if (!('data-meta' in child.props)) {
        var init = field.init;
        return rax_clone_element_1.default(child, tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, child.props), init(name_1, {
          valueName: valueName,
          rules: rules,
          props: tslib_1.__assign(tslib_1.__assign({}, child.props), {
            ref: child.ref
          })
        }, child.props)), {
          labelAlign: labelAlign,
          size: size,
          key: child.key || name_1 || index
        }));
      }
    }

    return child;
  });
  var previewElement = null;

  if (isPreview && field && renderPreview !== false) {
    var values = Object.values(field.getValues(valueNames));
    previewElement = rax_1.createElement(view_1.default, {
      className: previewClassName,
      style: tslib_1.__assign(tslib_1.__assign({}, previewStyle), {
        textAlign: contentAlign
      })
    }, renderPreview ? renderPreview.apply(void 0, values) : values.join(','));
  }

  return rax_1.createElement(list_1.default.Item, {
    ref: ref,
    id: itemId,
    className: classnames_1.default(clsPrefix, (_a = {}, _a[clsPrefix + "--inset"] = isInset, _a[clsPrefix + "--error"] = hasError, _a[clsPrefix + "--help"] = hasHelp, _a), className),
    style: style
  }, rax_1.createElement(list_1.default.ItemContent, null, rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-container", (_b = {}, _b[clsPrefix + "-container--inset"] = isInset, _b))
  }, !embedded && label ? rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-label-container", (_c = {}, _c[clsPrefix + "-label-container--" + size] = !isInset, _c[clsPrefix + "-label-container--inset"] = isInset, _c[clsPrefix + "-label-container--right"] = isInset && labelTextAlign === 'right', _c)),
    style: {
      width: labelWidthProp || contextLabelWidth || 'auto',
      flexShrink: 0
    }
  }, isInset && required && !isPreview ? rax_1.createElement(icon_1.default, {
    name: "asterisk",
    className: classnames_1.default(clsPrefix + "-required", clsPrefix + "-required--inset-" + size, (_d = {}, _d[clsPrefix + "-required--inset"] = labelTextAlign !== 'right', _d))
  }) : null, utils_1.isString(label) ? rax_1.createElement(rax_text_1.default, {
    className: classnames_1.default(clsPrefix + "-label", clsPrefix + "-label--" + size, (_e = {}, _e[clsPrefix + "-label--inset"] = isInset, _e[clsPrefix + "-label--inset--" + size] = isInset, _e[clsPrefix + "-label--error"] = hasError, _e))
  }, label) : label, !isInset && required && !isPreview ? rax_1.createElement(icon_1.default, {
    name: "asterisk",
    className: clsPrefix + "-required " + clsPrefix + "-required--" + size
  }) : null) : null, rax_1.createElement(exports.FormItemContext.Provider, {
    value: {
      isInsideForm: true,
      labelAlign: labelAlign,
      labelTextAlign: labelTextAlign,
      validateState: validateState,
      hasFeedback: hasFeedback,
      contentAlign: contentAlign,
      size: size
    }
  }, previewElement, rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-input", clsPrefix + "-input--" + contentAlign),
    style: {
      display: previewElement ? 'none' : 'flex'
    }
  }, newChildren))), rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-help", clsPrefix + "-help--" + contentAlign, clsPrefix + "-help--" + (hasError ? 'error' : 'help'))
  }, help ? rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-help-text", clsPrefix + "-help-text--" + size)
  }, help) : null, extra && rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-help-extra", clsPrefix + "-help-text--" + size)
  }, extra))));
};

exports.default = rax_1.forwardRef(FormItem);