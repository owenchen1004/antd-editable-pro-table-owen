"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var field_1 = tslib_1.__importDefault(require("../field"));

var utils_1 = require("../utils");

var view_1 = tslib_1.__importDefault(require("../view"));

var context_1 = tslib_1.__importStar(require("./context"));

var utils_2 = require("./utils");

var Form = function (_super) {
  tslib_1.__extends(Form, _super);

  function Form(props) {
    var _this = _super.call(this, props) || this;

    _this.mapNameToGuid = {};
    _this.validateCallback = [];
    _this.handleAfterValidate = _this.handleAfterValidate.bind(_this);

    if (props.field) {
      _this.field = props.field;
      props.field.afterValidateRerender = props.field.afterValidateRerender ? utils_1.makeChain(_this.handleAfterValidate, props.field.afterValidateRerender) : _this.handleAfterValidate;
      props.field.setOptions({
        onChange: utils_1.makeChain(props.field.options.onChange, _this.handleChange.bind(_this))
      });
    } else {
      var _a = props.autoUnmount,
          autoUnmount = _a === void 0 ? true : _a,
          _b = props.autoValidate,
          autoValidate = _b === void 0 ? true : _b,
          _c = props.scrollToFirstError,
          scrollToFirstError = _c === void 0 ? false : _c;
      _this.field = new field_1.default(_this, {
        autoUnmount: autoUnmount,
        autoValidate: autoValidate,
        values: props.value || props.defaultValue || {},
        onChange: _this.handleChange.bind(_this),
        scrollToFirstError: scrollToFirstError,
        afterValidateRerender: _this.handleAfterValidate
      });
    }

    if (props.saveField) {
      props.saveField(_this.field);
    }

    return _this;
  }

  Form.prototype.submit = function () {
    var _a;

    var _this = this;

    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (args.length === 0) {
      return this.field.validatePromise();
    }

    var names;
    var callback = null;
    var skipValidate = false;

    switch (args.length) {
      case 1:
        if (Array.isArray(args[0])) {
          names = args[0];
        } else if (typeof args[0] === 'function') {
          callback = args[0];
        }

        break;

      case 2:
        if (utils_1.isBoolean(args[1])) {
          callback = args[0];
          skipValidate = args[1];
        } else {
          names = args[0];
          callback = args[1];
        }

        break;

      case 3:
        names = args[0];
        callback = args[1];
        skipValidate = args[2];
        break;

      default:
        {
          console.error('调用 Form.submit 参数错误，期待参数 <names?: [], callback?: function>');
        }
    }

    var validateCb = function (errors, values) {
      var onSubmit = _this.props.onSubmit;

      if (errors) {
        callback(null, errors, _this.field);

        if (onSubmit) {
          onSubmit(null, errors, _this.field);
        }
      } else {
        callback(values, null, _this.field);

        if (onSubmit) {
          onSubmit(values, null, _this.field);
        }
      }
    };

    var validateParams = names ? [names, validateCb] : [validateCb];

    if (skipValidate) {
      var onSubmit = this.props.onSubmit;
      callback(this.getValue(names), null, this.field);

      if (onSubmit) {
        onSubmit(this.getValue(names), null, this.field);
      }

      return;
    }

    return (_a = this.field).validateCallback.apply(_a, validateParams);
  };

  Form.prototype.reset = function (toDefault, names) {
    if (toDefault === void 0) {
      toDefault = true;
    }

    if (toDefault) {
      this.field.resetToDefault(names);
    } else {
      this.field.reset(names);
    }
  };

  Form.prototype.getValue = function (names) {
    return this.field.getValues(names);
  };

  Form.prototype.setValue = function (values) {
    this.field.setValues(values);
  };

  Form.prototype.componentDidUpdate = function (prevProps) {
    if (this.props.field && this.props.field !== prevProps.field) {
      this.field = this.props.field;
      this.forceUpdate();
    }

    if (this.props.scrollToFirstError !== prevProps.scrollToFirstError) {
      this.field.setOptions({
        scrollToFirstError: !!this.props.scrollToFirstError
      });
    }

    if ('value' in this.props) {
      var value = this.props.value;

      if (value === prevProps.value) {
        return;
      }

      if (value) {
        this.field.setValues(value);
      } else {
        this.field.resetToDefault();
      }
    }
  };

  Form.prototype.handleChange = function (name, value) {
    var onChange = this.props.onChange;

    if (onChange) {
      onChange(this.field.getValues(), {
        name: name,
        value: value,
        field: this.field
      });
    }
  };

  Form.prototype.handleAfterValidate = function (data) {
    var _this = this;

    var errorsGroup = data.errorsGroup;

    if (errorsGroup && this.props.scrollToFirstError) {
      var firstNodeId = null;

      for (var i in errorsGroup) {
        if (errorsGroup.hasOwnProperty(i) && typeof this.mapNameToGuid[i] !== 'undefined') {
          firstNodeId = this.mapNameToGuid[i];
          break;
        }
      }

      if (firstNodeId) {
        utils_1.scrollToId(firstNodeId);
      }
    }

    this.validateCallback.forEach(function (it) {
      return it.apply(_this);
    });
  };

  Form.prototype.onValidate = function (cb) {
    var _this = this;

    if (!this.validateCallback.includes(cb)) {
      this.validateCallback.push(cb);
    }

    return function () {
      var index = _this.validateCallback.indexOf(cb);

      if (index >= 0) {
        _this.validateCallback.splice(index, 1);
      }
    };
  };

  Form.prototype.render = function () {
    var _a = this.props,
        _b = _a.prefix,
        prefix = _b === void 0 ? 'mt-' : _b,
        children = _a.children,
        className = _a.className,
        onSubmit = _a.onSubmit,
        _c = _a.labelAlign,
        labelAlign = _c === void 0 ? context_1.defaultContext.labelAlign : _c,
        _d = _a.labelWidth,
        labelWidth = _d === void 0 ? context_1.defaultContext.labelWidth : _d,
        _e = _a.labelTextAlign,
        labelTextAlign = _e === void 0 ? context_1.defaultContext.labelTextAlign : _e,
        _f = _a.contentAlign,
        contentAlign = _f === void 0 ? context_1.defaultContext.contentAlign : _f,
        _g = _a.isPreview,
        isPreview = _g === void 0 ? context_1.defaultContext.isPreview : _g,
        _h = _a.useLabelForErrorMessage,
        useLabelForErrorMessage = _h === void 0 ? context_1.defaultContext.useLabelForErrorMessage : _h,
        _j = _a.size,
        size = _j === void 0 ? context_1.defaultContext.size : _j,
        onChange = _a.onChange,
        others = tslib_1.__rest(_a, ["prefix", "children", "className", "onSubmit", "labelAlign", "labelWidth", "labelTextAlign", "contentAlign", "isPreview", "useLabelForErrorMessage", "size", "onChange"]);

    var field = this.field;
    var contextValue = {
      labelAlign: labelAlign,
      labelWidth: labelWidth,
      labelTextAlign: labelTextAlign,
      contentAlign: contentAlign,
      isPreview: isPreview,
      useLabelForErrorMessage: useLabelForErrorMessage,
      size: size,
      form: this,
      field: field
    };
    return rax_1.createElement(context_1.default.Provider, {
      value: contextValue
    }, rax_1.createElement(view_1.default, tslib_1.__assign({}, utils_2.removeFormAttrs(others), {
      className: classnames_1.default(prefix + "form", className)
    }), children));
  };

  return Form;
}(rax_1.Component);

exports.default = Form;