"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var button_1 = tslib_1.__importDefault(require("../button"));

var checkbox_1 = tslib_1.__importDefault(require("../checkbox"));

var utils_1 = require("./utils");

var Transfer = function (props, ref) {
  var _a = props.dataSource,
      dataSource = _a === void 0 ? [] : _a,
      _b = props.value,
      value = _b === void 0 ? [] : _b,
      _c = props.titles,
      titles = _c === void 0 ? [] : _c,
      _d = props.tabIndex,
      tabIndex = _d === void 0 ? 0 : _d,
      _e = props.defaultValue,
      defaultValue = _e === void 0 ? [] : _e,
      _f = props.tabChange,
      tabChange = _f === void 0 ? function () {} : _f,
      _g = props.disabled,
      disabled = _g === void 0 ? false : _g,
      _h = props.leftDisabled,
      leftDisabled = _h === void 0 ? false : _h,
      _j = props.rightDisabled,
      rightDisabled = _j === void 0 ? false : _j,
      _k = props.notFoundContent,
      notFoundContent = _k === void 0 ? 'Not Found' : _k,
      _l = props.defaultLeftChecked,
      defaultLeftChecked = _l === void 0 ? [] : _l,
      _m = props.defaultRightChecked,
      defaultRightChecked = _m === void 0 ? [] : _m,
      _o = props.onChange,
      onChange = _o === void 0 ? function () {} : _o,
      _p = props.buttonText,
      buttonText = _p === void 0 ? 'Transfer to' : _p,
      _q = props.selectItemText,
      selectItemText = _q === void 0 ? 'Item' : _q,
      _r = props.style,
      style = _r === void 0 ? {} : _r,
      others = tslib_1.__rest(props, ["dataSource", "value", "titles", "tabIndex", "defaultValue", "tabChange", "disabled", "leftDisabled", "rightDisabled", "notFoundContent", "defaultLeftChecked", "defaultRightChecked", "onChange", "buttonText", "selectItemText", "style"]);

  var rightValue = props.value || defaultValue || [];

  var _s = rax_1.useState(tabIndex),
      currentTabIndex = _s[0],
      setTabIndex = _s[1];

  var _t = utils_1.filterTransferValue(dataSource, rightValue),
      leftList = _t.leftList,
      rightList = _t.rightList;

  if ('defaultLeftChecked' in props) {
    leftList = utils_1.setCheckedItem(leftList, defaultLeftChecked);
  }

  if ('defaultRightChecked' in props) {
    rightList = utils_1.setCheckedItem(rightList, defaultRightChecked);
  }

  var useStateLeft = rax_1.useState(leftList);
  var transferLeftList = useStateLeft[0];
  var setTransferLeftList = useStateLeft[1];
  var useStateRight = rax_1.useState(rightList);
  var transferRightList = useStateRight[0];
  var setTransferRightList = useStateRight[1];

  if (leftDisabled) {
    transferLeftList = utils_1.setListDisabled(transferLeftList);
  }

  if (rightDisabled) {
    transferRightList = utils_1.setListDisabled(transferRightList);
  }

  if (disabled) {
    transferLeftList = utils_1.setListDisabled(transferLeftList);
    transferRightList = utils_1.setListDisabled(transferRightList);
  }

  var transferButtonText = currentTabIndex === 0 ? titles[1] : titles[0];
  var transferList = currentTabIndex === 0 ? transferLeftList : transferRightList;

  var _u = utils_1.getDataStatus(transferList),
      listDataSize = _u.listDataSize,
      disabledSize = _u.disabledSize,
      checkedSize = _u.checkedSize,
      isCheckAll = _u.isCheckAll;

  var prefix = 'mt-';
  var classNameObj = {
    transferCls: classnames_1.default(prefix + "transfer"),
    tabCls: classnames_1.default(prefix + "transfer-tab"),
    tabMainWrap: classnames_1.default(prefix + "transfer-tab-main"),
    tabItemCls: classnames_1.default(prefix + "transfer-tab-main-item"),
    tabIconWrapCls: classnames_1.default(prefix + "transfer-tab-icon-wrap"),
    tabIconCls: classnames_1.default(prefix + "transfer-tab-icon-wrap-icon"),
    tabItemActiveCls: classnames_1.default(prefix + "transfer-tab-main-item", prefix + "transfer-tab-main-item--selected"),
    transferList: classnames_1.default(prefix + "transfer-list", prefix + "transfer-list--selected"),
    transferItem: classnames_1.default(prefix + "transfer-list-item"),
    transferTips: classnames_1.default(prefix + "transfer-select-tip"),
    checkbox: classnames_1.default(prefix + "transfer-checkbox"),
    transferListScroll: classnames_1.default(prefix + "transfer-list-scroll"),
    transferEmptyContent: classnames_1.default(prefix + "transfer-empty-content"),
    transferButton: classnames_1.default(prefix + "transfer-button")
  };

  var handleClickTab = function handleClickTab(e, item, index) {
    setTabIndex(index);

    if (tabChange) {
      tabChange(e, item, index);
    }
  };

  var handleClickItem = function handleClickItem(checked, e, item, index) {
    if (currentTabIndex === 0) {
      var newTransferLeftList = transferLeftList.map(function (obj) {
        return tslib_1.__assign({}, obj);
      });
      newTransferLeftList[index].isChecked = checked;
      setTransferLeftList(newTransferLeftList);
    } else {
      var newTransferRightList = transferRightList.map(function (obj) {
        return tslib_1.__assign({}, obj);
      });
      newTransferRightList[index].isChecked = checked;
      setTransferRightList(newTransferRightList);
    }
  };

  var handleClickSelectTip = function handleClickSelectTip(checked, e) {
    if (currentTabIndex === 0) {
      var newTransferLeftList = utils_1.checkAllData(transferLeftList, checked);
      setTransferLeftList(tslib_1.__spreadArrays(newTransferLeftList));
    } else {
      var newTransferRightList = utils_1.checkAllData(transferRightList, checked);
      setTransferRightList(tslib_1.__spreadArrays(newTransferRightList));
    }
  };

  var handleChangeButton = function handleChangeButton(e) {
    var tabsIndex = currentTabIndex === 0 ? 1 : 0;
    var startList = currentTabIndex === 0 ? transferLeftList : transferRightList;
    var endList = currentTabIndex === 0 ? transferRightList : transferLeftList;

    var _a = utils_1.changeCheckedItem(startList, endList),
        initList = _a.initList,
        initValue = _a.initValue,
        goalList = _a.goalList,
        goalValue = _a.goalValue,
        changeList = _a.changeList,
        changeListValue = _a.changeListValue;

    var leftData = currentTabIndex === 0 ? initList : goalList;
    var rightData = currentTabIndex === 0 ? goalList : initList;
    setTransferLeftList(tslib_1.__spreadArrays(leftData));
    setTransferRightList(tslib_1.__spreadArrays(rightData));
    setTabIndex(tabsIndex);

    if (onChange) {
      onChange(currentTabIndex === 0 ? goalValue : initValue, currentTabIndex === 0 ? goalList : initList, {
        leftValue: currentTabIndex === 0 ? initValue : goalValue,
        leftData: currentTabIndex === 0 ? initList : goalList,
        movedValue: changeListValue,
        movedData: changeList,
        redirection: currentTabIndex === 0 ? 'right' : 'left'
      });
    }
  };

  rax_1.useEffect(function () {
    if ('value' in props) {
      if (useStateLeft[0].toString() !== leftList.toString()) {
        setTransferLeftList(leftList);
      }

      if (useStateRight[0].toString() !== rightList.toString()) {
        setTransferRightList(rightList);
      }
    }
  }, [value, props.dataSource]);
  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    className: classNameObj.transferCls,
    style: props.style
  }), rax_1.createElement(view_1.default, {
    className: classNameObj.tabCls
  }, rax_1.createElement(view_1.default, {
    className: classNameObj.tabMainWrap
  }, titles.map(function (item, index) {
    return rax_1.createElement(view_1.default, {
      className: currentTabIndex === index ? classNameObj.tabItemActiveCls : classNameObj.tabItemCls,
      key: index,
      onClick: function onClick(e) {
        return handleClickTab(e, item, index);
      }
    }, item);
  })), rax_1.createElement(view_1.default, {
    className: classNameObj.tabIconWrapCls
  }, rax_1.createElement(icon_1.default, {
    name: "switch",
    className: classNameObj.tabIconCls
  }))), rax_1.createElement(view_1.default, {
    className: classNameObj.transferList
  }, listDataSize > 0 ? rax_1.createElement(view_1.default, {
    className: classNameObj.transferTips
  }, rax_1.createElement(checkbox_1.default, {
    size: "medium",
    disabled: disabledSize === listDataSize,
    checked: isCheckAll,
    indeterminate: !!(!isCheckAll && checkedSize > 0),
    onChange: function onChange(checked, e) {
      return handleClickSelectTip(checked, e);
    }
  }, checkedSize > 0 ? checkedSize + "/" : '', listDataSize, " ", selectItemText)) : null, rax_1.createElement(view_1.default, {
    className: classNameObj.transferListScroll
  }, transferList.map(function (item, index) {
    return rax_1.createElement(view_1.default, {
      className: classNameObj.transferItem,
      key: index
    }, rax_1.createElement(checkbox_1.default, {
      size: "medium",
      className: classNameObj.checkbox,
      disabled: item.disabled,
      checked: item.isChecked,
      onChange: function onChange(checked, e) {
        return handleClickItem(checked, e, item, index);
      }
    }, item.label));
  }), listDataSize <= 0 ? rax_1.createElement(view_1.default, {
    className: classNameObj.transferEmptyContent
  }, notFoundContent) : null)), rax_1.createElement(view_1.default, {
    className: classNameObj.transferButton
  }, rax_1.createElement(button_1.default, {
    type: "primary",
    size: "large",
    disabled: disabledSize === listDataSize || checkedSize === 0,
    fullWidth: true,
    onClick: function onClick(e) {
      return handleChangeButton(e);
    }
  }, buttonText, " ", transferButtonText)));
};

Transfer.displayName = 'Transfer';
exports.default = rax_1.forwardRef(Transfer);