"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var Badge = function (props, ref) {
  var _a, _b;

  var _c = props.overflowCount,
      overflowCount = _c === void 0 ? 99 : _c,
      className = props.className,
      _d = props.count,
      count = _d === void 0 ? 0 : _d,
      _e = props.dot,
      dot = _e === void 0 ? false : _e,
      children = props.children,
      _f = props.content,
      content = _f === void 0 ? '' : _f,
      _g = props.prefix,
      prefix = _g === void 0 ? 'mt-' : _g,
      others = tslib_1.__rest(props, ["overflowCount", "className", "count", "dot", "children", "content", "prefix"]);

  var type = dot ? 'dot' : 'normal';
  var auto = rax_children_1.default.count(children) > 0;
  var sup = count;
  sup = Number(count);

  if (!isNaN(sup) && sup !== 0) {
    sup = sup > overflowCount ? overflowCount + "+" : sup;
  } else {
    sup = count;
  }

  var BadgeComponent = sup === 0 && type === 'normal' && !content ? null : rax_1.createElement(view_1.default, {
    className: classnames_1.default((_a = {}, _a[prefix + "badge--custom"] = content, _a[prefix + "badge-content"] = !content, _a[prefix + "badge-content--" + type] = !content, _a[prefix + "badge-content--auto"] = auto, _a))
  }, content ? content : dot ? null : rax_1.createElement(rax_text_1.default, {
    className: prefix + "badge-text"
  }, sup));
  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    className: classnames_1.default(className, prefix + "badge", prefix + "badge--" + type, (_b = {}, _b[prefix + "badge--auto"] = auto, _b))
  }), children, BadgeComponent);
};

Badge.displayName = 'Badge';
exports.default = rax_1.forwardRef(Badge);