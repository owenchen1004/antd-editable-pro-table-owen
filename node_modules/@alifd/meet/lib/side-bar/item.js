"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_is_valid_element_1 = tslib_1.__importDefault(require("rax-is-valid-element"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var badge_1 = tslib_1.__importDefault(require("../badge"));

var side_bar_1 = require("./side-bar");

var hooks_1 = require("../utils/hooks");

var utils_1 = require("../utils");

var SideBarItem = function (props, ref) {
  var _a, _b, _c, _d;

  var _e = props.prefix,
      prefix = _e === void 0 ? 'mt-' : _e,
      className = props.className,
      itemKey = props.itemKey,
      _f = props.title,
      title = _f === void 0 ? '' : _f,
      _g = props.icon,
      icon = _g === void 0 ? '' : _g,
      _h = props.count,
      count = _h === void 0 ? 0 : _h,
      _j = props.dot,
      dot = _j === void 0 ? false : _j,
      children = props.children,
      _k = props.onClick,
      onClick = _k === void 0 ? function () {} : _k,
      _l = props.renderContent,
      renderContent = _l === void 0 ? null : _l,
      others = tslib_1.__rest(props, ["prefix", "className", "itemKey", "title", "icon", "count", "dot", "children", "onClick", "renderContent"]);

  var _m = rax_1.useContext(side_bar_1.SideBarContext),
      activeKey = _m.activeKey,
      align = _m.align,
      change = _m.change;

  var active = "" + activeKey === "" + itemKey;
  var clsPrefix = prefix + "side-bar-item";
  var curItemId = hooks_1.useGuid('side-bar-item-');
  var clses = {
    bar: classnames_1.default(clsPrefix, [clsPrefix + "-" + align], (_a = {}, _a[clsPrefix + "--active"] = active, _a), className),
    activeLine: clsPrefix + "-active-line",
    barText: classnames_1.default(clsPrefix + "-text", (_b = {}, _b[clsPrefix + "-text--active"] = active, _b)),
    barBadge: clsPrefix + "-badge",
    barIcon: classnames_1.default(clsPrefix + "-icon", (_c = {}, _c[clsPrefix + "-icon--active"] = active, _c))
  };

  var renderTitle = function () {
    if (rax_is_valid_element_1.default(title)) {
      return rax_1.createElement(view_1.default, {
        className: clses.barText
      }, title);
    } else if (utils_1.isString(title)) {
      return rax_1.createElement(rax_text_1.default, {
        className: clses.barText
      }, title);
    }

    return null;
  };

  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    id: curItemId,
    ref: ref,
    className: clses.bar,
    onClick: function handleClick(e) {
      if (onClick) {
        onClick(tslib_1.__assign(tslib_1.__assign({}, e), {
          itemKey: itemKey
        }));
      }

      change(itemKey);
    }
  }), renderContent ? renderContent({
    title: title,
    active: active,
    icon: icon,
    count: count,
    dot: dot
  }) : dot || count ? rax_1.createElement(badge_1.default, {
    className: clses.barBadge,
    dot: dot,
    count: count
  }, icon ? rax_1.createElement(icon_1.default, {
    className: clses.barIcon,
    name: icon
  }) : null, renderTitle()) : rax_1.createElement(rax_1.Fragment, null, icon ? rax_1.createElement(icon_1.default, {
    className: clses.barIcon,
    name: icon
  }) : null, renderTitle()), rax_1.createElement(view_1.default, {
    className: classnames_1.default(clses.activeLine, (_d = {}, _d[clsPrefix + "-active-line--enter"] = active, _d[clsPrefix + "-active-line--exit"] = !active, _d))
  }));
};

SideBarItem.displayName = 'SideBar.Item';
exports.default = rax_1.forwardRef(SideBarItem);