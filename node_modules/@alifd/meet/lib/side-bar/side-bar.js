"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SideBarContext = void 0;

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var rax_clone_element_1 = tslib_1.__importDefault(require("rax-clone-element"));

var rax_scrollview_1 = tslib_1.__importDefault(require("rax-scrollview"));

var hooks_1 = require("../utils/hooks");

var view_1 = tslib_1.__importDefault(require("../view"));

var item_1 = tslib_1.__importDefault(require("./item"));

exports.SideBarContext = rax_1.createContext({
  activeKey: -1,
  align: 'left',
  change: function change() {}
});

var getInitActiveKey = function (props) {
  if ('activeKey' in props && props.activeKey) {
    return props.activeKey;
  } else if (props.defaultActiveKey || props.defaultActiveKey === 0) {
    return props.defaultActiveKey;
  } else {
    return undefined;
  }
};

var SideBar = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      _b = props.align,
      align = _b === void 0 ? 'left' : _b,
      activeKey = props.activeKey,
      _c = props.defaultActiveKey,
      defaultActiveKey = _c === void 0 ? -1 : _c,
      _d = props.onChange,
      onChange = _d === void 0 ? function () {} : _d,
      _e = props.dataSource,
      dataSource = _e === void 0 ? [] : _e,
      height = props.height,
      width = props.width,
      className = props.className,
      _f = props.renderContent,
      renderContent = _f === void 0 ? null : _f,
      contentClassName = props.contentClassName,
      contentStyle = props.contentStyle,
      renderSideBar = props.renderSideBar,
      children = props.children,
      others = tslib_1.__rest(props, ["prefix", "align", "activeKey", "defaultActiveKey", "onChange", "dataSource", "height", "width", "className", "renderContent", "contentClassName", "contentStyle", "renderSideBar", "children"]);

  var _g = rax_1.useState(getInitActiveKey(props)),
      curActiveKey = _g[0],
      setActiveKey = _g[1];

  var curSideBarScrollId = hooks_1.useGuid('side-bar-scroll-');
  var curSideBarScrollContainerId = hooks_1.useGuid('side-bar-ctn-');
  var activeBarRef = rax_1.useRef();
  var isControlled = ('activeKey' in props);
  var clsPrefix = prefix + "side-bar";
  var clses = {
    container: classnames_1.default([clsPrefix + "-container"]),
    bar: classnames_1.default([clsPrefix, className]),
    scrollContainer: clsPrefix + "-scroll-container",
    scrollContent: clsPrefix + "-scroll-content",
    content: classnames_1.default(clsPrefix + "-content", contentClassName)
  };
  rax_1.useEffect(function () {
    if (isControlled && curActiveKey && !props.activeKey) {
      setActiveKey(getInitActiveKey(props));
      return;
    }

    if (isControlled) {
      setActiveKey(props.activeKey);
    }
  });
  var content;

  if (dataSource && dataSource.length > 0) {
    content = dataSource.map(function (item, index) {
      return rax_1.createElement(item_1.default, tslib_1.__assign({
        key: item.key || index,
        itemKey: item.key,
        renderContent: renderSideBar,
        ref: item.key === curActiveKey ? activeBarRef : null,
        prefix: prefix
      }, item));
    });
  } else {
    content = rax_children_1.default.map(children, function (child, index) {
      return rax_clone_element_1.default(child, {
        key: "mt_side_bar_" + index,
        itemKey: child.key || index,
        ref: "" + child.key === "" + curActiveKey ? activeBarRef : null,
        renderContent: child.renderContent || renderSideBar,
        prefix: prefix
      });
    });
  }

  return rax_1.createElement(exports.SideBarContext.Provider, {
    value: {
      activeKey: curActiveKey,
      align: align,
      change: function handleChange(v) {
        if (!isControlled) {
          setActiveKey(v);
        }

        onChange(v);
      }
    }
  }, rax_1.createElement(view_1.default, {
    className: clses.container
  }, rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    className: clses.bar,
    style: {
      width: width,
      maxWidth: width
    },
    ref: ref
  }), rax_1.createElement(rax_scrollview_1.default, {
    id: curSideBarScrollId,
    className: clses.scrollContainer,
    showsVerticalScrollIndicator: false,
    showsHorizontalScrollIndicator: false,
    style: {
      height: height,
      width: width,
      maxWidth: width
    }
  }, rax_1.createElement(view_1.default, {
    id: curSideBarScrollContainerId,
    className: clses.scrollContent
  }, content))), rax_1.createElement(view_1.default, {
    className: clses.content,
    style: contentStyle
  }, renderContent || function getChildren(activeBarKey) {
    var ret = null;
    rax_children_1.default.forEach(children, function (child) {
      if (ret) {
        return;
      }

      var _key = child.key;

      if ("" + _key === "" + activeBarKey) {
        ret = child.props.children;
      }
    });
    return ret;
  }(curActiveKey))));
};

SideBar.displayName = 'SideBar';
exports.default = rax_1.forwardRef(SideBar);