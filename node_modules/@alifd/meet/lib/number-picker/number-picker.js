"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_textinput_1 = tslib_1.__importDefault(require("rax-textinput"));

var env_1 = require("@uni/env");

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var button_1 = tslib_1.__importDefault(require("../button"));

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

var utils_2 = require("./utils");

var MAX_NUMBER_PICKER_THRESHOLD = 9999999;
var isIOSH5 = env_1.isWeb && window.navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);

function getInitInputValue(props) {
  var initialValue;

  if ('value' in props) {
    initialValue = props.value;
  } else if (!utils_1.isUndef(props.defaultValue)) {
    initialValue = props.defaultValue;
  }

  return !utils_1.isInvalidValue(initialValue) ? utils_2.toNumber(initialValue) : '';
}

function isDecreaseDisabled(value, min) {
  if (!utils_1.isNumber(value)) {
    return false;
  }

  return min !== -Infinity && value <= min;
}

function isIncreaseDisabled(value, max) {
  if (!utils_1.isNumber(value)) {
    return false;
  }

  return max !== Infinity && value >= max;
}

function getPrecision(precision, step) {
  if (typeof precision !== 'number' || precision < 0) {
    precision = 0;
  }

  var stepString = step.toString();
  var pcs = 0;

  if (stepString.indexOf('.') >= 0) {
    pcs = stepString.length - stepString.indexOf('.') - 1;
  }

  return Math.max(pcs, precision);
}

function getPrecisionFactor(precision) {
  return Math.pow(10, precision);
}

function hackChrome(value, precision) {
  if (precision > 0) {
    return Number(Number(value).toFixed(precision));
  }

  return value;
}

var NumberPicker = function (props, ref) {
  var _a, _b, _c, _d, _e;

  var className = props.className,
      _f = props.prefix,
      prefix = _f === void 0 ? 'mt-' : _f,
      _g = props.size,
      size = _g === void 0 ? 'medium' : _g,
      value = props.value,
      defaultValue = props.defaultValue,
      _h = props.max,
      max = _h === void 0 ? MAX_NUMBER_PICKER_THRESHOLD : _h,
      _j = props.min,
      min = _j === void 0 ? -MAX_NUMBER_PICKER_THRESHOLD : _j,
      _k = props.step,
      step = _k === void 0 ? 1 : _k,
      _k1 = props.keybordType,
      _k2 = props.keyboardType,
      _l = props.readOnly,
      readOnly = _l === void 0 ? false : _l,
      _m = props.disabled,
      disabled = _m === void 0 ? false : _m,
      _o = props.hideButton,
      hideButton = _o === void 0 ? false : _o,
      enableNative = props.enableNative,
      _p = props.precision,
      precisionProp = _p === void 0 ? 0 : _p,
      _q = props.focused,
      focusedProp = _q === void 0 ? false : _q,
      _r = props.controlled,
      controlled = _r === void 0 ? false : _r,
      _s = props.inputStyle,
      inputStyle = _s === void 0 ? {} : _s,
      _t = props.onBeforeChange,
      onBeforeChange = _t === void 0 ? function () {
    return Promise.resolve();
  } : _t,
      onDisableClickProp = props.onDisableClick,
      onDisabledClickProp = props.onDisabledClick,
      _u = props.onChange,
      onChange = _u === void 0 ? function () {} : _u,
      _v = props.style,
      style = _v === void 0 ? {} : _v,
      _w = props.onInput,
      onInput = _w === void 0 ? function () {} : _w,
      _x = props.onFocus,
      onFocus = _x === void 0 ? function () {} : _x,
      _y = props.onBlur,
      onBlur = _y === void 0 ? function () {} : _y,
      _z = props.onCorrect,
      onCorrect = _z === void 0 ? function () {} : _z,
      others = tslib_1.__rest(props, ["className", "prefix", "size", "value", "defaultValue", "max", "min", "step", "keybordType", "keyboardType", "readOnly", "disabled", "hideButton", "enableNative", "precision", "focused", "controlled", "inputStyle", "onBeforeChange", "onDisableClick", "onDisabledClick", "onChange", "style", "onInput", "onFocus", "onBlur", "onCorrect"]);

  var clsPrefix = prefix + "numberpicker";
  var isControlled = ('value' in props);
  var onDisabledClick = onDisabledClickProp || onDisableClickProp;
  var precision = getPrecision(precisionProp, step);
  var factor = getPrecisionFactor(precision);
  var inputRef = rax_1.useRef(null);
  var defaultValAtEmpty = utils_2.getDefaultValue(min, max, MAX_NUMBER_PICKER_THRESHOLD);

  var _0 = rax_1.useState(!!props.focused),
      focused = _0[0],
      setFocused = _0[1];

  var _1 = rax_1.useState(getInitInputValue(props)),
      inputValue = _1[0],
      setInputValue = _1[1];

  var inputId = hooks_1.useGuid('mt-np-input-');

  var _2 = rax_1.useState(isDecreaseDisabled(inputValue, min)),
      decreaseDisabled = _2[0],
      setDecreaseDisabled = _2[1];

  var _3 = rax_1.useState(isIncreaseDisabled(inputValue, max)),
      increaseDisabled = _3[0],
      setIncreaseDisabled = _3[1];

  var keyboardType = hooks_1.useDeprecated('NumberPicker', props, 'keybordType', 'keyboardType', 'number-pad');
  rax_1.useEffect(function () {
    var fn = function () {
      if (isControlled) {
        if (utils_1.isInvalidValue(value)) {
          setInputValue('');
          updateInputVal('');
        } else {
          setInputValue(utils_2.toNumber(props.value));
          updateInputVal(props.value);
        }
      }
    };

    if (utils_1.isMiniappPlatform) {
      setTimeout(fn, 100);
    } else {
      fn();
    }
  });
  rax_1.useEffect(function () {
    setDecreaseDisabled(isDecreaseDisabled(inputValue, min));
    setIncreaseDisabled(isIncreaseDisabled(inputValue, max));
  }, [inputValue, max, min]);

  function handleChange(numValue, e) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var error_1;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (readOnly) {
              return [2];
            }

            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            return [4, onBeforeChange(numValue)];

          case 2:
            _a.sent();

            return [3, 4];

          case 3:
            error_1 = _a.sent();
            throw error_1;

          case 4:
            doChange(numValue, e);
            return [2];
        }
      });
    });
  }

  function doChange(val, e) {
    if (!isControlled) {
      setInputValue(val);
    }

    onChange(val, e);
  }

  function updateInputVal(newVal) {
    var cur = inputRef.current;

    if (env_1.isWeb && cur && cur._nativeNode) {
      cur._nativeNode.value = '';
      cur._nativeNode.value = newVal;
    } else if (utils_1.isStrictWechatMiniProgram || utils_1.isStrictMiniApp) {
      var input = document.querySelector("#" + inputId);
      input.value = '';
      input.value = utils_2.toNumber(newVal);
    }
  }

  var handleDisableClick = function (actionType, e) {
    if (utils_1.isFunction(onDisabledClick)) {
      onDisabledClick(actionType, e);
    }
  };

  var classNameObj = {
    numberPicker: classnames_1.default("" + clsPrefix, clsPrefix + "--" + size),
    textInput: classnames_1.default(clsPrefix + "-input", clsPrefix + "-input--" + size, (_a = {}, _a[clsPrefix + "-input--focused"] = focused, _a[clsPrefix + "-input--disabled"] = !isIOSH5 && disabled, _a[clsPrefix + "-input--readonly"] = readOnly, _a[clsPrefix + "-input--no-button"] = hideButton, _a)),
    decrease: classnames_1.default(clsPrefix + "-button", clsPrefix + "-button-decrease", clsPrefix + "-button--" + size, (_b = {}, _b[clsPrefix + "-button--disabled"] = disabled || decreaseDisabled, _b)),
    decreaseIcon: classnames_1.default(clsPrefix + "-button-icon", clsPrefix + "-button-icon--" + size, (_c = {}, _c[clsPrefix + "-button-icon--disabled"] = disabled || decreaseDisabled, _c)),
    increase: classnames_1.default(clsPrefix + "-button", clsPrefix + "-button-increase", clsPrefix + "-button--" + size, (_d = {}, _d[clsPrefix + "-button--disabled"] = disabled || increaseDisabled, _d)),
    increaseIcon: classnames_1.default(clsPrefix + "-button-icon", clsPrefix + "-button-icon--" + size, (_e = {}, _e[clsPrefix + "-button-icon--disabled"] = disabled || increaseDisabled, _e))
  };
  return rax_1.createElement(view_1.default, tslib_1.__assign({
    style: style,
    className: classnames_1.default(classNameObj.numberPicker, className),
    ref: ref
  }, others), !hideButton ? rax_1.createElement(button_1.default, {
    disabled: disabled || decreaseDisabled,
    type: "normal",
    model: "outline",
    size: size,
    className: classNameObj.decrease,
    onClick: function (e) {
      if (utils_1.isInvalidValue(inputValue)) {
        handleChange(defaultValAtEmpty, e);
        return;
      }

      var newValue = utils_2.clamp(inputValue - step, min, max);
      var result = factor * newValue / factor;
      result = hackChrome(result, precision);

      if (newValue !== result && utils_1.isFunction(onCorrect)) {
        onCorrect(result, newValue);
      }

      handleChange(result, e);
    },
    onDisabledClick: function (e) {
      handleDisableClick('decrease', e);
    }
  }, rax_1.createElement(icon_1.default, {
    name: "minus",
    className: classNameObj.decreaseIcon
  })) : null, rax_1.createElement(rax_textinput_1.default, {
    id: inputId,
    className: classNameObj.textInput,
    ref: inputRef,
    value: "" + inputValue,
    editable: !disabled && !readOnly,
    keyboardType: keyboardType,
    enableNative: enableNative === true,
    onFocus: function (e) {
      setFocused(true);

      if (utils_1.isFunction(onFocus)) {
        onFocus(e);
      }
    },
    onBlur: function (e) {
      var val = utils_2.toNumber(utils_1.getValueFromEvents(e));

      if (utils_1.isFunction(onBlur)) {
        onBlur(e);
      }

      if (utils_1.isInvalidValue(val)) {
        setFocused(false);
        handleChange('', tslib_1.__assign(tslib_1.__assign({}, e), {
          originalValue: utils_1.getValueFromEvents(e)
        }));
        return;
      }

      var limitedValue = utils_2.clamp(val, min, max);

      if (!isControlled) {
        updateInputVal(limitedValue);
      }

      var result = factor * limitedValue / factor;
      result = hackChrome(result, precision);

      if (val !== result) {
        if (!isControlled) {
          updateInputVal(result);
        }

        onCorrect(result, val);
      }

      setFocused(false);
      handleChange(result, tslib_1.__assign(tslib_1.__assign({}, e), {
        originalValue: utils_1.getValueFromEvents(e)
      }));
    },
    onInput: function (e) {
      if (utils_1.isFunction(onInput)) {
        var val = utils_2.toNumber(utils_1.getValueFromEvents(e));
        onInput(val, e);
      }
    },
    style: inputStyle,
    controlled: controlled
  }), !hideButton ? rax_1.createElement(button_1.default, {
    disabled: disabled || increaseDisabled,
    type: "normal",
    model: "outline",
    size: size,
    className: classNameObj.increase,
    onClick: function (e) {
      if (utils_1.isInvalidValue(inputValue)) {
        handleChange(defaultValAtEmpty, e);
        return;
      }

      var newValue = utils_2.clamp(inputValue + step, min, max);
      var result = factor * newValue / factor;
      result = hackChrome(result, precision);

      if (newValue !== result && utils_1.isFunction(onCorrect)) {
        onCorrect(result, newValue);
      }

      handleChange(result, e);
    },
    onDisabledClick: function (e) {
      handleDisableClick('increase', e);
    }
  }, rax_1.createElement(icon_1.default, {
    name: "add",
    className: classNameObj.increaseIcon
  })) : null);
};

NumberPicker.displayName = 'NumberPicker';
exports.default = rax_1.forwardRef(NumberPicker);