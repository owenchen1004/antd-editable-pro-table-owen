"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_clone_element_1 = tslib_1.__importDefault(require("rax-clone-element"));

var rax_image_1 = tslib_1.__importDefault(require("rax-image"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var utils_1 = require("../utils");

var Avatar = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      _b = props.size,
      size = _b === void 0 ? 'medium' : _b,
      _c = props.shape,
      shape = _c === void 0 ? 'circle' : _c,
      src = props.src,
      alt = props.alt,
      srcSet = props.srcSet,
      className = props.className,
      _d = props.icon,
      icon = _d === void 0 ? null : _d,
      _e = props.onError,
      onError = _e === void 0 ? function () {} : _e,
      _f = props.onClick,
      onClick = _f === void 0 ? function () {} : _f,
      others = tslib_1.__rest(props, ["prefix", "size", "shape", "src", "alt", "srcSet", "className", "icon", "onError", "onClick"]);

  var children = props.children;

  var _g = rax_1.useState(true),
      isImgExist = _g[0],
      setImgExist = _g[1];

  var iconCls = prefix + "avatar-icon--" + size;

  var handleError = function (err) {
    if (!utils_1.isStrictMiniApp) {
      onError(err);
      setImgExist(false);
    }
  };

  if (src) {
    if (isImgExist) {
      children = rax_1.createElement(rax_image_1.default, {
        src: src,
        source: {
          uri: src
        },
        srcSet: srcSet,
        alt: alt,
        onError: handleError
      });
    } else if (alt) {
      children = utils_1.isString(alt) ? alt.substr(0, 2) : children;
    }
  } else if (utils_1.isString(icon)) {
    children = rax_1.createElement(icon_1.default, {
      className: iconCls,
      name: icon
    });
  } else if (icon) {
    children = rax_clone_element_1.default(icon, {
      className: iconCls
    });
  } else {
    children = utils_1.isString(children) ? children.substr(0, 2) : children;
  }

  return rax_1.createElement(view_1.default, tslib_1.__assign({
    ref: ref
  }, others, {
    className: classnames_1.default(className, prefix + "avatar", prefix + "avatar--" + size, prefix + "avatar--" + shape),
    onClick: onClick
  }), children);
};

Avatar.displayName = 'Avatar';
exports.default = rax_1.forwardRef(Avatar);