"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_canvas_1 = tslib_1.__importDefault(require("rax-canvas"));

var universal_canvas_context_1 = tslib_1.__importDefault(require("universal-canvas-context"));

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

var view_1 = tslib_1.__importDefault(require("../view"));

var utils_2 = require("./utils");

var CircleProgress = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      _b = props.percent,
      percent = _b === void 0 ? 0 : _b,
      color = props.color,
      _c = props.size,
      size = _c === void 0 ? 'medium' : _c,
      backgroundColor = props.backgroundColor,
      _d = props.progressive,
      progressive = _d === void 0 ? false : _d,
      _e = props.state,
      state = _e === void 0 ? 'normal' : _e,
      text = props.text,
      className = props.className,
      others = tslib_1.__rest(props, ["prefix", "percent", "color", "size", "backgroundColor", "progressive", "state", "text", "className"]);

  var canvasId = hooks_1.useGuid('progress-');

  var progressiveColorEnabled = function () {
    if (progressive) {
      return utils_2.progressiveColor(percent);
    } else {
      return color || utils_2.statusColor(state);
    }
  };

  var drawBaseCircle = function (ctx, x, y, r) {
    ctx.save();
    ctx.beginPath();
    ctx.strokeStyle = utils_2.progressBackgroundColor(backgroundColor);
    ctx.lineWidth = utils_2.progressSize(size) / 2;
    ctx.arc(x, y, r, 0, Math.PI * 2, false);
    ctx.stroke();
    ctx.closePath();
    ctx.restore();
  };

  var drawCircle = function (ctx, x, y, r, n, rad) {
    ctx.save();
    ctx.beginPath();
    ctx.strokeStyle = progressiveColorEnabled();
    ctx.lineWidth = utils_2.progressSize(size) / 2;
    ctx.arc(x, y, r, -Math.PI / 2, -Math.PI / 2 + n * rad, false);
    ctx.lineCap = 'round';
    ctx.stroke();
    ctx.restore();
  };

  var drawText = function (ctx, x, y, r, n) {
    ctx.save();
    ctx.font = utils_2.progressCircleFontSize(size) + "px HelveticaNeue";
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(text || n.toFixed(0) + "%", x, y);
    ctx.restore();
  };

  rax_1.useEffect(function () {
    (function () {
      return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var context, elementSize, centerX, centerY, rad;
        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, universal_canvas_context_1.default(canvasId, '2d')];

            case 1:
              context = _a.sent();
              elementSize = utils_2.progressCircleWidthSize(size) * 2;
              centerX = utils_2.progressCircleWidthSize(size);
              centerY = centerX;
              rad = Math.PI * 2 / 100;
              drawBaseCircle(context, centerX, centerY, centerX - utils_2.progressSize(size) / 2);
              drawCircle(context, centerX, centerY, centerX - utils_2.progressSize(size) / 2, percent, rad);
              drawText(context, centerX, centerY, centerX - utils_2.progressSize(size) / 2, percent);

              if (context.draw) {
                context.draw();
              }

              utils_1.nextTick(function () {
                if (context.clearRect) {
                  context.clearRect(0, 0, elementSize, elementSize);
                }

                drawBaseCircle(context, centerX, centerY, centerX - utils_2.progressSize(size) / 2);
                drawCircle(context, centerX, centerY, centerX - utils_2.progressSize(size) / 2, percent, rad);
                drawText(context, centerX, centerY, centerX - utils_2.progressSize(size) / 2, percent);

                if (context.draw) {
                  context.draw();
                }
              });
              return [2];
          }
        });
      });
    })();
  }, [percent, color, size, state, progressive, backgroundColor]);
  var canvasSize = utils_2.progressCircleWidthSize(size) * 2;
  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    className: classnames_1.default(prefix + "progress", prefix + "progress-circle", className)
  }), rax_1.createElement(rax_canvas_1.default, {
    id: canvasId,
    width: canvasSize,
    height: canvasSize,
    style: {
      width: canvasSize + "px",
      height: canvasSize + "px"
    }
  }));
};

exports.default = rax_1.forwardRef(CircleProgress);