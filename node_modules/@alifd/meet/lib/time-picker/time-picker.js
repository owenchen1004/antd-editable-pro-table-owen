"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var view_1 = tslib_1.__importDefault(require("../view"));

var form_1 = require("../form");

var select_drawer_1 = tslib_1.__importDefault(require("../select-drawer"));

var embed_picker_1 = tslib_1.__importDefault(require("./embed-picker"));

var utils_1 = require("../utils");

var date_1 = require("../utils/date");

var TimePicker = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      valueProp = props.value,
      defaultValue = props.defaultValue,
      sizeProp = props.size,
      alignProp = props.align,
      iconType = props.iconType,
      placeholder = props.placeholder,
      format = props.format,
      hasClear = props.hasClear,
      disabled = props.disabled,
      readOnly = props.readOnly,
      _b = props.onChange,
      onChange = _b === void 0 ? function () {} : _b,
      _c = props.onClear,
      onClear = _c === void 0 ? function () {} : _c,
      _d = props.onCancel,
      onCancel = _d === void 0 ? function () {} : _d,
      className = props.className,
      zIndex = props.zIndex,
      others = tslib_1.__rest(props, ["prefix", "value", "defaultValue", "size", "align", "iconType", "placeholder", "format", "hasClear", "disabled", "readOnly", "onChange", "onClear", "onCancel", "className", "zIndex"]);

  var _e = rax_1.useState(date_1.toDate(valueProp || defaultValue)),
      value = _e[0],
      setValue = _e[1];

  var _f = rax_1.useState(value || new Date()),
      pickerValue = _f[0],
      setPickerValue = _f[1];

  var _g = rax_1.useContext(form_1.ItemContext),
      isInsideForm = _g.isInsideForm,
      contentAlign = _g.contentAlign,
      contextSize = _g.size;

  var align = alignProp || (isInsideForm ? contentAlign : 'left');
  var size = sizeProp || (isInsideForm ? contextSize : 'medium');
  var isControlled = ('value' in props);
  rax_1.useEffect(function () {
    if ('value' in props) {
      var newValue = date_1.toDate(valueProp || defaultValue);

      if (!date_1.isValidDate(newValue)) {
        setValue(undefined);
        return;
      } else if (newValue === value) {
        return;
      }

      setValue(newValue);
      setPickerValue(newValue);
    }
  }, [valueProp]);
  return rax_1.createElement(select_drawer_1.default, {
    disableScroll: true,
    hasClear: hasClear,
    content: value ? dayjs_1.default(value).format(format || 'HH:mm') : '',
    align: align,
    size: size,
    iconType: iconType,
    placeholder: placeholder,
    disabled: disabled,
    readOnly: readOnly,
    className: className,
    zIndex: zIndex,
    onOk: function handleOk() {
      var newValue = pickerValue;

      if (onChange) {
        onChange(newValue);
      }

      if (!isControlled) {
        setValue(newValue);
      }
    },
    onCancel: function handleCancel(reason) {
      setPickerValue(value || new Date());

      if (utils_1.isFunction(onCancel)) {
        onCancel(reason);
      }
    },
    onClear: function handleClear() {
      if (!isControlled) {
        setPickerValue(new Date());
        setValue(undefined);
      }

      if (onClear) {
        onClear();
      }

      if (onChange) {
        onChange(undefined);
      }
    },
    ref: ref
  }, rax_1.createElement(view_1.default, {
    className: prefix + "timepicker-container",
    "disable-scroll": true
  }, rax_1.createElement(embed_picker_1.default, tslib_1.__assign({}, others, {
    prefix: prefix,
    value: pickerValue,
    format: format || 'HH:mm',
    onChange: function handleChange(d) {
      return setPickerValue(d);
    }
  }))));
};

TimePicker.displayName = 'TimePicker';
exports.default = rax_1.forwardRef(TimePicker);