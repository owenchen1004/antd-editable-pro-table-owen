"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickerToDate = exports.dateToPicker = exports.getColumns = exports.getTimeOption = exports.rangeOptions = exports.range = exports.DEFAULT_FORMAT = void 0;

var tslib_1 = require("tslib");

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var date_1 = require("../utils/date");

exports.DEFAULT_FORMAT = 'HH:mm:ss';

function range(min, max, step) {
  var result = [];

  for (var i = min; i <= max; i += step) {
    result.push(i);
  }

  return result;
}

exports.range = range;

function rangeOptions(min, max, step, format) {
  return range(min, max, step).map(function (it) {
    return {
      label: format(it),
      value: it
    };
  });
}

exports.rangeOptions = rangeOptions;

function getTimeOption(props) {
  var _a = props.format,
      format = _a === void 0 ? exports.DEFAULT_FORMAT : _a;
  var hasHour = format.includes('H') || format.includes('h');
  var hasMinute = format.includes('m');
  var hasSecond = format.includes('s');
  var use12Hours = hasHour && format.includes('h');
  return {
    hasHour: hasHour,
    hasMinute: hasMinute,
    hasSecond: hasSecond,
    use12Hours: use12Hours
  };
}

exports.getTimeOption = getTimeOption;

function getColumns(curValue, options, props) {
  var hasHour = options.hasHour,
      hasMinute = options.hasMinute,
      hasSecond = options.hasSecond,
      use12Hours = options.use12Hours;
  var _a = props.hourStep,
      hourStep = _a === void 0 ? 1 : _a,
      _b = props.minuteStep,
      minuteStep = _b === void 0 ? 1 : _b,
      _c = props.secondStep,
      secondStep = _c === void 0 ? 1 : _c,
      _d = props.disabledHours,
      disabledHours = _d === void 0 ? function () {} : _d,
      _e = props.disabledMinutes,
      disabledMinutes = _e === void 0 ? function () {} : _e,
      _f = props.disabledSeconds,
      disabledSeconds = _f === void 0 ? function () {} : _f,
      _g = props.locale,
      locale = _g === void 0 ? zh_cn_1.default.TimePicker : _g,
      validRangeProp = props.validRange;
  var validRange = date_1.getRealRange(options, props, validRangeProp);
  var dataSource = [];

  var isInRange = function (type, n) {
    if (!validRange) {
      return true;
    }

    var checkOptions = {
      hasHour: true,
      hasMinute: false,
      hasSecond: false,
      use12Hours: false
    };
    var d = date_1.cloneDate(curValue);

    if (type === 'h') {
      d.setHours(n);
    } else if (type === 'm') {
      checkOptions.hasMinute = true;
      d.setMinutes(n);
    } else if (type === 's') {
      checkOptions.hasMinute = true;
      checkOptions.hasSecond = true;
      d.setSeconds(n);
    }

    return date_1.checkDateRange(d, {
      time: checkOptions
    }, validRange) === date_1.RANGE_CHECK_RESULT.IN_RANGE;
  };

  var rules = [{
    enable: hasHour,
    min: 0,
    max: use12Hours ? 11 : 23,
    step: hourStep,
    format: function format(n) {
      return dayjs_1.default().hour(n).format(use12Hours ? 'h' : 'H') + locale.hour;
    },
    filter: function filter(n) {
      return isInRange('h', n) && !disabledHours(n);
    }
  }, {
    enable: hasMinute,
    min: 0,
    max: 59,
    step: minuteStep,
    format: function format(n) {
      return n + locale.minute;
    },
    filter: function filter(n) {
      return isInRange('m', n) && !disabledMinutes(n);
    }
  }, {
    enable: hasSecond,
    min: 0,
    max: 59,
    step: secondStep,
    format: function format(n) {
      return n + locale.second;
    },
    filter: function filter(n) {
      return isInRange('s', n) && !disabledSeconds(n);
    }
  }];
  rules.forEach(function (rule) {
    if (!rule.enable) {
      return;
    }

    var opts = rangeOptions(rule.min, rule.max, rule.step, rule.format);

    if (rule.filter) {
      opts = opts.filter(function (it) {
        return rule.filter(it.value);
      });
    }

    dataSource.push(opts);
  });

  if (use12Hours) {
    dataSource.push([{
      label: locale.am,
      value: 'am'
    }, {
      label: locale.pm,
      value: 'pm'
    }]);
  }

  return dataSource;
}

exports.getColumns = getColumns;

function dateToPicker(d, options) {
  var hasHour = options.hasHour,
      hasMinute = options.hasMinute,
      hasSecond = options.hasSecond,
      use12Hours = options.use12Hours;
  var result = [];

  if (hasHour) {
    var h = d.getHours();
    result.push(use12Hours ? h % 12 : h);
  }

  if (hasMinute) {
    result.push(d.getMinutes());
  }

  if (hasSecond) {
    result.push(d.getSeconds());
  }

  if (use12Hours) {
    result.push(d.getHours() >= 12 ? 'pm' : 'am');
  }

  return result;
}

exports.dateToPicker = dateToPicker;

function pickerToDate(values, options) {
  var hasHour = options.hasHour,
      hasMinute = options.hasMinute,
      hasSecond = options.hasSecond,
      use12Hours = options.use12Hours;
  var d = new Date();

  if (hasHour) {
    var h = values.shift();

    if (use12Hours) {
      var isAm = values.pop() === 'am';

      if (isAm) {
        d.setHours(h);
      } else {
        d.setHours(h + 12);
      }
    } else {
      d.setHours(h);
    }
  } else {
    d.setHours(0);
  }

  if (hasMinute) {
    d.setMinutes(values.shift());
  } else {
    d.setMinutes(0);
  }

  if (hasSecond) {
    d.setSeconds(values.shift());
  } else {
    d.setSeconds(0);
  }

  d.setMilliseconds(0);
  return d;
}

exports.pickerToDate = pickerToDate;