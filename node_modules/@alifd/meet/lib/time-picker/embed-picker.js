"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var dayjs_1 = tslib_1.__importDefault(require("dayjs"));

var picker_1 = tslib_1.__importDefault(require("../picker"));

var locale_1 = require("../locale");

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var date_1 = require("../utils/date");

var hooks_1 = require("../utils/hooks");

var utils_1 = require("./utils");

var EmbedPicker = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      valueProp = props.value,
      defaultValue = props.defaultValue,
      onChange = props.onChange,
      className = props.className,
      hourStep = props.hourStep,
      minuteStep = props.minuteStep,
      secondStep = props.secondStep,
      _b = props.format,
      format = _b === void 0 ? utils_1.DEFAULT_FORMAT : _b,
      disabledHours = props.disabledHours,
      disabledMinutes = props.disabledMinutes,
      disabledSeconds = props.disabledSeconds,
      validRangeProp = props.validRange,
      others = tslib_1.__rest(props, ["prefix", "value", "defaultValue", "onChange", "className", "hourStep", "minuteStep", "secondStep", "format", "disabledHours", "disabledMinutes", "disabledSeconds", "validRange"]);

  var options = utils_1.getTimeOption(props);
  var validRange = date_1.getRealRange(options, props, validRangeProp);
  var locale = locale_1.useLocale('TimePicker', others, zh_cn_1.default.TimePicker);

  var _c = hooks_1.useValue(props, new Date(), {
    fitValue: function fitValue(v) {
      var d = date_1.toDate(v);
      var x = date_1.getRangeDate(date_1.isValidDate(d) ? d : new Date(), {
        time: options
      }, validRange);

      if (validRange && (secondStep !== 1 || minuteStep !== 1 || hourStep !== 1)) {
        var xt = dayjs_1.default(x).format(format);

        if (xt !== dayjs_1.default(validRange[0]).format(format) && xt !== dayjs_1.default(validRange[1]).format(format)) {
          return date_1.getNearestDate(options, props, x, 'auto');
        }
      }

      return x;
    },
    compare: function compare(a, b) {
      return a.getTime() === b.getTime();
    }
  }),
      value = _c[0],
      setValue = _c[1],
      isControlled = _c[2];

  var dataSource = utils_1.getColumns(value, options, tslib_1.__assign(tslib_1.__assign({}, props), {
    locale: locale
  }));
  var pickerValue = utils_1.dateToPicker(value, options);
  return rax_1.createElement(picker_1.default, {
    ref: ref,
    className: className,
    prefix: prefix,
    value: pickerValue,
    data: dataSource,
    onChange: function handleChange(values) {
      var d = date_1.getRangeDate(utils_1.pickerToDate(values, options), {
        time: options
      }, validRange);

      if (onChange) {
        onChange(d);
      }

      if (!isControlled) {
        setValue(d);
      }
    }
  });
};

exports.default = rax_1.forwardRef(EmbedPicker);