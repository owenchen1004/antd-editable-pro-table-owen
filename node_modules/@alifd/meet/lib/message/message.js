"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

var ICON_MAP = {
  success: 'success',
  warning: 'warning',
  error: 'error',
  notice: 'prompt',
  help: 'help',
  loading: 'loading'
};

var Message = function (props, ref) {
  var _a, _b, _c, _d;

  var _e = props.prefix,
      prefix = _e === void 0 ? 'mt-' : _e,
      className = props.className,
      _f = props.shape,
      shape = _f === void 0 ? 'inline' : _f,
      type = props.type,
      visibleProp = props.visible,
      _g = props.defaultVisible,
      defaultVisible = _g === void 0 ? false : _g,
      title = props.title,
      iconType = props.iconType,
      _h = props.closable,
      closable = _h === void 0 ? false : _h,
      onClose = props.onClose,
      children = props.children,
      zIndex = props.zIndex,
      style = props.style,
      others = tslib_1.__rest(props, ["prefix", "className", "shape", "type", "visible", "defaultVisible", "title", "iconType", "closable", "onClose", "children", "zIndex", "style"]);

  var newStyle = tslib_1.__assign({
    zIndex: zIndex
  }, style);

  var _j = hooks_1.useValue(props, false, {
    valueName: 'visible'
  }),
      visible = _j[0],
      setVisible = _j[1],
      isControlled = _j[2];

  if (!visible) {
    return null;
  }

  var clsPrefix = prefix + "message";
  var toastContent = title || children;
  var isToast = shape === 'toast';
  var hideIcon = iconType === null || iconType === '' || isToast && !type;
  var isSimpleMode = shape === 'inline' && !title && children;
  return rax_1.createElement(view_1.default, tslib_1.__assign({
    ref: ref,
    className: classnames_1.default(clsPrefix, clsPrefix + "--" + type, clsPrefix + "--" + shape, className, (_a = {}, _a[clsPrefix + "--" + shape + "-" + type] = shape && type, _a[clsPrefix + "--inline--no-title"] = shape === 'inline' && !toastContent, _a[clsPrefix + "--toast-with-icon"] = shape === 'toast' && !hideIcon, _a)),
    style: newStyle
  }, others), !hideIcon && rax_1.createElement(view_1.default, {
    className: clsPrefix + "-icon-container--" + shape
  }, rax_1.createElement(icon_1.default, {
    name: iconType || ICON_MAP[type] || type,
    className: classnames_1.default(clsPrefix + "-icon", clsPrefix + "-icon--" + type, clsPrefix + "-icon--" + shape)
  })), rax_1.createElement(view_1.default, {
    className: clsPrefix + "-container " + clsPrefix + "-container--" + shape
  }, title && !isToast && rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-title")
  }, utils_1.isString(title) ? rax_1.createElement(rax_text_1.default, {
    className: classnames_1.default(clsPrefix + "-title", (_b = {}, _b[clsPrefix + "-title--" + type] = isSimpleMode, _b)),
    numberOfLines: 1
  }, title || children) : title), rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-content-container", clsPrefix + "-content-container--" + shape)
  }, isToast && utils_1.isString(toastContent) ? rax_1.createElement(rax_text_1.default, {
    className: classnames_1.default(clsPrefix + "-content", clsPrefix + "-content--" + shape),
    numberOfLines: 20
  }, toastContent) : null, isToast && !utils_1.isString(toastContent) ? toastContent : null, !isToast && children ? rax_1.createElement(view_1.default, {
    className: classnames_1.default(clsPrefix + "-content--inline", (_c = {}, _c[clsPrefix + "-content--no-title"] = shape === 'inline' && !title, _c[clsPrefix + "-content--inline-" + type] = isSimpleMode, _c[clsPrefix + "-content--inline-simple"] = isSimpleMode, _c))
  }, children) : null)), closable && !isToast && rax_1.createElement(icon_1.default, {
    name: "close",
    size: "s",
    className: classnames_1.default(clsPrefix + "-close", (_d = {}, _d[clsPrefix + "-close--" + type] = isSimpleMode, _d)),
    onClick: function handleClose() {
      if (!isControlled) {
        setVisible(false);
      }

      if (utils_1.isFunction(onClose)) {
        onClose();
      }
    }
  }));
};

Message.displayName = 'Message';
exports.default = rax_1.forwardRef(Message);