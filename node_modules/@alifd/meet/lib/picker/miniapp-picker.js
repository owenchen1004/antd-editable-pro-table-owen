"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var style_1 = require("../utils/style");

var utils_1 = require("./utils");

var Picker = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      data = props.data,
      className = props.className,
      valueProp = props.value,
      defaultValue = props.defaultValue,
      cascade = props.cascade,
      style = props.style,
      _b = props.onChange,
      onChange = _b === void 0 ? function () {} : _b,
      _c = props.maskStyle,
      maskStyle = _c === void 0 ? {} : _c,
      _d = props.indicatorStyle,
      indicatorStyle = _d === void 0 ? {} : _d,
      others = tslib_1.__rest(props, ["prefix", "data", "className", "value", "defaultValue", "cascade", "style", "onChange", "maskStyle", "indicatorStyle"]);

  var clsPrefix = prefix + "picker";

  var _e = rax_1.useState(valueProp || defaultValue || []),
      innerValue = _e[0],
      setInnerValue = _e[1];

  var value = 'value' in props ? valueProp : innerValue;
  var dataArray = utils_1.getDataArray(data, value, cascade);
  var curPickerIndex = utils_1.getIndex(dataArray, value);

  var handleChange = function (e) {
    var newIndex = e.detail.value;

    var _dataArray = utils_1.getDataArrayByIndex(data, newIndex, cascade);

    var ret = [];

    _dataArray.forEach(function (col, index) {
      var idx = newIndex[index] || 0;

      if (idx !== 0 && idx >= col.length) {
        idx = col.length - 1;
      }

      ret.push(col[idx].value);
    });

    onChange(ret, e);

    if (!('value' in props)) {
      setInnerValue(ret);
    }
  };

  rax_1.useEffect(function () {
    if (!('value' in props)) {
      return;
    }

    if (!valueProp) {
      if (innerValue.length !== 0 && defaultValue.length === 0) {
        setInnerValue([]);
        return;
      }

      if (innerValue.join(',') !== defaultValue.join(',')) {
        setInnerValue(defaultValue);
      }

      return;
    }

    if (innerValue.join(',') !== valueProp.join(',')) {
      setInnerValue(valueProp);
    }
  }, [innerValue, valueProp]);
  return rax_1.createElement("picker-view", tslib_1.__assign({
    className: classnames_1.default(clsPrefix, className),
    value: curPickerIndex,
    onChange: handleChange,
    "mask-style": style_1.toStyleText(maskStyle),
    "indicator-style": style_1.toStyleText(tslib_1.__assign({
      height: 'var(--picker-height)'
    }, indicatorStyle)),
    ref: ref
  }, others), dataArray.map(function (colArr, colIndex) {
    return rax_1.createElement("picker-view-column", {
      key: colIndex
    }, colArr.map(function (item, itemIndex) {
      var _a;

      var isSelected = itemIndex === curPickerIndex[colIndex] || !curPickerIndex[colIndex] && itemIndex === 0;
      return rax_1.createElement("view", {
        key: itemIndex,
        className: classnames_1.default(clsPrefix + "-col-item", (_a = {}, _a[clsPrefix + "-col-item--selected"] = isSelected, _a))
      }, item.label);
    }));
  }));
};

exports.default = rax_1.forwardRef(Picker);