"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var locale_1 = require("../locale");

var zh_cn_1 = tslib_1.__importDefault(require("../locale/lang/zh-cn"));

var hooks_1 = require("../utils/hooks");

var view_1 = tslib_1.__importDefault(require("../view"));

var column_1 = tslib_1.__importDefault(require("./column"));

var utils_1 = require("./utils");

var formatValues = function (dataArray, value) {
  if (value === void 0) {
    value = [];
  }

  return dataArray.map(function (columnData, index) {
    if (columnData.length === 0) {
      console.error('[Picker] column\'s length cannot be 0, please check "data"', dataArray);
      return null;
    }

    return columnData.find(function (it) {
      return it.value === value[index];
    }) ? value[index] : columnData[0].value;
  });
};

var Picker = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      _b = props.data,
      data = _b === void 0 ? [] : _b,
      cascade = props.cascade,
      _c = props.onChange,
      onChange = _c === void 0 ? function () {} : _c,
      style = props.style,
      className = props.className,
      valueProp = props.value,
      defaultValue = props.defaultValue,
      others = tslib_1.__rest(props, ["prefix", "data", "cascade", "onChange", "style", "className", "value", "defaultValue"]);

  var locale = locale_1.useLocale('Picker', others, zh_cn_1.default.Picker);

  var _d = hooks_1.useValue(props, [], {
    fitValue: function fitValue(x) {
      if (!Array.isArray(x)) {
        return [x];
      }

      return x;
    },
    compare: function compare(a, b) {
      if (b.length !== a.length) {
        return false;
      }

      return a.join(',') === b.join(',');
    }
  }),
      value = _d[0],
      setValue = _d[1],
      isControlled = _d[2];

  var handleChange = function (v, index) {
    var newValue = tslib_1.__spreadArrays(value);

    newValue[index] = v;
    var formattedNewValue = formatValues(utils_1.getDataArray(data, newValue, cascade), newValue);
    onChange(formattedNewValue, index);

    if (!isControlled) {
      setValue(formattedNewValue);
    }
  };

  var dataArray = utils_1.getDataArray(data, value, cascade);
  var values = formatValues(dataArray, value);
  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    className: classnames_1.default(prefix + "picker", prefix + "picker--web", className),
    style: style,
    ref: ref
  }), dataArray.map(function (d, index) {
    var columnValue = values[index] === undefined ? d[0].value : values[index];
    return rax_1.createElement(column_1.default, {
      prefix: prefix,
      onChange: function (v) {
        return handleChange(v, index);
      },
      key: index,
      data: d,
      value: columnValue
    });
  }), dataArray && dataArray.length === 0 ? rax_1.createElement(rax_text_1.default, {
    className: prefix + "picker-text--empty"
  }, locale.empty) : null);
};

exports.default = rax_1.forwardRef(Picker);