"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var image_1 = tslib_1.__importDefault(require("./image"));

var link_1 = tslib_1.__importDefault(require("./link"));

var video_1 = tslib_1.__importDefault(require("./video"));

var util_1 = require("./util");

var utils_1 = require("../utils");

var ExternalNode = function (props) {
  var item = props.item,
      className = props.className,
      onImageClick = props.onImageClick,
      onImgError = props.onImgError,
      onVideoLoad = props.onVideoLoad,
      onVideoPlay = props.onVideoPlay,
      errorImage = props.errorImage,
      style = props.style,
      lazyLoad = props.lazyLoad;
  var name = item.name,
      attrs = item.attrs,
      src = item.src,
      text = item.text,
      i = item.i;

  var _a = attrs || {},
      _b = _a.id,
      id = _b === void 0 ? '' : _b,
      href = _a.href,
      itemClass = _a.class,
      restAttrs = tslib_1.__rest(_a, ["id", "href", "class"]);

  if (text) {
    return rax_1.createElement("text", {
      className: "_text"
    }, text);
  }

  switch (name) {
    case 'a':
      return rax_1.createElement(link_1.default, {
        className: classnames_1.default(itemClass, className),
        hoverClass: "_hover",
        href: href,
        style: style
      }, rax_1.createElement(ExternalNode, {
        item: tslib_1.__assign({
          name: 'div'
        }, item)
      }));

    case 'br':
      return rax_1.createElement("text", null, "\n      ");

    case 'img':
    case 'image':
      return rax_1.createElement(image_1.default, tslib_1.__assign({}, restAttrs, {
        className: classnames_1.default(className, itemClass),
        errorImage: errorImage,
        imgIndex: i,
        onClick: function onClick() {
          if (!item.a) {
            onImageClick(i);
          }
        },
        style: style,
        onError: onImgError,
        lazyLoad: lazyLoad
      }));

    case 'video':
      return rax_1.createElement(video_1.default, tslib_1.__assign({}, restAttrs, {
        id: id,
        className: classnames_1.default('_video', itemClass, className),
        src: Array.isArray(src) ? src.join('') : '',
        style: tslib_1.__assign(tslib_1.__assign({}, style), utils_1.isStrictMiniApp ? {
          display: 'grid'
        } : null),
        onLoad: onVideoLoad,
        onPlay: onVideoPlay
      }));

    default:
      return rax_1.createElement("rich-text", {
        id: id,
        style: tslib_1.__assign({
          display: 'inline'
        }, style),
        nodes: [item]
      });
  }
};

var RichTextNode = function (_super) {
  tslib_1.__extends(RichTextNode, _super);

  function RichTextNode() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  RichTextNode.prototype.render = function () {
    var _a = this.props,
        nodes = _a.nodes,
        otherProps = tslib_1.__rest(_a, ["nodes"]);

    return nodes.map(function (item, index) {
      var _a = item.attrs,
          attrs = _a === void 0 ? {} : _a;

      var _b = attrs.style,
          style = _b === void 0 ? '' : _b,
          _c = attrs.href,
          href = _c === void 0 ? '' : _c,
          nodeClassName = attrs.class,
          otherAttrs = tslib_1.__rest(attrs, ["style", "href", "class"]);

      if (item.name === 'a') {
        return rax_1.createElement(link_1.default, tslib_1.__assign({
          key: index
        }, otherAttrs, otherProps, {
          className: classnames_1.default("_" + item.name, nodeClassName),
          style: util_1.convertStyle(style),
          href: href
        }), rax_1.createElement(RichTextNode, tslib_1.__assign({
          nodes: item.children
        }, otherProps)));
      }

      if (item.children) {
        return rax_1.createElement("view", tslib_1.__assign({
          key: index
        }, otherAttrs, {
          className: classnames_1.default("_" + item.name, nodeClassName),
          style: util_1.convertStyle(style)
        }), rax_1.createElement(RichTextNode, tslib_1.__assign({
          nodes: item.children
        }, otherProps)));
      }

      return rax_1.createElement(ExternalNode, tslib_1.__assign({
        key: index
      }, otherProps, {
        className: classnames_1.default("_" + item.name, nodeClassName),
        item: item,
        style: util_1.convertStyle(style)
      }));
    });
  };

  return RichTextNode;
}(rax_1.Component);

exports.default = RichTextNode;