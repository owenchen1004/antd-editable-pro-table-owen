"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var view_1 = tslib_1.__importDefault(require("../view"));

var image_1 = require("@uni/image");

var env_1 = require("@uni/env");

var utils_1 = require("../utils");

var hooks_1 = require("../utils/hooks");

var html_parser_1 = tslib_1.__importDefault(require("./html-parser"));

var node_1 = tslib_1.__importDefault(require("./node"));

var util_1 = require("./util");

var RichText = function (_super) {
  tslib_1.__extends(RichText, _super);

  function RichText() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.state = {
      nodes: []
    };
    _this.imgList = [];
    _this.videos = {};
    _this.plugins = [];
    _this.ref = rax_1.createRef();

    _this.wrapTable = function () {
      var rootNode = _this.ref.current;

      if (rootNode) {
        var tables = rootNode.getElementsByTagName('table');
        Array.from(tables).forEach(function (tableNode) {
          var tmp = document.createElement('div');
          tmp.style.overflowX = 'auto';
          tmp.style.padding = '1px';
          tmp.appendChild(tableNode.cloneNode(true));
          tableNode.parentNode.insertBefore(tmp, tableNode);
          tableNode.remove();
        });
      }
    };

    _this.replaceErrorImg = function () {
      var rootNode = _this.ref.current;

      if (rootNode) {
        tslib_1.__spreadArrays(rootNode.getElementsByTagName('img')).forEach(function (img) {
          if (img && img.addEventListener) {
            img.addEventListener('error', function () {
              img.src = _this.props.errorImage;
            });
          }
        });
      }
    };

    _this.parseHtmlText = function (text) {
      var nodes = new html_parser_1.default(_this).parse(text);

      _this.setState({
        nodes: nodes
      });
    };

    _this.handleImageClick = function (i) {
      if (_this.props.enableImagePreview) {
        image_1.previewImage({
          urls: _this.imgList,
          current: i || 0
        }).then(function () {});
      }
    };

    _this.handleImageError = function (src, i) {
      var errorImage = _this.props.errorImage;
      _this.imgList[i] = errorImage;
    };

    _this.handleVideoLoad = function (id) {
      _this.videos[id] = util_1.getVideoContext(id);
    };

    _this.handleVideoPlay = function (id) {
      if (_this.props.pauseVideo) {
        Object.entries(_this.videos).forEach(function (_a) {
          var videoId = _a[0],
              ctx = _a[1];

          if (videoId !== id && ctx && ctx.pause) {
            ctx.pause();
          }
        });
      }
    };

    return _this;
  }

  RichText.prototype.componentWillMount = function () {
    if (utils_1.isMiniappPlatform) {
      var text = this.props.text;
      this.parseHtmlText(text);
    }
  };

  RichText.prototype.componentWillReceiveProps = function (nextProps) {
    if (utils_1.isMiniappPlatform) {
      var text = nextProps.text;
      this.parseHtmlText(text);
    }
  };

  RichText.prototype.componentDidMount = function () {
    if (env_1.isWeb) {
      this.afterWebRender();
    }
  };

  RichText.prototype.componentDidUpdate = function (prevProps) {
    if (env_1.isWeb && this.props.text !== prevProps.text) {
      this.afterWebRender();
    }
  };

  RichText.prototype.afterWebRender = function () {
    var _a = this.props,
        enableTableScroll = _a.enableTableScroll,
        errorImage = _a.errorImage;

    if (enableTableScroll) {
      this.wrapTable();
    }

    if (errorImage) {
      this.replaceErrorImg();
    }
  };

  RichText.prototype.render = function () {
    var _a = this.props,
        style = _a.style,
        lazyLoad = _a.lazyLoad,
        text = _a.text,
        otherProps = tslib_1.__rest(_a, ["style", "lazyLoad", "text"]);

    return rax_1.createElement(view_1.default, {
      id: "mtRichTextRoot-" + hooks_1.guid(),
      ref: this.ref,
      className: this.props.prefix + "rich-text",
      style: style
    }, utils_1.isMiniappPlatform ? rax_1.createElement(node_1.default, tslib_1.__assign({
      lazyLoad: lazyLoad,
      nodes: this.state.nodes,
      onImageClick: this.handleImageClick,
      onImgError: this.handleImageError,
      onVideoLoad: this.handleVideoLoad,
      onVideoPlay: this.handleVideoPlay
    }, otherProps)) : rax_1.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: text || ''
      }
    }));
  };

  RichText.defaultProps = {
    prefix: 'mt-',
    text: '',
    errorImage: 'https://gw.alicdn.com/imgextra/i4/O1CN014BzOrR1EjHycne0VV_!!6000000000387-2-tps-200-200.png',
    lazyLoad: false,
    enableImagePreview: true,
    useAnchor: false,
    pauseVideo: true,
    enableTableScroll: false,
    tagStyle: {
      table: 'box-sizing: border-box; ',
      li: 'margin: 5px 0;',
      img: 'width: auto'
    }
  };
  return RichText;
}(rax_1.Component);

exports.default = RichText;