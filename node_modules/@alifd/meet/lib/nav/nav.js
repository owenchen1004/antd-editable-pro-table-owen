"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_1 = require("rax");

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var rax_clone_element_1 = tslib_1.__importDefault(require("rax-clone-element"));

var utils_1 = require("../utils");

var tree_1 = require("../utils/tree");

var view_1 = tslib_1.__importDefault(require("../view"));

var context_1 = tslib_1.__importDefault(require("./context"));

var item_1 = tslib_1.__importDefault(require("./item"));

var sub_nav_1 = tslib_1.__importDefault(require("./sub-nav"));

var getInitSelectKeys = function (props) {
  var ret = [];

  if ('selectedKeys' in props) {
    if (utils_1.isValidArray(props.selectedKeys)) {
      ret = props.selectedKeys;
    } else if (utils_1.isString(props.selectedKeys) && props.selectedKeys) {
      ret = [props.selectedKeys];
    }
  } else if ('defaultSelectedKeys' in props) {
    if (utils_1.isValidArray(props.defaultSelectedKeys)) {
      ret = props.defaultSelectedKeys;
    } else if (utils_1.isString(props.defaultSelectedKeys) && props.defaultSelectedKeys) {
      ret = [props.defaultSelectedKeys];
    }
  }

  return utils_1.isValidArray(ret) ? ret : [];
};

var checkDataSourceKey = function (dataSource) {
  var rs = true;
  tree_1.dfs(dataSource, function (node) {
    if (rs && !node.key) {
      rs = false;
    }
  });
  return rs;
};

var Nav = function (props, ref) {
  var _a = props.prefix,
      prefix = _a === void 0 ? 'mt-' : _a,
      className = props.className,
      _b = props.size,
      size = _b === void 0 ? 'medium' : _b,
      _c = props.type,
      type = _c === void 0 ? 'normal' : _c,
      _d = props.model,
      model = _d === void 0 ? 'solid' : _d,
      _e = props.direction,
      direction = _e === void 0 ? 'ver' : _e,
      defaultSelectedKeys = props.defaultSelectedKeys,
      selectedKeys = props.selectedKeys,
      _f = props.dataSource,
      dataSource = _f === void 0 ? [] : _f,
      children = props.children,
      onSelect = props.onSelect,
      others = tslib_1.__rest(props, ["prefix", "className", "size", "type", "model", "direction", "defaultSelectedKeys", "selectedKeys", "dataSource", "children", "onSelect"]);

  var _g = rax_1.useState(getInitSelectKeys(props)),
      curSelectedKeys = _g[0],
      setCurrentSelectedKeys = _g[1];

  var isControlled = ('selectedKeys' in props);
  var clsPrefix = prefix + "nav";
  var navClassNames = classnames_1.default("" + clsPrefix, clsPrefix + "--" + direction, className);
  var childProps = {
    size: size,
    type: type,
    model: model,
    direction: direction
  };
  rax_1.useEffect(function () {
    if (utils_1.isValidArray(dataSource) && !checkDataSourceKey(dataSource)) {
      console.error('each item in dataSource should have key property, plese check');
    }
  }, []);
  rax_1.useEffect(function () {
    if ('selectedKeys' in props) {
      if (utils_1.isUndef(props.selectedKeys)) {
        var val = getInitSelectKeys(props);
        setCurrentSelectedKeys(val);
      } else if (utils_1.isValidArray(props.selectedKeys)) {
        setCurrentSelectedKeys(props.selectedKeys);
      } else if (utils_1.isString(props.selectedKeys) && props.selectedKeys) {
        setCurrentSelectedKeys([props.selectedKeys]);
      }
    }
  }, [selectedKeys]);
  return rax_1.createElement(context_1.default.Provider, {
    value: {
      curSelectedKeys: curSelectedKeys,
      onItemSelect: function onItemSelect(itemKey, e) {
        if (!isControlled) {
          setCurrentSelectedKeys([itemKey]);
        }

        if (onSelect) {
          onSelect(itemKey, e);
        }
      },
      model: model,
      direction: direction,
      type: type,
      size: size,
      clsPrefix: clsPrefix
    }
  }, rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    ref: ref,
    className: navClassNames
  }), dataSource.length ? function getRenderNode() {
    return dataSource.map(function (item, index) {
      var itemKey = item.key || prefix + "nav-" + index;
      var icon = item.icon,
          iconUri = item.iconUri,
          _children = item.children;
      return utils_1.isValidArray(_children) ? rax_1.createElement(sub_nav_1.default, {
        key: itemKey,
        itemKey: itemKey,
        icon: icon,
        iconUri: iconUri,
        label: item.label,
        dataSource: _children
      }) : rax_1.createElement(item_1.default, {
        key: itemKey,
        itemKey: itemKey,
        icon: icon,
        iconUri: iconUri,
        label: item.label
      });
    });
  }() : function getChildrenNode() {
    var _key = 0;
    return rax_children_1.default.map(children, function (child) {
      _key += 1;
      var itemKey = child.key || _key;
      return rax_clone_element_1.default(child, tslib_1.__assign(tslib_1.__assign({}, childProps), {
        key: "" + _key,
        itemKey: "" + itemKey,
        size: size
      }));
    });
  }()));
};

Nav.displayName = 'Nav';
exports.default = rax_1.forwardRef(Nav);