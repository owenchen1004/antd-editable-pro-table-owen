"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var rax_children_1 = tslib_1.__importDefault(require("rax-children"));

var rax_clone_element_1 = tslib_1.__importDefault(require("rax-clone-element"));

var rax_is_valid_element_1 = tslib_1.__importDefault(require("rax-is-valid-element"));

var rax_text_1 = tslib_1.__importDefault(require("rax-text"));

var view_1 = tslib_1.__importDefault(require("../view"));

var icon_1 = tslib_1.__importDefault(require("../icon"));

var utils_1 = require("../utils");

var context_1 = tslib_1.__importDefault(require("./context"));

var NavItem = function (props, ref) {
  var _a, _b, _c;

  var className = props.className,
      label = props.label,
      itemKey = props.itemKey,
      _d = props.disableSelect,
      disableSelect = _d === void 0 ? false : _d,
      _e = props.level,
      level = _e === void 0 ? 1 : _e,
      icon = props.icon,
      iconUri = props.iconUri,
      children = props.children,
      extra = props.extra,
      _f = props.onClick,
      onClick = _f === void 0 ? function () {} : _f,
      others = tslib_1.__rest(props, ["className", "label", "itemKey", "disableSelect", "level", "icon", "iconUri", "children", "extra", "onClick"]);

  var ctx = rax_1.useContext(context_1.default);
  var curSelectedKeys = ctx.curSelectedKeys,
      clsPrefix = ctx.clsPrefix,
      size = ctx.size,
      type = ctx.type,
      model = ctx.model,
      direction = ctx.direction,
      onItemSelect = ctx.onItemSelect;
  var selected = itemKey && utils_1.isValidArray(curSelectedKeys) && curSelectedKeys.includes(itemKey);
  var clses = {
    item: classnames_1.default(className, clsPrefix + "-item", clsPrefix + "-item--" + size, clsPrefix + "-item--" + type + "-" + model, clsPrefix + "--" + direction + "-item", clsPrefix + "-item--level" + level, (_a = {}, _a[clsPrefix + "-item--" + type + "-" + model + "--active"] = selected, _a)),
    icon: classnames_1.default(clsPrefix + "-item-icon", clsPrefix + "-item-icon--" + size, clsPrefix + "-item--" + type + "-" + model + "-icon", (_b = {}, _b[clsPrefix + "-item--" + type + "-" + model + "--active-icon"] = selected, _b)),
    label: classnames_1.default(clsPrefix + "-item-label", clsPrefix + "-item-label--" + size, clsPrefix + "-item--" + type + "-" + model + "-label", (_c = {}, _c[clsPrefix + "-item--" + type + "-" + model + "--active-label"] = selected, _c)),
    extra: clsPrefix + "-item-extra-wrapper--" + type
  };
  var iconCls = icon && icon.props ? icon.props.className : '';
  var iconProps = {};

  if (utils_1.isString(icon)) {
    iconProps.name = icon;
  } else if (iconUri) {
    iconProps.uri = iconUri;
  }

  return rax_1.createElement(view_1.default, tslib_1.__assign({
    ref: ref
  }, others, {
    className: clses.item,
    onClick: function onItemClick(e) {
      if (onClick) {
        onClick(itemKey);
      }

      if (disableSelect) {
        return;
      }

      if (onItemSelect) {
        onItemSelect(itemKey, e);
      }
    }
  }), rax_is_valid_element_1.default(icon) ? rax_clone_element_1.default(icon, {
    className: classnames_1.default(clses.icon, iconCls)
  }) : rax_1.createElement(icon_1.default, tslib_1.__assign({}, others, iconProps, {
    className: clses.icon
  })), function renderLabel() {
    if (children) {
      return rax_1.createElement(view_1.default, {
        className: clsPrefix + "-item-children-wrapper"
      }, rax_children_1.default.map(children, function (child, index) {
        if (rax_is_valid_element_1.default(child)) {
          return rax_clone_element_1.default(child, {
            key: "mt_nav_item_" + index
          });
        } else if (utils_1.isString(child) || utils_1.isNumber(child)) {
          return rax_1.createElement(rax_text_1.default, {
            className: clses.label,
            numberOfLines: 1
          }, child);
        }

        return null;
      }));
    } else if (rax_is_valid_element_1.default(label)) {
      return rax_1.createElement(view_1.default, {
        className: clses.label
      }, label);
    } else {
      return rax_1.createElement(rax_text_1.default, {
        className: clses.label,
        numberOfLines: 1
      }, label);
    }
  }(), extra ? rax_1.createElement(view_1.default, {
    className: clses.extra
  }, extra) : null);
};

NavItem.displayName = 'Nav.Item';
exports.default = rax_1.forwardRef(NavItem);