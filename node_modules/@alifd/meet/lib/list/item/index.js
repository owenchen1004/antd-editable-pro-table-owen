"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var rax_1 = require("rax");

var classnames_1 = tslib_1.__importDefault(require("classnames"));

var view_1 = tslib_1.__importDefault(require("../../view"));

var icon_1 = tslib_1.__importDefault(require("../../icon"));

var caption_1 = tslib_1.__importDefault(require("./caption"));

var content_1 = tslib_1.__importDefault(require("./content"));

var media_1 = require("./media");

var title_1 = tslib_1.__importDefault(require("./title"));

var utils_1 = require("../../utils");

var arrowIconMap = {
  right: 'arrow-right',
  up: 'arrow-up',
  down: 'arrow-down',
  loading: 'loading'
};

var renderExtra = function (ext) {
  if (utils_1.isString(ext)) {
    return rax_1.createElement(caption_1.default, null, ext);
  } else if (ext) {
    return ext;
  }

  return null;
};

var ListItem = function (props, ref) {
  var _a;

  var children = props.children,
      _b = props.prefix,
      prefix = _b === void 0 ? 'mt-' : _b,
      arrow = props.arrow,
      media = props.media,
      title = props.title,
      subTitle = props.subTitle,
      description = props.description,
      extra = props.extra,
      className = props.className,
      _onClick = props.onClick,
      _c = props.disabled,
      disabled = _c === void 0 ? false : _c,
      others = tslib_1.__rest(props, ["children", "prefix", "arrow", "media", "title", "subTitle", "description", "extra", "className", "onClick", "disabled"]);

  return rax_1.createElement(view_1.default, tslib_1.__assign({}, others, {
    className: classnames_1.default(prefix + "list-item", (_a = {}, _a[prefix + "list-item--clickable"] = utils_1.isFunction(_onClick), _a[prefix + "list-item--disabled"] = disabled, _a), className),
    ref: ref,
    onClick: function onClick() {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      if (!disabled && _onClick) {
        _onClick.apply(void 0, args);
      }
    }
  }), media ? rax_1.createElement(media_1.ListItemMedia, null, media) : null, rax_1.createElement(view_1.default, {
    className: prefix + "list-item-container"
  }, title || description ? rax_1.createElement(content_1.default, null, title ? rax_1.createElement(title_1.default, null, title) : null, subTitle ? rax_1.createElement(caption_1.default, null, subTitle) : null, description ? rax_1.createElement(caption_1.default, null, description) : null) : null, extra || utils_1.isString(arrow) ? rax_1.createElement(media_1.ListItemAction, null, renderExtra(extra), utils_1.isString(arrow) ? rax_1.createElement(icon_1.default, {
    size: "xs",
    className: prefix + "list-item-icon",
    name: arrowIconMap[arrow]
  }) : null) : null, children));
};

ListItem.displayName = 'ListItem';
exports.default = rax_1.forwardRef(ListItem);