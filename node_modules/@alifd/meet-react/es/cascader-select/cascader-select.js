function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

import { rpx2vw4style as __rpx2vw__ } from "babel-runtime-jsx-style-transform";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { __awaiter, __rest } from "tslib";
import React, { createElement, forwardRef, Fragment, useEffect, useRef, useState } from "react";
import classNames from 'classnames';
import { ScrollView, Text } from "@alifd/meet-react-component-one";
import View from '../view';
import Icon from '../icon';
import BreadCrumb from '../bread-crumb';
import List from '../list';
import Picker from '../picker';
import SelectDrawer from '../select-drawer';
import { useLocale } from '../locale';
import { isFunction, isUndef, isValidArray, isStrictWechatMiniProgram } from '../utils';
import { find, getDataByValues, getFirstValue, getSiblings, getFullPathByValue } from '../utils/tree';

var getInitValue = function getInitValue(props) {
  var _props$dataSource = props.dataSource,
      dataSource = _props$dataSource === void 0 ? [] : _props$dataSource,
      defaultValue = props.defaultValue,
      value = props.value;
  var ret = [];

  if ('value' in props) {
    if (isValidArray(value)) {
      ret = value;
    } else if (!Array.isArray(value) && value) {
      ret = getFullPathByValue(props.dataSource, props.value);
    }
  } else if (!isUndef(defaultValue)) {
    if (isValidArray(defaultValue)) {
      ret = defaultValue;
    } else if (!Array.isArray(defaultValue) && defaultValue) {
      ret = getFullPathByValue(dataSource, defaultValue);
    }
  }

  return ret;
};

var getInitInternalValue = function getInitInternalValue(props) {
  var r = getInitValue(props);
  var isNormalMode = props.mode !== 'mini';

  if (r.length === 0) {
    if (!isNormalMode) {
      return getFirstValue(props.dataSource);
    } else {
      return [];
    }
  } else {
    return r;
  }
};

var defaultRenderContent = function defaultRenderContent() {
  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var separator = arguments.length > 1 ? arguments[1] : undefined;
  return Array.isArray(values) ? values.map(function (val) {
    return val.label;
  }).join(separator) : '';
};

var CascaderSelect = function CascaderSelect(props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$dataSource2 = props.dataSource,
      dataSource = _props$dataSource2 === void 0 ? [] : _props$dataSource2,
      _props$separator = props.separator,
      separator = _props$separator === void 0 ? '/' : _props$separator,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? 'normal' : _props$mode,
      value = props.value,
      defaultValue = props.defaultValue,
      className = props.className,
      hasClear = props.hasClear,
      _props$useSimpleValue = props.useSimpleValue,
      useSimpleValue = _props$useSimpleValue === void 0 ? false : _props$useSimpleValue,
      onChange = props.onChange,
      _props$rootTipText = props.rootTipText,
      rootTipText = _props$rootTipText === void 0 ? '' : _props$rootTipText,
      localeProp = props.locale,
      loadData = props.loadData,
      isPreview = props.isPreview,
      renderPreview = props.renderPreview,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      drawerClassName = props.drawerClassName,
      previewClassNameProp = props.previewClassName,
      previewStyle = props.previewStyle,
      _props$onSelect = props.onSelect,
      onSelect = _props$onSelect === void 0 ? function () {} : _props$onSelect,
      _props$onClear = props.onClear,
      onClear = _props$onClear === void 0 ? function () {} : _props$onClear,
      onCancel = props.onCancel,
      _props$renderContent = props.renderContent,
      renderContent = _props$renderContent === void 0 ? defaultRenderContent : _props$renderContent,
      others = __rest(props, ["prefix", "dataSource", "separator", "mode", "value", "defaultValue", "className", "hasClear", "useSimpleValue", "onChange", "rootTipText", "locale", "loadData", "isPreview", "renderPreview", "size", "drawerClassName", "previewClassName", "previewStyle", "onSelect", "onClear", "onCancel", "renderContent"]);

  var scrollRef = useRef(null);
  var clsPrefix = "".concat(prefix, "cascader-select");
  var isControlled = ('value' in props);
  var isNormalMode = mode !== 'mini';
  var previewClassName = classNames(previewClassNameProp, "".concat(prefix, "form-item-input--preview-").concat(size));
  var loadingIcon = /*#__PURE__*/React.createElement(Icon, {
    className: "".concat(clsPrefix, "-icon--loading"),
    name: "loading",
    size: "s"
  });
  var selectedIcon = /*#__PURE__*/React.createElement(Icon, {
    className: "".concat(clsPrefix, "-icon--selected"),
    name: "select",
    size: "s"
  });

  var _useState = useState(getInitValue(props)),
      _useState2 = _slicedToArray(_useState, 2),
      curVal = _useState2[0],
      setVal = _useState2[1];

  var _useState3 = useState(getInitInternalValue(props)),
      _useState4 = _slicedToArray(_useState3, 2),
      internalValue = _useState4[0],
      setInternalVal = _useState4[1];

  var _useState5 = useState(null),
      _useState6 = _slicedToArray(_useState5, 2),
      loadingNode = _useState6[0],
      setLoadingNode = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      drawerVisible = _useState8[0],
      setDrawerVisible = _useState8[1];

  var locale = localeProp || useLocale('Cascader', props, {
    rootTipText: '首页'
  });
  var innerSelectedPath = getDataByValues(dataSource, internalValue);

  var handlePickerChange = function handlePickerChange(v) {
    return setInternalVal(v);
  };

  var handleOk = function handleOk() {
    if (isNormalMode) {
      if (isValidArray(internalValue)) {
        var lastVal = internalValue[internalValue.length - 1];
        var n = find(dataSource, function (node) {
          return node.value === lastVal;
        });

        if (n && n.children) {
          handleCancel('invalid-selection');
          return;
        }
      } else {
        handleCancel('invalid-selection');
        return;
      }
    }

    if (!isControlled) {
      setVal(internalValue);
    }

    if (onChange) {
      var selectedPath = getDataByValues(dataSource, internalValue);
      var lastData = selectedPath[selectedPath.length - 1];
      onChange(useSimpleValue ? lastData.value || '' : internalValue, lastData, {
        selectedPath: selectedPath
      });
    }
  };

  var handleCancel = function handleCancel(reason) {
    setInternalVal(curVal);

    if (isFunction(onCancel)) {
      onCancel(reason);
    }
  };

  var handleListClick = function handleListClick(item, dpt) {
    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var val, newInternalVal;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              val = item.value;
              newInternalVal = [].concat(_toConsumableArray(internalValue.slice(0, dpt)), [val]);

              if (loadData && internalValue.indexOf(val) > -1) {
                newInternalVal = internalValue.slice(0, internalValue.indexOf(val) + 1);
              }

              setInternalVal(newInternalVal);

              if (!(loadData && !item.isLeaf)) {
                _context.next = 9;
                break;
              }

              setLoadingNode(val);
              _context.next = 8;
              return loadData(item);

            case 8:
              setLoadingNode(null);

            case 9:
              if (item.children && scrollRef.current) {
                scrollRef.current.scrollTo(0, 0);
              }

              if (onSelect) {
                onSelect(val, item);
              }

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  };

  var handleBreadCrumbClick = function handleBreadCrumbClick() {
    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    setInternalVal(internalValue.slice(0, index));

    if (scrollRef.current) {
      scrollRef.current.scrollTo(0, 0);
    }
  };

  var handleClear = function handleClear() {
    if (!isControlled) {
      setVal([]);
      setInternalVal([]);
    }

    if (onClear) {
      onClear();
    }

    if (onChange) {
      onChange(useSimpleValue ? '' : [], {}, {
        selectedPath: []
      });
    }
  };

  var handleVisibleChange = function handleVisibleChange(visible) {
    return setDrawerVisible(visible);
  };

  useEffect(function () {
    setVal(getInitValue(props));
    setInternalVal(getInitInternalValue(props));
  }, [value]);
  useEffect(function () {
    if (!drawerVisible) {
      setVal(getInitValue(props));
      setInternalVal(getInitInternalValue(props));
    }
  }, [props.dataSource]);
  var nextList = [];

  if (isNormalMode) {
    if (isValidArray(internalValue)) {
      var lastVal = internalValue[internalValue.length - 1];
      var t = find(dataSource, function (node) {
        return node.value === lastVal;
      });

      if (t && loadingNode === t.value) {
        nextList = [];
      } else if (t && isValidArray(t.children)) {
        nextList = t.children;
      }
    } else {
      nextList = dataSource;
    }
  }

  var renderPicker = function renderPicker() {
    return isValidArray(dataSource) ? /*#__PURE__*/React.createElement(Picker, {
      cascade: true,
      data: dataSource,
      value: internalValue,
      onChange: handlePickerChange
    }) : null;
  };

  if (isPreview) {
    if (isFunction(renderPreview)) {
      return /*#__PURE__*/React.createElement(View, {
        className: previewClassName,
        style: __rpx2vw__(previewStyle)
      }, renderPreview(innerSelectedPath));
    }

    return /*#__PURE__*/React.createElement(Text, {
      className: previewClassName,
      style: __rpx2vw__(previewStyle)
    }, innerSelectedPath.map(function (node) {
      return node.label;
    }).join(separator));
  }

  return /*#__PURE__*/React.createElement(SelectDrawer, _extends({}, others, {
    ref: ref,
    hasClear: hasClear,
    className: classNames(clsPrefix, className),
    content: renderContent(getDataByValues(dataSource, curVal), separator),
    drawerClassName: classNames("".concat(clsPrefix, "-container"), drawerClassName),
    onVisibleChange: handleVisibleChange,
    onOk: handleOk,
    onCancel: handleCancel,
    onClear: handleClear
  }), isNormalMode ? /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(BreadCrumb, {
    className: classNames("".concat(clsPrefix, "-nav"), _defineProperty({}, "".concat(clsPrefix, "-nav--wechat"), isStrictWechatMiniProgram)),
    onClick: handleBreadCrumbClick
  }, /*#__PURE__*/React.createElement(BreadCrumb.Item, null, rootTipText || locale.rootTipText), isValidArray(innerSelectedPath) ? innerSelectedPath.map(function (val) {
    return /*#__PURE__*/React.createElement(BreadCrumb.Item, {
      key: val.value
    }, val.label);
  }) : null), /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-gutter")
  })) : null, !isNormalMode ? renderPicker() : /*#__PURE__*/React.createElement(ScrollView, {
    showsVerticalScrollIndicator: true,
    showsHorizontalScrollIndicator: false,
    ref: scrollRef,
    className: "".concat(clsPrefix, "-scrollview")
  }, /*#__PURE__*/React.createElement(View, {
    className: "".concat(clsPrefix, "-item-container")
  }, isValidArray(internalValue) ? internalValue.map(function (val, index) {
    var list = getSiblings(dataSource, val);
    return isValidArray(list) ? /*#__PURE__*/React.createElement(List, {
      className: "".concat(clsPrefix, "-list"),
      key: val
    }, list.map(function (item) {
      var icon = null;
      var hasArrow = loadData && !item.isLeaf || !loadData && item.children;

      if (loadData && loadingNode === item.value) {
        icon = loadingIcon;
      } else if (loadData && item.value === val || !loadData && item.value === val) {
        icon = selectedIcon;
      }

      return /*#__PURE__*/React.createElement(List.Item, {
        key: item.value,
        title: item.label,
        extra: icon,
        arrow: hasArrow && !icon ? 'right' : null,
        disabled: item.disabled,
        onClick: function onClick() {
          return handleListClick(item, index);
        }
      });
    })) : null;
  }) : null, isValidArray(nextList) ? /*#__PURE__*/React.createElement(List, {
    className: "".concat(clsPrefix, "-list")
  }, nextList.map(function (item) {
    var icon = null;
    var hasArrow = item.children || loadData && !item.isLeaf;

    if (loadData && item.isLeaf && item.value === loadingNode) {
      icon = loadingIcon;
    }

    return /*#__PURE__*/React.createElement(List.Item, {
      key: item.value,
      title: item.label,
      extra: icon,
      arrow: hasArrow && !icon ? 'right' : null,
      disabled: item.disabled,
      onClick: function onClick() {
        return handleListClick(item, internalValue ? internalValue.length : 0);
      }
    });
  })) : null)));
};

CascaderSelect.displayName = 'CascaderSelect';
export default /*#__PURE__*/forwardRef(CascaderSelect);