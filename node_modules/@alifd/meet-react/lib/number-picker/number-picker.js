"use strict";

exports.__esModule = true;
exports.default = void 0;

var _babelRuntimeJsxStyleTransform = require("babel-runtime-jsx-style-transform");

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

var _env = require("@uni/env");

var _view = _interopRequireDefault(require("../view"));

var _icon = _interopRequireDefault(require("../icon"));

var _button = _interopRequireDefault(require("../button"));

var _utils = require("../utils");

var _hooks = require("../utils/hooks");

var _utils2 = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

var MAX_NUMBER_PICKER_THRESHOLD = 9999999;
var isIOSH5 = _env.isWeb && window.navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);

function getInitInputValue(props) {
  var initialValue;

  if ('value' in props) {
    initialValue = props.value;
  } else if (!(0, _utils.isUndef)(props.defaultValue)) {
    initialValue = props.defaultValue;
  }

  return !(0, _utils.isInvalidValue)(initialValue) ? (0, _utils2.toNumber)(initialValue) : '';
}

function isDecreaseDisabled(value, min) {
  if (!(0, _utils.isNumber)(value)) {
    return false;
  }

  return min !== -Infinity && value <= min;
}

function isIncreaseDisabled(value, max) {
  if (!(0, _utils.isNumber)(value)) {
    return false;
  }

  return max !== Infinity && value >= max;
}

function getPrecision(precision, step) {
  if (typeof precision !== 'number' || precision < 0) {
    precision = 0;
  }

  var stepString = step.toString();
  var pcs = 0;

  if (stepString.indexOf('.') >= 0) {
    pcs = stepString.length - stepString.indexOf('.') - 1;
  }

  return Math.max(pcs, precision);
}

function getPrecisionFactor(precision) {
  return Math.pow(10, precision);
}

function hackChrome(value, precision) {
  if (precision > 0) {
    return Number(Number(value).toFixed(precision));
  }

  return value;
}

var NumberPicker = function (props, ref) {
  var _classNames, _classNames2, _classNames3, _classNames4, _classNames5;

  var className = props.className,
      _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      value = props.value,
      defaultValue = props.defaultValue,
      _props$max = props.max,
      max = _props$max === void 0 ? MAX_NUMBER_PICKER_THRESHOLD : _props$max,
      _props$min = props.min,
      min = _props$min === void 0 ? -MAX_NUMBER_PICKER_THRESHOLD : _props$min,
      _props$step = props.step,
      step = _props$step === void 0 ? 1 : _props$step,
      _k1 = props.keybordType,
      _k2 = props.keyboardType,
      _props$readOnly = props.readOnly,
      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$hideButton = props.hideButton,
      hideButton = _props$hideButton === void 0 ? false : _props$hideButton,
      enableNative = props.enableNative,
      _props$precision = props.precision,
      precisionProp = _props$precision === void 0 ? 0 : _props$precision,
      _props$focused = props.focused,
      focusedProp = _props$focused === void 0 ? false : _props$focused,
      _props$controlled = props.controlled,
      controlled = _props$controlled === void 0 ? false : _props$controlled,
      _props$inputStyle = props.inputStyle,
      inputStyle = _props$inputStyle === void 0 ? {} : _props$inputStyle,
      _props$onBeforeChange = props.onBeforeChange,
      onBeforeChange = _props$onBeforeChange === void 0 ? function () {
    return Promise.resolve();
  } : _props$onBeforeChange,
      onDisableClickProp = props.onDisableClick,
      onDisabledClickProp = props.onDisabledClick,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      _props$onInput = props.onInput,
      onInput = _props$onInput === void 0 ? function () {} : _props$onInput,
      _props$onFocus = props.onFocus,
      onFocus = _props$onFocus === void 0 ? function () {} : _props$onFocus,
      _props$onBlur = props.onBlur,
      onBlur = _props$onBlur === void 0 ? function () {} : _props$onBlur,
      _props$onCorrect = props.onCorrect,
      onCorrect = _props$onCorrect === void 0 ? function () {} : _props$onCorrect,
      others = (0, _tslib.__rest)(props, ["className", "prefix", "size", "value", "defaultValue", "max", "min", "step", "keybordType", "keyboardType", "readOnly", "disabled", "hideButton", "enableNative", "precision", "focused", "controlled", "inputStyle", "onBeforeChange", "onDisableClick", "onDisabledClick", "onChange", "style", "onInput", "onFocus", "onBlur", "onCorrect"]);
  var clsPrefix = prefix + "numberpicker";
  var isControlled = ('value' in props);
  var onDisabledClick = onDisabledClickProp || onDisableClickProp;
  var precision = getPrecision(precisionProp, step);
  var factor = getPrecisionFactor(precision);
  var inputRef = (0, _react.useRef)(null);
  var defaultValAtEmpty = (0, _utils2.getDefaultValue)(min, max, MAX_NUMBER_PICKER_THRESHOLD);

  var _useState = (0, _react.useState)(!!props.focused),
      focused = _useState[0],
      setFocused = _useState[1];

  var _useState2 = (0, _react.useState)(getInitInputValue(props)),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var inputId = (0, _hooks.useGuid)('mt-np-input-');

  var _useState3 = (0, _react.useState)(isDecreaseDisabled(inputValue, min)),
      decreaseDisabled = _useState3[0],
      setDecreaseDisabled = _useState3[1];

  var _useState4 = (0, _react.useState)(isIncreaseDisabled(inputValue, max)),
      increaseDisabled = _useState4[0],
      setIncreaseDisabled = _useState4[1];

  var keyboardType = (0, _hooks.useDeprecated)('NumberPicker', props, 'keybordType', 'keyboardType', 'number-pad');
  (0, _react.useEffect)(function () {
    var fn = function () {
      if (isControlled) {
        if ((0, _utils.isInvalidValue)(value)) {
          setInputValue('');
          updateInputVal('');
        } else {
          setInputValue((0, _utils2.toNumber)(props.value));
          updateInputVal(props.value);
        }
      }
    };

    if (_utils.isMiniappPlatform) {
      setTimeout(fn, 100);
    } else {
      fn();
    }
  });
  (0, _react.useEffect)(function () {
    setDecreaseDisabled(isDecreaseDisabled(inputValue, min));
    setIncreaseDisabled(isIncreaseDisabled(inputValue, max));
  }, [inputValue, max, min]);

  function handleChange(numValue, e) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!readOnly) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              _context.prev = 2;
              _context.next = 5;
              return onBeforeChange(numValue);

            case 5:
              _context.next = 10;
              break;

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](2);
              throw _context.t0;

            case 10:
              doChange(numValue, e);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 7]]);
    }));
  }

  function doChange(val, e) {
    if (!isControlled) {
      setInputValue(val);
    }

    onChange(val, e);
  }

  function updateInputVal(newVal) {
    var cur = inputRef.current;

    if (_env.isWeb && cur && cur._nativeNode) {
      cur._nativeNode.value = '';
      cur._nativeNode.value = newVal;
    } else if (_utils.isStrictWechatMiniProgram || _utils.isStrictMiniApp) {
      var input = document.querySelector("#" + inputId);
      input.value = '';
      input.value = (0, _utils2.toNumber)(newVal);
    }
  }

  var handleDisableClick = function handleDisableClick(actionType, e) {
    if ((0, _utils.isFunction)(onDisabledClick)) {
      onDisabledClick(actionType, e);
    }
  };

  var classNameObj = {
    numberPicker: (0, _classnames.default)("" + clsPrefix, clsPrefix + "--" + size),
    textInput: (0, _classnames.default)(clsPrefix + "-input", clsPrefix + "-input--" + size, (_classNames = {}, _classNames[clsPrefix + "-input--focused"] = focused, _classNames[clsPrefix + "-input--disabled"] = !isIOSH5 && disabled, _classNames[clsPrefix + "-input--readonly"] = readOnly, _classNames[clsPrefix + "-input--no-button"] = hideButton, _classNames)),
    decrease: (0, _classnames.default)(clsPrefix + "-button", clsPrefix + "-button-decrease", clsPrefix + "-button--" + size, (_classNames2 = {}, _classNames2[clsPrefix + "-button--disabled"] = disabled || decreaseDisabled, _classNames2)),
    decreaseIcon: (0, _classnames.default)(clsPrefix + "-button-icon", clsPrefix + "-button-icon--" + size, (_classNames3 = {}, _classNames3[clsPrefix + "-button-icon--disabled"] = disabled || decreaseDisabled, _classNames3)),
    increase: (0, _classnames.default)(clsPrefix + "-button", clsPrefix + "-button-increase", clsPrefix + "-button--" + size, (_classNames4 = {}, _classNames4[clsPrefix + "-button--disabled"] = disabled || increaseDisabled, _classNames4)),
    increaseIcon: (0, _classnames.default)(clsPrefix + "-button-icon", clsPrefix + "-button-icon--" + size, (_classNames5 = {}, _classNames5[clsPrefix + "-button-icon--disabled"] = disabled || increaseDisabled, _classNames5))
  };
  return /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({
    style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)(style),
    className: (0, _classnames.default)(classNameObj.numberPicker, className),
    ref: ref
  }, others), !hideButton ? /*#__PURE__*/(0, _react.createElement)(_button.default, {
    disabled: disabled || decreaseDisabled,
    type: "normal",
    model: "outline",
    size: size,
    className: classNameObj.decrease,
    onClick: function handleDecrease(e) {
      if ((0, _utils.isInvalidValue)(inputValue)) {
        handleChange(defaultValAtEmpty, e);
        return;
      }

      var newValue = (0, _utils2.clamp)(inputValue - step, min, max);
      var result = factor * newValue / factor;
      result = hackChrome(result, precision);

      if (newValue !== result && (0, _utils.isFunction)(onCorrect)) {
        onCorrect(result, newValue);
      }

      handleChange(result, e);
    },
    onDisabledClick: function onDisabledClick(e) {
      handleDisableClick('decrease', e);
    }
  }, /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    name: "minus",
    className: classNameObj.decreaseIcon
  })) : null, /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.TextInput, {
    id: inputId,
    className: classNameObj.textInput,
    ref: inputRef,
    value: "" + inputValue,
    editable: !disabled && !readOnly,
    keyboardType: keyboardType,
    enableNative: enableNative === true,
    onFocus: function handleFocus(e) {
      setFocused(true);

      if ((0, _utils.isFunction)(onFocus)) {
        onFocus(e);
      }
    },
    onBlur: function handleBlur(e) {
      var val = (0, _utils2.toNumber)((0, _utils.getValueFromEvents)(e));

      if ((0, _utils.isFunction)(onBlur)) {
        onBlur(e);
      }

      if ((0, _utils.isInvalidValue)(val)) {
        setFocused(false);
        handleChange('', Object.assign(Object.assign({}, e), {
          originalValue: (0, _utils.getValueFromEvents)(e)
        }));
        return;
      }

      var limitedValue = (0, _utils2.clamp)(val, min, max);

      if (!isControlled) {
        updateInputVal(limitedValue);
      }

      var result = factor * limitedValue / factor;
      result = hackChrome(result, precision);

      if (val !== result) {
        if (!isControlled) {
          updateInputVal(result);
        }

        onCorrect(result, val);
      }

      setFocused(false);
      handleChange(result, Object.assign(Object.assign({}, e), {
        originalValue: (0, _utils.getValueFromEvents)(e)
      }));
    },
    onInput: function handleInput(e) {
      if ((0, _utils.isFunction)(onInput)) {
        var val = (0, _utils2.toNumber)((0, _utils.getValueFromEvents)(e));
        onInput(val, e);
      }
    },
    style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)(inputStyle),
    controlled: controlled
  }), !hideButton ? /*#__PURE__*/(0, _react.createElement)(_button.default, {
    disabled: disabled || increaseDisabled,
    type: "normal",
    model: "outline",
    size: size,
    className: classNameObj.increase,
    onClick: function handleIncrease(e) {
      if ((0, _utils.isInvalidValue)(inputValue)) {
        handleChange(defaultValAtEmpty, e);
        return;
      }

      var newValue = (0, _utils2.clamp)(inputValue + step, min, max);
      var result = factor * newValue / factor;
      result = hackChrome(result, precision);

      if (newValue !== result && (0, _utils.isFunction)(onCorrect)) {
        onCorrect(result, newValue);
      }

      handleChange(result, e);
    },
    onDisabledClick: function onDisabledClick(e) {
      handleDisableClick('increase', e);
    }
  }, /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    name: "add",
    className: classNameObj.increaseIcon
  })) : null);
};

NumberPicker.displayName = 'NumberPicker';

var _default = /*#__PURE__*/(0, _react.forwardRef)(NumberPicker);

exports.default = _default;