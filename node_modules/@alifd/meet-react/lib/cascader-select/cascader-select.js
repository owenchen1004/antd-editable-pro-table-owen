"use strict";

exports.__esModule = true;
exports.default = void 0;

var _babelRuntimeJsxStyleTransform = require("babel-runtime-jsx-style-transform");

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

var _view = _interopRequireDefault(require("../view"));

var _icon = _interopRequireDefault(require("../icon"));

var _breadCrumb = _interopRequireDefault(require("../bread-crumb"));

var _list = _interopRequireDefault(require("../list"));

var _picker = _interopRequireDefault(require("../picker"));

var _selectDrawer = _interopRequireDefault(require("../select-drawer"));

var _locale = require("../locale");

var _utils = require("../utils");

var _tree = require("../utils/tree");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

var getInitValue = function (props) {
  var _props$dataSource = props.dataSource,
      dataSource = _props$dataSource === void 0 ? [] : _props$dataSource,
      defaultValue = props.defaultValue,
      value = props.value;
  var ret = [];

  if ('value' in props) {
    if ((0, _utils.isValidArray)(value)) {
      ret = value;
    } else if (!Array.isArray(value) && value) {
      ret = (0, _tree.getFullPathByValue)(props.dataSource, props.value);
    }
  } else if (!(0, _utils.isUndef)(defaultValue)) {
    if ((0, _utils.isValidArray)(defaultValue)) {
      ret = defaultValue;
    } else if (!Array.isArray(defaultValue) && defaultValue) {
      ret = (0, _tree.getFullPathByValue)(dataSource, defaultValue);
    }
  }

  return ret;
};

var getInitInternalValue = function (props) {
  var r = getInitValue(props);
  var isNormalMode = props.mode !== 'mini';

  if (r.length === 0) {
    if (!isNormalMode) {
      return (0, _tree.getFirstValue)(props.dataSource);
    } else {
      return [];
    }
  } else {
    return r;
  }
};

var defaultRenderContent = function (values, separator) {
  if (values === void 0) {
    values = [];
  }

  return Array.isArray(values) ? values.map(function (val) {
    return val.label;
  }).join(separator) : '';
};

var CascaderSelect = function (props, ref) {
  var _classNames;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      _props$dataSource2 = props.dataSource,
      dataSource = _props$dataSource2 === void 0 ? [] : _props$dataSource2,
      _props$separator = props.separator,
      separator = _props$separator === void 0 ? '/' : _props$separator,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? 'normal' : _props$mode,
      value = props.value,
      defaultValue = props.defaultValue,
      className = props.className,
      hasClear = props.hasClear,
      _props$useSimpleValue = props.useSimpleValue,
      useSimpleValue = _props$useSimpleValue === void 0 ? false : _props$useSimpleValue,
      onChange = props.onChange,
      _props$rootTipText = props.rootTipText,
      rootTipText = _props$rootTipText === void 0 ? '' : _props$rootTipText,
      localeProp = props.locale,
      loadData = props.loadData,
      isPreview = props.isPreview,
      renderPreview = props.renderPreview,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      drawerClassName = props.drawerClassName,
      previewClassNameProp = props.previewClassName,
      previewStyle = props.previewStyle,
      _props$onSelect = props.onSelect,
      onSelect = _props$onSelect === void 0 ? function () {} : _props$onSelect,
      _props$onClear = props.onClear,
      onClear = _props$onClear === void 0 ? function () {} : _props$onClear,
      onCancel = props.onCancel,
      _props$renderContent = props.renderContent,
      renderContent = _props$renderContent === void 0 ? defaultRenderContent : _props$renderContent,
      others = (0, _tslib.__rest)(props, ["prefix", "dataSource", "separator", "mode", "value", "defaultValue", "className", "hasClear", "useSimpleValue", "onChange", "rootTipText", "locale", "loadData", "isPreview", "renderPreview", "size", "drawerClassName", "previewClassName", "previewStyle", "onSelect", "onClear", "onCancel", "renderContent"]);
  var scrollRef = (0, _react.useRef)(null);
  var clsPrefix = prefix + "cascader-select";
  var isControlled = ('value' in props);
  var isNormalMode = mode !== 'mini';
  var previewClassName = (0, _classnames.default)(previewClassNameProp, prefix + "form-item-input--preview-" + size);
  var loadingIcon = /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    className: clsPrefix + "-icon--loading",
    name: "loading",
    size: "s"
  });
  var selectedIcon = /*#__PURE__*/(0, _react.createElement)(_icon.default, {
    className: clsPrefix + "-icon--selected",
    name: "select",
    size: "s"
  });

  var _useState = (0, _react.useState)(getInitValue(props)),
      curVal = _useState[0],
      setVal = _useState[1];

  var _useState2 = (0, _react.useState)(getInitInternalValue(props)),
      internalValue = _useState2[0],
      setInternalVal = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      loadingNode = _useState3[0],
      setLoadingNode = _useState3[1];

  var _useState4 = (0, _react.useState)(false),
      drawerVisible = _useState4[0],
      setDrawerVisible = _useState4[1];

  var locale = localeProp || (0, _locale.useLocale)('Cascader', props, {
    rootTipText: '首页'
  });
  var innerSelectedPath = (0, _tree.getDataByValues)(dataSource, internalValue);

  var handlePickerChange = function (v) {
    return setInternalVal(v);
  };

  var handleCancel = function (reason) {
    setInternalVal(curVal);

    if ((0, _utils.isFunction)(onCancel)) {
      onCancel(reason);
    }
  };

  var handleListClick = function (item, dpt) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var val, newInternalVal;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              val = item.value;
              newInternalVal = [].concat(internalValue.slice(0, dpt), [val]);

              if (loadData && internalValue.indexOf(val) > -1) {
                newInternalVal = internalValue.slice(0, internalValue.indexOf(val) + 1);
              }

              setInternalVal(newInternalVal);

              if (!(loadData && !item.isLeaf)) {
                _context.next = 9;
                break;
              }

              setLoadingNode(val);
              _context.next = 8;
              return loadData(item);

            case 8:
              setLoadingNode(null);

            case 9:
              if (item.children && scrollRef.current) {
                scrollRef.current.scrollTo(0, 0);
              }

              if (onSelect) {
                onSelect(val, item);
              }

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  };

  (0, _react.useEffect)(function () {
    setVal(getInitValue(props));
    setInternalVal(getInitInternalValue(props));
  }, [value]);
  (0, _react.useEffect)(function () {
    if (!drawerVisible) {
      setVal(getInitValue(props));
      setInternalVal(getInitInternalValue(props));
    }
  }, [props.dataSource]);
  var nextList = [];

  if (isNormalMode) {
    if ((0, _utils.isValidArray)(internalValue)) {
      var lastVal = internalValue[internalValue.length - 1];
      var t = (0, _tree.find)(dataSource, function (node) {
        return node.value === lastVal;
      });

      if (t && loadingNode === t.value) {
        nextList = [];
      } else if (t && (0, _utils.isValidArray)(t.children)) {
        nextList = t.children;
      }
    } else {
      nextList = dataSource;
    }
  }

  if (isPreview) {
    if ((0, _utils.isFunction)(renderPreview)) {
      return /*#__PURE__*/(0, _react.createElement)(_view.default, {
        className: previewClassName,
        style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)(previewStyle)
      }, renderPreview(innerSelectedPath));
    }

    return /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, {
      className: previewClassName,
      style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)(previewStyle)
    }, innerSelectedPath.map(function (node) {
      return node.label;
    }).join(separator));
  }

  return /*#__PURE__*/(0, _react.createElement)(_selectDrawer.default, _extends({}, others, {
    ref: ref,
    hasClear: hasClear,
    className: (0, _classnames.default)(clsPrefix, className),
    content: renderContent((0, _tree.getDataByValues)(dataSource, curVal), separator),
    drawerClassName: (0, _classnames.default)(clsPrefix + "-container", drawerClassName),
    onVisibleChange: function handleVisibleChange(visible) {
      return setDrawerVisible(visible);
    },
    onOk: function handleOk() {
      if (isNormalMode) {
        if ((0, _utils.isValidArray)(internalValue)) {
          var lastVal = internalValue[internalValue.length - 1];
          var n = (0, _tree.find)(dataSource, function (node) {
            return node.value === lastVal;
          });

          if (n && n.children) {
            handleCancel('invalid-selection');
            return;
          }
        } else {
          handleCancel('invalid-selection');
          return;
        }
      }

      if (!isControlled) {
        setVal(internalValue);
      }

      if (onChange) {
        var selectedPath = (0, _tree.getDataByValues)(dataSource, internalValue);
        var lastData = selectedPath[selectedPath.length - 1];
        onChange(useSimpleValue ? lastData.value || '' : internalValue, lastData, {
          selectedPath: selectedPath
        });
      }
    },
    onCancel: handleCancel,
    onClear: function handleClear() {
      if (!isControlled) {
        setVal([]);
        setInternalVal([]);
      }

      if (onClear) {
        onClear();
      }

      if (onChange) {
        onChange(useSimpleValue ? '' : [], {}, {
          selectedPath: []
        });
      }
    }
  }), isNormalMode ? /*#__PURE__*/(0, _react.createElement)(_react.Fragment, null, /*#__PURE__*/(0, _react.createElement)(_breadCrumb.default, {
    className: (0, _classnames.default)(clsPrefix + "-nav", (_classNames = {}, _classNames[clsPrefix + "-nav--wechat"] = _utils.isStrictWechatMiniProgram, _classNames)),
    onClick: function handleBreadCrumbClick(index) {
      if (index === void 0) {
        index = 0;
      }

      setInternalVal(internalValue.slice(0, index));

      if (scrollRef.current) {
        scrollRef.current.scrollTo(0, 0);
      }
    }
  }, /*#__PURE__*/(0, _react.createElement)(_breadCrumb.default.Item, null, rootTipText || locale.rootTipText), (0, _utils.isValidArray)(innerSelectedPath) ? innerSelectedPath.map(function (val) {
    return /*#__PURE__*/(0, _react.createElement)(_breadCrumb.default.Item, {
      key: val.value
    }, val.label);
  }) : null), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-gutter"
  })) : null, !isNormalMode ? function renderPicker() {
    return (0, _utils.isValidArray)(dataSource) ? /*#__PURE__*/(0, _react.createElement)(_picker.default, {
      cascade: true,
      data: dataSource,
      value: internalValue,
      onChange: handlePickerChange
    }) : null;
  }() : /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.ScrollView, {
    showsVerticalScrollIndicator: true,
    showsHorizontalScrollIndicator: false,
    ref: scrollRef,
    className: clsPrefix + "-scrollview"
  }, /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-item-container"
  }, (0, _utils.isValidArray)(internalValue) ? internalValue.map(function (val, index) {
    var list = (0, _tree.getSiblings)(dataSource, val);
    return (0, _utils.isValidArray)(list) ? /*#__PURE__*/(0, _react.createElement)(_list.default, {
      className: clsPrefix + "-list",
      key: val
    }, list.map(function (item) {
      var icon = null;
      var hasArrow = loadData && !item.isLeaf || !loadData && item.children;

      if (loadData && loadingNode === item.value) {
        icon = loadingIcon;
      } else if (loadData && item.value === val || !loadData && item.value === val) {
        icon = selectedIcon;
      }

      return /*#__PURE__*/(0, _react.createElement)(_list.default.Item, {
        key: item.value,
        title: item.label,
        extra: icon,
        arrow: hasArrow && !icon ? 'right' : null,
        disabled: item.disabled,
        onClick: function onClick() {
          return handleListClick(item, index);
        }
      });
    })) : null;
  }) : null, (0, _utils.isValidArray)(nextList) ? /*#__PURE__*/(0, _react.createElement)(_list.default, {
    className: clsPrefix + "-list"
  }, nextList.map(function (item) {
    var icon = null;
    var hasArrow = item.children || loadData && !item.isLeaf;

    if (loadData && item.isLeaf && item.value === loadingNode) {
      icon = loadingIcon;
    }

    return /*#__PURE__*/(0, _react.createElement)(_list.default.Item, {
      key: item.value,
      title: item.label,
      extra: icon,
      arrow: hasArrow && !icon ? 'right' : null,
      disabled: item.disabled,
      onClick: function onClick() {
        return handleListClick(item, internalValue ? internalValue.length : 0);
      }
    });
  })) : null)));
};

CascaderSelect.displayName = 'CascaderSelect';

var _default = /*#__PURE__*/(0, _react.forwardRef)(CascaderSelect);

exports.default = _default;