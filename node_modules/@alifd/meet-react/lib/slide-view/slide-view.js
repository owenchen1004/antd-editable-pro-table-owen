"use strict";

exports.__esModule = true;
exports.default = void 0;

var _babelRuntimeJsxStyleTransform = require("babel-runtime-jsx-style-transform");

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _view = _interopRequireDefault(require("../view"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

var getEndPosition = function (_ref) {
  var translateX = _ref.translateX,
      actualOffset = _ref.actualOffset,
      triggerOffset = _ref.triggerOffset,
      leftCellWidth = _ref.leftCellWidth,
      rightCellWidth = _ref.rightCellWidth;

  if (Math.abs(actualOffset) < triggerOffset) {
    return 0;
  }

  if (actualOffset > 0 && translateX > 0) {
    return leftCellWidth;
  } else if (actualOffset < 0 && translateX < 0) {
    return -rightCellWidth;
  }

  return 0;
};

var SlideView = function (props, ref) {
  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      children = props.children,
      _props$duration = props.duration,
      duration = _props$duration === void 0 ? 500 : _props$duration,
      className = props.className,
      _props$leftActions = props.leftActions,
      leftActions = _props$leftActions === void 0 ? [] : _props$leftActions,
      _props$rightActions = props.rightActions,
      rightActions = _props$rightActions === void 0 ? [] : _props$rightActions,
      _props$triggerOffset = props.triggerOffset,
      triggerOffset = _props$triggerOffset === void 0 ? 50 : _props$triggerOffset,
      _props$uid = props.uid,
      uid = _props$uid === void 0 ? 0 : _props$uid,
      onOpen = props.onOpen,
      onClose = props.onClose,
      others = (0, _tslib.__rest)(props, ["prefix", "children", "duration", "className", "leftActions", "rightActions", "triggerOffset", "uid", "onOpen", "onClose"]);

  var _useState = (0, _react.useState)(0),
      translateX = _useState[0],
      setTranslateX = _useState[1];

  var _useState2 = (0, _react.useState)(false),
      duringTransition = _useState2[0],
      toggleTransition = _useState2[1];

  var startTouchRecord = (0, _react.useRef)(null);
  var prevTouchRecord = (0, _react.useRef)(null);
  var rightWidthRecord = (0, _react.useRef)(0);
  var leftWidthRecord = (0, _react.useRef)(0);
  var openStatusRecored = (0, _react.useRef)(false);
  var clsPrefix = prefix + "slide-view";
  var resetPosition = (0, _react.useCallback)(function () {
    scroll(0);
  }, []);
  var handleTouchStart = (0, _react.useCallback)(function (e) {
    startTouchRecord.current = e.changedTouches[0];
    prevTouchRecord.current = e.changedTouches[0];
  }, []);
  var handleTouchMove = (0, _react.useCallback)(function (e) {
    if (!prevTouchRecord.current) {
      return;
    }

    var currentTouch = getCurrentTouch(Array.from(e.changedTouches));
    var offsetX = currentTouch.pageX - prevTouchRecord.current.pageX;
    var offsetY = currentTouch.pageY - prevTouchRecord.current.pageY;

    if (Math.abs(offsetX) < Math.abs(offsetY)) {
      return;
    }

    if (e.cancelable) {
      e.preventDefault();
    }

    prevTouchRecord.current = currentTouch;
    var nextTranslateX = translateX + offsetX;

    if (nextTranslateX > leftWidthRecord.current || -nextTranslateX > rightWidthRecord.current) {
      return;
    }

    if (openStatusRecored.current === false && prevTouchRecord.current.pageX !== startTouchRecord.current.pageX) {
      var direction = prevTouchRecord.current.pageX > startTouchRecord.current.pageX ? 'left' : 'right';
      openStatusRecored.current = true;

      if ((0, _utils.isFunction)(onOpen)) {
        onOpen(direction);
      }
    }

    setTranslateX(nextTranslateX);
  }, [translateX]);
  var handleTouchEnd = (0, _react.useCallback)(function (e) {
    if (!prevTouchRecord.current) {
      return;
    }

    var endTouch = getCurrentTouch(Array.from(e.changedTouches));
    var actualOffset = endTouch.pageX - startTouchRecord.current.pageX;
    var endPosition = getEndPosition({
      translateX: translateX,
      actualOffset: actualOffset,
      triggerOffset: triggerOffset,
      leftCellWidth: leftWidthRecord.current,
      rightCellWidth: rightWidthRecord.current
    });
    startTouchRecord.current = null;
    prevTouchRecord.current = null;
    scroll(endPosition);

    if (openStatusRecored.current === true && endPosition === 0) {
      openStatusRecored.current = false;

      if ((0, _utils.isFunction)(onClose)) {
        onClose();
      }
    }
  }, [translateX, duringTransition]);
  var scroll = (0, _react.useCallback)(function (pos) {
    toggleTransition(true);
    setTranslateX(pos);
    setTimeout(function () {
      toggleTransition(false);
    }, duration);
  }, [duration]);
  var getCurrentTouch = (0, _react.useCallback)(function (touches) {
    return touches.find(function (_ref2) {
      var identifier = _ref2.identifier;
      return identifier === prevTouchRecord.current.identifier;
    });
  }, []);
  var handleClick = (0, _react.useCallback)(function (cb) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var hideFlag;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              hideFlag = true;

              if (!(cb && typeof cb === 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return cb();

            case 4:
              hideFlag = _context.sent;

            case 5:
              if (!(hideFlag === false)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return");

            case 7:
              resetPosition();

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  }, [duringTransition]);
  (0, _react.useEffect)(function () {
    (function () {
      return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _utils.getWidth)(prefix + "cell-left-" + uid);

              case 2:
                leftWidthRecord.current = _context2.sent;
                _context2.next = 5;
                return (0, _utils.getWidth)(prefix + "cell-right-" + uid);

              case 5:
                rightWidthRecord.current = _context2.sent;

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    })();
  }, [uid, leftActions, rightActions]);
  return /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({}, others, {
    ref: ref,
    className: (0, _classnames.default)(className, "" + clsPrefix)
  }), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-wrapper",
    style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)({
      transform: "translate3d(" + translateX + "px, 0, 0)",
      transitionDuration: duringTransition ? (duration / 1000).toFixed(1) + "s" : '0s'
    })
  }, /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-cell " + clsPrefix + "-cell--left",
    id: prefix + "cell-left-" + uid
  }, leftActions.map(function (item, index) {
    return /*#__PURE__*/(0, _react.createElement)(_view.default, {
      className: clsPrefix + "-button-item",
      onClick: function onClick() {
        return handleClick(item.onClick);
      },
      key: index
    }, item.content);
  })), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-children",
    onClick: resetPosition,
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd
  }, children), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clsPrefix + "-cell " + clsPrefix + "-cell--right",
    id: prefix + "cell-right-" + uid
  }, rightActions.map(function (item, index) {
    return /*#__PURE__*/(0, _react.createElement)(_view.default, {
      className: clsPrefix + "-button-item",
      onClick: function onClick() {
        return handleClick(item.onClick);
      },
      key: index
    }, item.content);
  }))));
};

SlideView.displayName = 'SlideView';

var _default = /*#__PURE__*/(0, _react.forwardRef)(SlideView);

exports.default = _default;