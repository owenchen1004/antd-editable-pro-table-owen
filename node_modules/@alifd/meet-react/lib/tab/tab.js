"use strict";

exports.__esModule = true;
exports.default = exports.TabContext = void 0;

var _babelRuntimeJsxStyleTransform = require("babel-runtime-jsx-style-transform");

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _meetReactComponentOne = require("@alifd/meet-react-component-one");

var _view = _interopRequireDefault(require("../view"));

var _icon = _interopRequireDefault(require("../icon"));

var _picker = _interopRequireDefault(require("../picker"));

var _selectDrawer = require("../select-drawer");

var _item = _interopRequireDefault(require("./item"));

var _locale = require("../locale");

var _zhCn = _interopRequireDefault(require("../locale/lang/zh-cn"));

var _utils = require("../utils");

var _hooks = require("../utils/hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function () { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function (obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

var TabContext = /*#__PURE__*/(0, _react.createContext)({
  activeKey: -1,
  fullWidth: true,
  shape: 'normal',
  activeLineType: 'normal',
  change: function change() {}
});
exports.TabContext = TabContext;

var getTabData = function (props) {
  var dataSource = props.dataSource,
      children = props.children;

  if ((0, _utils.isValidArray)(dataSource)) {
    return dataSource.map(function (item) {
      return Object.assign(Object.assign({}, item), {
        label: item.title,
        value: item.key
      });
    });
  } else if (children) {
    return _react.Children.map(children, function (child) {
      var title = child.props.title;
      var key = child.key;
      return {
        label: title,
        value: key
      };
    });
  } else {
    return [];
  }
};

var getInitActiveKey = function (props) {
  if ('activeKey' in props && props.activeKey) {
    return props.activeKey;
  } else if (props.defaultActiveKey || props.defaultActiveKey === 0) {
    return props.defaultActiveKey;
  } else {
    return undefined;
  }
};

var timerMap = {};

var Tab = function (props, ref) {
  var _classNames, _classNames2, _classNames3;

  var _props$prefix = props.prefix,
      prefix = _props$prefix === void 0 ? 'mt-' : _props$prefix,
      activeKey = props.activeKey,
      _props$defaultActiveK = props.defaultActiveKey,
      defaultActiveKey = _props$defaultActiveK === void 0 ? -1 : _props$defaultActiveK,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      _props$activeLineType = props.activeLineType,
      activeLineType = _props$activeLineType === void 0 ? 'normal' : _props$activeLineType,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'normal' : _props$shape,
      _props$fullWidth = props.fullWidth,
      fullWidth = _props$fullWidth === void 0 ? true : _props$fullWidth,
      renderTool = props.renderTool,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      _props$dataSource = props.dataSource,
      dataSource = _props$dataSource === void 0 ? [] : _props$dataSource,
      className = props.className,
      contentClassName = props.contentClassName,
      contentStyle = props.contentStyle,
      renderTab = props.renderTab,
      children = props.children,
      others = (0, _tslib.__rest)(props, ["prefix", "activeKey", "defaultActiveKey", "size", "activeLineType", "shape", "fullWidth", "renderTool", "onChange", "dataSource", "className", "contentClassName", "contentStyle", "renderTab", "children"]);
  var locale = (0, _locale.useLocale)('Tab', others, _zhCn.default.Tab);

  var _useState = (0, _react.useState)(getInitActiveKey(props)),
      curActiveKey = _useState[0],
      setActiveKey = _useState[1];

  var _useState2 = (0, _react.useState)(false),
      drawerVisible = _useState2[0],
      setDrawerVisible = _useState2[1];

  var _useState3 = (0, _react.useState)(getInitActiveKey(props)),
      internalTabKey = _useState3[0],
      setInternalActiveKey = _useState3[1];

  var curTabScrollId = (0, _hooks.useGuid)('tab-scroll-');
  var curScrollContainerId = (0, _hooks.useGuid)('tab-ctn-');
  var scrollRef = (0, _react.useRef)();
  var activeTabRef = (0, _react.useRef)();
  var isControlled = ('activeKey' in props);

  var _useState4 = (0, _react.useState)(false),
      isOverflow = _useState4[0],
      setOverflow = _useState4[1];

  var isExcessMode = !fullWidth && isOverflow;
  var clsPrefix = prefix + "tab";
  var clses = {
    tab: (0, _classnames.default)([clsPrefix, clsPrefix + "--" + shape, className]),
    divider: (0, _classnames.default)((_classNames = {}, _classNames[clsPrefix + "-divider"] = shape !== 'capsule', _classNames)),
    container: (0, _classnames.default)((_classNames2 = {}, _classNames2[clsPrefix + "-container"] = true, _classNames2[clsPrefix + "-container--" + size] = true, _classNames2[clsPrefix + "-container--wechat"] = _utils.isStrictWechatMiniProgram, _classNames2)),
    scrollContainer: (0, _classnames.default)(clsPrefix + "-scroll-container", clsPrefix + "-scroll-container--" + size, (_classNames3 = {}, _classNames3[clsPrefix + "-scroll-container--fullwidth"] = fullWidth, _classNames3[clsPrefix + "-scroll-container--wechat"] = _utils.isStrictWechatMiniProgram, _classNames3)),
    tool: (0, _classnames.default)(clsPrefix + "-tool", clsPrefix + "-tool--" + size),
    toolIcon: (0, _classnames.default)(clsPrefix + "-tool-icon", clsPrefix + "-tool-icon--" + size),
    drawer: (0, _classnames.default)(clsPrefix + "-drawer"),
    content: (0, _classnames.default)(clsPrefix + "-content", contentClassName)
  };

  var scrollTo = function (offset) {
    if (!timerMap[curTabScrollId]) {
      timerMap[curTabScrollId] = setTimeout(function () {
        if (scrollRef && scrollRef.current && scrollRef.current.scrollTo) {
          scrollRef.current.scrollTo(Object.assign(Object.assign({}, offset), {
            duration: 150
          }));
          timerMap[curTabScrollId] = null;
        }
      }, 200);
    }
  };

  (0, _react.useEffect)(function () {
    if (isControlled && curActiveKey && !props.activeKey) {
      setActiveKey(getInitActiveKey(props));
      return;
    }

    if (isControlled) {
      setActiveKey(props.activeKey);
    }
  });
  (0, _react.useEffect)(function () {
    setTimeout(function () {
      (function () {
        return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var activeTabId, containerWidth, containerOffsetLeft, scrollLeft, activeTabWidth, activeTabOffsetLeft, totalWidth, centerMarkerPos, distance;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  activeTabId = activeTabRef.current && activeTabRef.current.id;
                  _context.next = 3;
                  return (0, _utils.getWidth)(curTabScrollId);

                case 3:
                  containerWidth = _context.sent;
                  _context.next = 6;
                  return (0, _utils.getLeft)(curTabScrollId);

                case 6:
                  containerOffsetLeft = _context.sent;
                  _context.next = 9;
                  return (0, _utils.getScrollLeft)(curTabScrollId);

                case 9:
                  scrollLeft = _context.sent;
                  _context.next = 12;
                  return (0, _utils.getWidth)(activeTabId);

                case 12:
                  activeTabWidth = _context.sent;
                  _context.next = 15;
                  return (0, _utils.getLeft)(activeTabId);

                case 15:
                  _context.t0 = _context.sent;
                  _context.t1 = containerOffsetLeft;
                  activeTabOffsetLeft = _context.t0 - _context.t1;
                  _context.next = 20;
                  return (0, _utils.getWidth)(curScrollContainerId);

                case 20:
                  totalWidth = _context.sent;
                  centerMarkerPos = containerWidth / 2;

                  if (!fullWidth) {
                    setOverflow(totalWidth > containerWidth);
                  }

                  if (scrollRef.current && activeTabRef.current) {
                    distance = Math.floor(Math.max(activeTabOffsetLeft - centerMarkerPos + scrollLeft + activeTabWidth / 2, 0));

                    if (scrollLeft !== distance) {
                      scrollTo({
                        x: distance / _utils.screenPixelRatio,
                        y: 0
                      });
                    }
                  }

                case 24:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
      })();
    }, 50);
  });
  var content;

  if (dataSource && dataSource.length > 0) {
    content = dataSource.map(function (item, index) {
      return /*#__PURE__*/(0, _react.createElement)(_item.default, _extends({
        key: item.key || index,
        itemKey: item.key,
        renderContent: renderTab,
        ref: item.key === curActiveKey ? activeTabRef : null,
        prefix: prefix,
        size: size
      }, item));
    });
  } else {
    content = _react.Children.map(children, function (child, index) {
      return (0, _react.cloneElement)(child, {
        key: "mt_tab_" + index,
        itemKey: child.key || index,
        ref: "" + child.key === "" + curActiveKey ? activeTabRef : null,
        renderContent: child.renderContent || renderTab,
        prefix: prefix,
        size: size
      });
    });
  }

  var handleChange = function handleChange(v) {
    if (!isControlled) {
      setActiveKey(v);
    }

    if ((0, _utils.isFunction)(onChange) && v !== curActiveKey) {
      onChange(v);
    }
  };

  return /*#__PURE__*/(0, _react.createElement)(TabContext.Provider, {
    value: {
      activeKey: curActiveKey,
      change: handleChange,
      shape: shape,
      fullWidth: fullWidth,
      activeLineType: activeLineType
    }
  }, /*#__PURE__*/(0, _react.createElement)(_view.default, null, /*#__PURE__*/(0, _react.createElement)(_view.default, _extends({}, others, {
    className: clses.tab,
    ref: ref
  }), /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.ScrollView, {
    ref: scrollRef,
    id: curTabScrollId,
    className: clses.container,
    contentContainerStyle: {
      flex: props.renderTool ? null : 1
    },
    horizontal: true,
    showsHorizontalScrollIndicator: false
  }, /*#__PURE__*/(0, _react.createElement)(_view.default, {
    id: curScrollContainerId,
    className: clses.scrollContainer
  }, content)), shape !== 'capsule' && /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clses.divider
  }), function getTool() {
    if (!isExcessMode) {
      return null;
    }

    var _children = /*#__PURE__*/(0, _react.createElement)(_react.Fragment, null, /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.Text, null, locale.more), /*#__PURE__*/(0, _react.createElement)(_icon.default, {
      className: clses.toolIcon,
      name: "arrow-down",
      size: "xxs"
    }));

    if ((0, _utils.isFunction)(renderTool)) {
      var renderedToolEl = renderTool();

      if (renderedToolEl) {
        _children = renderedToolEl;
      } else {
        _children = null;
      }
    }

    return _children ? /*#__PURE__*/(0, _react.createElement)(_view.default, {
      className: clses.tool,
      onClick: function onClick() {
        setDrawerVisible(true);
        setInternalActiveKey(curActiveKey);
      }
    }, _children) : null;
  }()), /*#__PURE__*/(0, _react.createElement)(_view.default, {
    className: clses.content,
    style: (0, _babelRuntimeJsxStyleTransform.rpx2vw4style)(contentStyle)
  }, function getChildren(activeTabKey) {
    var ret = null;

    _react.Children.forEach(children, function (child) {
      if (ret) {
        return;
      }

      var _key = child.key;

      if ("" + _key === "" + activeTabKey) {
        ret = child.props.children;
      }
    });

    return ret;
  }(curActiveKey))), isExcessMode ? /*#__PURE__*/(0, _react.createElement)(_selectDrawer.BaseSelectDrawer, {
    visible: drawerVisible,
    onOk: function handleDrawerOk() {
      setDrawerVisible(false);
      handleChange(internalTabKey);
    },
    onCancel: function handleDrawerCancel() {
      setDrawerVisible(false);
      setInternalActiveKey(curActiveKey);
    }
  }, /*#__PURE__*/(0, _react.createElement)(_meetReactComponentOne.ScrollView, {
    className: clses.drawer
  }, /*#__PURE__*/(0, _react.createElement)(_picker.default, {
    cascade: true,
    data: getTabData(props),
    value: [internalTabKey],
    onChange: function onChange(v) {
      if ((0, _utils.isValidArray)(v)) {
        setInternalActiveKey(v[0]);
      }
    }
  }))) : null);
};

Tab.displayName = 'Tab';

var _default = /*#__PURE__*/(0, _react.forwardRef)(Tab);

exports.default = _default;