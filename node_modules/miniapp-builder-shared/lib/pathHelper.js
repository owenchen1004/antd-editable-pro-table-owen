"use strict";

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _require = require('path'),
    join = _require.join,
    relative = _require.relative,
    sep = _require.sep,
    resolve = _require.resolve;

var _require2 = require('fs-extra'),
    existsSync = _require2.existsSync,
    statSync = _require2.statSync,
    readJSONSync = _require2.readJSONSync;

var enhancedResolve = require('enhanced-resolve');

var targetPlatformMap = require('./platformMap');

var extensions = ['.js', '.jsx', '.ts', '.tsx'];

function startsWith(prevString, nextString) {
  return prevString.indexOf(nextString) === 0;
}

function startsWithArr(prevString, nextStringArr) {
  if (nextStringArr === void 0) {
    nextStringArr = [];
  }

  return nextStringArr.some(function (nextString) {
    return startsWith(prevString, nextString);
  });
}

function loadAsFile(module) {
  if (existsSync(module) && statSync(module).isFile()) {
    return module;
  }

  for (var _iterator = _createForOfIteratorHelperLoose(extensions), _step; !(_step = _iterator()).done;) {
    var e = _step.value;

    if (existsSync(module + e) && statSync(module + e).isFile()) {
      return module;
    }
  }
}

function loadAsDirectory(module) {
  if (!existsSync(module)) {
    return;
  }

  var stat = statSync(module);

  if (stat.isDirectory()) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(extensions), _step2; !(_step2 = _iterator2()).done;) {
      var e = _step2.value;
      var indexFile = join(module, "index" + e);

      if (existsSync(indexFile) && statSync(indexFile).isFile()) {
        return join(module, 'index');
      }
    }
  } else if (stat.isFile()) {
    return loadAsFile(module);
  }
}
/**
 * Resolve relative path.
 * @param {string} script
 * @param {string} dependency
 * @return {string}
 */


function relativeModuleResolve(script, dependency) {
  if (startsWithArr(dependency, ['./', '../', '/', '.\\', '..\\', '\\'])) {
    var dependencyPath = join(script, dependency);
    return relative(script, loadAsFile(dependencyPath) || loadAsDirectory(dependencyPath));
  } else throw new Error('The page source path does not meet the requirements');
}

;
/**
 * Use '/' as path sep regardless of OS when outputting the path to code
 * @param {string} filepath
 */

function normalizeOutputFilePath(filepath) {
  return filepath.replace(/\\/g, '/');
}

function getRelativePath(filePath) {
  var relativePath;

  if (filePath[0] === sep) {
    relativePath = "." + filePath;
  } else if (filePath[0] === '.') {
    relativePath = filePath;
  } else {
    relativePath = "." + sep + filePath;
  }

  return relativePath;
}
/**
 * ./pages/foo -> based on src, return original
 * /pages/foo -> based on rootContext
 * pages/foo -> based on src, add prefix: './' or '.\'
 */


function getDepPath(rootDir, source, sourcePath) {
  if (sourcePath === void 0) {
    sourcePath = 'src';
  }

  if (source[0] === sep || source[0] === '.') {
    return join(rootDir, sourcePath, source);
  } else {
    return resolve(rootDir, sourcePath, source);
  }
}
/**
 * Resolve absolute path
 * @param  {...any} files
 */


function absoluteModuleResolve() {
  return enhancedResolve.create.sync({
    extensions: ['.ts', '.js', '.tsx', '.jsx', '.json']
  }).apply(void 0, arguments);
}
/**
 * get more specific files in miniapp
 * @param {string} platform
 * @param {string[]} extensions
 */


function getPlatformExtensions(platform, extensions) {
  if (extensions === void 0) {
    extensions = [];
  }

  return [].concat(platform ? extensions.map(function (ext) {
    return "." + platform + ext;
  }) : [], extensions);
}
/**
 * Judge whether the file is a native page according to the existence of the template file
 * @param {string} filePath
 * @param {string} target
 */


function isNativePage(filePath, target) {
  if (existsSync(filePath + targetPlatformMap[target].extension.xml)) {
    try {
      var jsonContent = readJSONSync(filePath + ".json");
      return !jsonContent.component;
    } catch (e) {} // If json file doesn't exist or not declare component: true, then it's a native page


    return true;
  }

  return false;
}
/**
 * Remove file extension
 * @param {string} filePath
 */


function removeExt(filePath) {
  var lastDot = filePath.lastIndexOf('.');
  return lastDot === -1 ? filePath : filePath.slice(0, lastDot);
}
/**
 * For jsx2mp-runtime and miniapp-render
 * Both of the packages should be dependency of its config package. But if the project has installed it, then it will take the priority.
 * @param {string} packageName
 * @param {string} rootDir
 */


function getHighestPriorityPackageJSON(packageName, rootDir) {
  var targetFile = join(packageName, 'package.json');

  var resolvePaths = require.resolve.paths(targetFile);

  resolvePaths.unshift(join(rootDir, 'node_modules'));

  var packageJSONPath = require.resolve(targetFile, {
    paths: resolvePaths
  });

  return packageJSONPath;
}

module.exports = {
  relativeModuleResolve: relativeModuleResolve,
  normalizeOutputFilePath: normalizeOutputFilePath,
  getRelativePath: getRelativePath,
  getDepPath: getDepPath,
  absoluteModuleResolve: absoluteModuleResolve,
  getPlatformExtensions: getPlatformExtensions,
  isNativePage: isNativePage,
  removeExt: removeExt,
  getHighestPriorityPackageJSON: getHighestPriorityPackageJSON
};