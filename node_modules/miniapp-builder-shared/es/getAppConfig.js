"use strict";

var _require = require('path'),
    join = _require.join,
    resolve = _require.resolve;

var _require2 = require('fs-extra'),
    readJSONSync = _require2.readJSONSync;

var getRouteName = require('./utils/getRouteName');

var _require3 = require('./pathHelper'),
    relativeModuleResolve = _require3.relativeModuleResolve,
    normalizeOutputFilePath = _require3.normalizeOutputFilePath,
    getRelativePath = _require3.getRelativePath;

module.exports = function (rootDir, target, nativeLifeCycleMap) {
  var entryPath = join(rootDir, 'src');
  var appConfig = readJSONSync(resolve(rootDir, 'src', 'app.json'));
  appConfig.pages = [];
  var routes = [];
  var pagesMap = {};

  if (!Array.isArray(appConfig.routes)) {
    throw new Error('routes in app.json must be array');
  }

  function addPage(route) {
    var page = normalizeOutputFilePath(relativeModuleResolve(entryPath, getRelativePath(route.source)));
    appConfig.pages.push(page);
    routes.push(route);
    pagesMap[route.path] = page;

    if (nativeLifeCycleMap) {
      nativeLifeCycleMap[resolve(entryPath, route.source)] = {};
    }
  }

  appConfig.routes.map(function (route) {
    route.name = route.source;
    route.entryName = getRouteName(route, rootDir);

    if (!Array.isArray(route.targets)) {
      addPage(route);
    }

    if (Array.isArray(route.targets) && route.targets.indexOf(target) > -1) {
      addPage(route);
    }
  });

  if (appConfig.tabBar) {
    appConfig.tabBar.items.map(function (tab) {
      tab.path = pagesMap[tab.path];
    });
  }

  appConfig.routes = routes;
  return appConfig;
};