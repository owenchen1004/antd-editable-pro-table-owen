import fmtEvent from './fmtEvent';
var supportKeyboardTypes = ['text', 'number', 'idcard', 'digit'];
var defaultKeyboardType = 'text';
Component({
  data: {
    _previousValue: ''
  },
  properties: {
    className: {
      type: String,
      value: ''
    },
    styleSheet: {
      type: String,
      value: ''
    },
    placeholderColor: {
      type: String,
      value: '#999999'
    },
    multiline: {
      type: Boolean,
      value: false
    },
    autoFocus: {
      type: Boolean,
      value: false
    },
    editable: {
      type: Boolean,
      value: true
    },
    fixed: {
      type: Boolean,
      value: false
    },
    keyboardType: {
      type: String,
      value: defaultKeyboardType
    },
    maxLength: {
      type: Number,
      value: 140
    },
    placeholder: {
      type: String,
      value: ''
    },
    password: {
      type: Boolean,
      value: false
    },
    secureTextEntry: {
      type: Boolean,
      value: false
    },
    value: {
      type: String,
      value: ''
    },
    defaultValue: {
      type: String,
      value: ''
    },
    confirmType: {
      type: String,
      value: ''
    },
    showCount: {
      type: Boolean,
      value: true
    },
    selectionStart: {
      type: Number,
      value: -1
    },
    selectionEnd: {
      type: Boolean,
      value: -1
    }
  },
  options: {
    styleIsolation: 'apply-shared',
    pureDataPattern: /^_/
  },
  observers: {
    'keyboardType': function (value) {
      var keyboardType = this.properties.keyboardType;
      var preKeyboardType = this.getKeyboardType(keyboardType);
      var currentKeyboardType = this.getKeyboardType(value);

      if (preKeyboardType !== currentKeyboardType) {
        this.setData({
          keyboardType: currentKeyboardType
        });
      }
    }
  },
  attached: function attached() {
    var _this$properties = this.properties,
        value = _this$properties.value,
        defaultValue = _this$properties.defaultValue,
        keyboardType = _this$properties.keyboardType;
    var currentKeyboardType = this.getKeyboardType(keyboardType);
    var data = {
      _previousValue: value || defaultValue
    };

    if (currentKeyboardType !== keyboardType) {
      Object.assign(data, {
        keyboardType: currentKeyboardType
      });
    }

    this.setData(data);
  },
  methods: {
    onBlur: function onBlur(e) {
      var event = fmtEvent(this.properties, e);
      this.triggerEvent('onBlur', event);

      if (event.detail.value !== this.data._previousValue) {
        this.triggerEvent('onChange', event);
        this.triggerEvent('onChangeText', event.detail.value);
        this.setData({
          _previousValue: event.detail.value
        });
      }
    },
    onFocus: function onFocus(e) {
      var event = fmtEvent(this.properties, e);
      this.triggerEvent('onFocus', event);
    },
    onConfirm: function onConfirm(e) {
      var event = fmtEvent(this.properties, e);
      this.triggerEvent('onConfirm', event);
    },
    onInput: function onInput(e) {
      var event = fmtEvent(this.properties, e);
      this.triggerEvent('onInput', event);
    },
    getKeyboardType: function getKeyboardType(keyboardType) {
      return supportKeyboardTypes.indexOf(keyboardType) !== -1 ? keyboardType : defaultKeyboardType;
    }
  }
});