import { createCondition as __create_condition__ } from "babel-runtime-jsx-plus";
import { Fragment } from "rax";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { forwardRef, useRef, useImperativeHandle, createElement, useEffect, useMemo } from 'rax';
import { isWeex, isWeb, isNode, isMiniApp } from 'universal-env';
import setNativeProps from 'rax-set-native-props';
import cx from 'classnames/dedupe';
import keyboardTypeMap from './keyboardTypeMap';
import indexStyleSheet from './index.css';
var _styleSheet = indexStyleSheet;

function _getClassName() {
  var className = [];
  var args = arguments[0];
  var type = Object.prototype.toString.call(args).slice(8, -1).toLowerCase();

  if (type === 'string') {
    args = args.trim();
    args && className.push(args);
  } else if (type === 'array') {
    args.forEach(function (cls) {
      cls = _getClassName(cls).trim();
      cls && className.push(cls);
    });
  } else if (type === 'object') {
    for (var k in args) {
      k = k.trim();

      if (k && args.hasOwnProperty(k) && args[k]) {
        className.push(k);
      }
    }
  }

  return className.join(' ').trim();
}

function _getStyle(classNameExpression) {
  var cache = _styleSheet.__cache || (_styleSheet.__cache = {});

  var className = _getClassName(classNameExpression);

  var classNameArr = className.split(/\s+/);
  var style = cache[className];

  if (!style) {
    style = {};

    if (classNameArr.length === 1) {
      style = _styleSheet[classNameArr[0].trim()];
    } else {
      classNameArr.forEach(function (cls) {
        var value = _styleSheet[cls.trim()];

        if (typeof value === 'object') {
          style = Object.assign(style, _styleSheet[cls.trim()]);
        }
      });
    }

    cache[className] = style;
  }

  return style;
}

var inputId = 0;

function getText(event) {
  var text = '';

  if (isWeex) {
    text = event.value;
  } else {
    text = event.target.value;
  }

  return text;
}

function genEventObject(event) {
  var text = getText(event);
  return {
    nativeEvent: {
      text: text
    },
    originalEvent: event,
    value: text,
    target: event.target
  };
}
/**
 * Judge whether the val is truthy or zero value
 * Because number 0 should be recognized as valid input too
 * @param val
 * @returns
 */


function isTruthyOrZero(val) {
  return val === 0 ? true : !!val;
}

var TextInput = forwardRef(function (props, ref) {
  var refEl = useRef(null);
  var styleClassName = "rax-textinput-placeholder-" + inputId++;
  var className = props.className,
      accessibilityLabel = props.accessibilityLabel,
      autoComplete = props.autoComplete,
      editable = props.editable,
      keyboardType = props.keyboardType,
      maxNumberOfLines = props.maxNumberOfLines,
      maxLength = props.maxLength,
      maxlength = props.maxlength,
      multiline = props.multiline,
      numberOfLines = props.numberOfLines,
      confirmType = props.confirmType,
      randomNumber = props.randomNumber,
      _props$showCount = props.showCount,
      showCount = _props$showCount === void 0 ? true : _props$showCount,
      selectionStart = props.selectionStart,
      selectionEnd = props.selectionEnd,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      onChange = props.onChange,
      onChangeText = props.onChangeText,
      _onInput = props.onInput,
      password = props.password,
      secureTextEntry = props.secureTextEntry,
      style = props.style,
      _props$placeholderCol = props.placeholderColor,
      placeholderColor = _props$placeholderCol === void 0 ? '#999999' : _props$placeholderCol,
      propsValue = props.value,
      defaultValue = props.defaultValue,
      controlled = props.controlled;
  var type = password || secureTextEntry ? 'password' : typeof keyboardTypeMap[keyboardType] === 'undefined' ? keyboardType : keyboardTypeMap[keyboardType];
  var value = isTruthyOrZero(propsValue) ? propsValue : '';
  useMemo(function () {
    value = isTruthyOrZero(propsValue) ? propsValue : isTruthyOrZero(defaultValue) ? defaultValue : '';
  }, []); // Check is type supported or not
  // Use isWeb to exclude web-view

  if (isMiniApp && !isWeb) {
    var basicSupportTypes = ['text', 'number', 'idcard', 'digit']; // Other types, like numberpad, we can check it with canIUse

    if (!basicSupportTypes.includes(type) && !my.canIUse("input.type." + type)) {
      // If not support, fallback to text
      type = 'text';
    }
  }

  var setValue = function setValue(value) {
    if (value === void 0) {
      value = '';
    }

    setNativeProps(refEl.current, {
      value: value
    });
  };

  var handleInput = function handleInput(event) {
    _onInput(genEventObject(event));
  };

  var handleChange = function handleChange(event) {
    if (onChange) onChange(genEventObject(event));
    if (onChangeText) onChangeText(getText(event));
  };

  var propsCommon = _extends({}, props, {
    'aria-label': accessibilityLabel,
    autoComplete: autoComplete && 'on',
    maxlength: maxlength || maxLength,
    onChange: (onChange || onChangeText) && handleChange,
    onBlur: onBlur && function handleBlur(event) {
      onBlur(genEventObject(event));
    },
    onFocus: onFocus && function handleFocus(event) {
      onFocus(genEventObject(event));
    }
  }); // Diff with web readonly attr, `disabled` must be boolean value


  var disabled = Boolean(editable !== undefined && !editable);
  var rows = numberOfLines || maxNumberOfLines;
  useImperativeHandle(ref, function () {
    return {
      _nativeNode: refEl.current,
      focus: function focus() {
        refEl.current.focus();
      },
      blur: function blur() {
        refEl.current.blur();
      },
      clear: function clear() {
        setValue('');
      }
    };
  });
  useEffect(function () {
    if (controlled && typeof value !== 'undefined' && value !== null && refEl.current) {
      var currentValue = refEl.current.value;
      var newValue = '' + value;

      if (currentValue !== newValue) {
        refEl.current.value = newValue;
      }
    }
  });
  var cls = cx('rax-textinput', isWeb || isNode ? styleClassName : '', className);

  if (multiline) {
    return createElement(Fragment, null, __create_condition__([[function () {
      return (isWeb || isNode) && placeholderColor;
    }, function () {
      return createElement("style", {
        dangerouslySetInnerHTML: {
          __html: "." + styleClassName + "::placeholder {\n            color: " + placeholderColor + "\n          }"
        }
      });
    }]]), createElement("textarea", _extends({}, propsCommon, {
      ref: refEl,
      className: cls,
      style: Object.assign({}, _getStyle(cls), _extends({}, style, {
        placeholderColor: placeholderColor
      })),
      row: rows,
      rows: rows,
      disabled: disabled,
      onChange: handleChange,
      value: value,
      "confirm-type": confirmType,
      "show-count": showCount,
      onInput: function onInput(e) {
        _onInput && handleInput(e);
      }
    }), !isWeex && (propsCommon.value || defaultValue || '')));
  } else {
    return createElement(Fragment, null, __create_condition__([[function () {
      return (isWeb || isNode) && placeholderColor;
    }, function () {
      return createElement("style", {
        dangerouslySetInnerHTML: {
          __html: "." + styleClassName + "::placeholder {\n            color: " + placeholderColor + "\n          }"
        }
      });
    }]]), createElement("input", _extends({}, propsCommon, {
      ref: refEl,
      className: cls,
      style: Object.assign({}, _getStyle(cls), _extends({}, style, {
        placeholderColor: placeholderColor
      })),
      type: type,
      disabled: disabled,
      value: value,
      "confirm-type": confirmType,
      "random-number": randomNumber,
      "selection-start": selectionStart,
      "selection-end": selectionEnd,
      onInput: function onInput(e) {
        _onInput && handleInput(e);
      }
    })));
  }
});
TextInput.displayName = 'TextInput';
export default TextInput;