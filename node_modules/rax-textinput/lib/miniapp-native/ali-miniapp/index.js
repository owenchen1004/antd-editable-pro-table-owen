"use strict";

var _fmtEvent = _interopRequireDefault(require("./fmtEvent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function noop() {}

var supportKeyboardTypes = ['text', 'number', 'idcard', 'digit', 'numberpad', 'digitpad', 'idcardpad'];
var defaultKeyboardType = 'text';
Component({
  data: {
    previousValue: ''
  },
  props: {
    className: '',
    style: '',
    placeholderColor: '#999999',
    multiline: false,
    autoFocus: false,
    editable: true,
    keyboardType: defaultKeyboardType,
    maxLength: '',
    placeholder: '',
    password: false,
    secureTextEntry: false,
    value: '',
    defaultValue: '',
    enableNative: true,
    confirmType: '',
    showCount: true,
    randomNumber: false,
    selectionStart: -1,
    selectionEnd: -1,
    controlled: false,
    onBlur: noop,
    onFocus: noop,
    onChange: noop,
    onChangeText: noop,
    onInput: noop,
    onConfirm: noop
  },
  didMount: function didMount() {
    var _this$props = this.props,
        value = _this$props.value,
        defaultValue = _this$props.defaultValue,
        keyboardType = _this$props.keyboardType;
    var currentKeyboardType = this.getKeyboardType(keyboardType);
    var data = {
      previousValue: value || defaultValue
    };

    if (currentKeyboardType !== keyboardType) {
      Object.assign(data, {
        keyboardType: currentKeyboardType
      });
    }

    this.setData(data);
  },
  didUpdate: function didUpdate(preProps) {
    var preKeyboardType = this.getKeyboardType(preProps.keyboardType);
    var currentKeyboardType = this.getKeyboardType(this.props.keyboardType);

    if (preKeyboardType !== currentKeyboardType) {
      this.setData({
        keyboardType: currentKeyboardType
      });
    }
  },
  methods: {
    trigger: function trigger(type, value) {
      this.props[type] !== noop && this.props[type](value);
    },
    onBlur: function onBlur(e) {
      var event = (0, _fmtEvent.default)(this.props, e);
      this.trigger('onBlur', event);

      if (event.detail.value !== this.data.previousValue) {
        this.trigger('onChange', event);
        this.trigger('onChangeText', event.detail.value);
        this.setData({
          previousValue: event.detail.value
        });
      }
    },
    onFocus: function onFocus(e) {
      var event = (0, _fmtEvent.default)(this.props, e);
      this.trigger('onFocus', event);
    },
    onConfirm: function onConfirm(e) {
      var event = (0, _fmtEvent.default)(this.props, e);
      this.trigger('onConfirm', event);
    },
    onInput: function onInput(e) {
      var event = (0, _fmtEvent.default)(this.props, e);
      this.trigger('onInput', event);
    },
    getKeyboardType: function getKeyboardType(keyboardType) {
      return supportKeyboardTypes.indexOf(keyboardType) !== -1 ? keyboardType : defaultKeyboardType;
    }
  }
});