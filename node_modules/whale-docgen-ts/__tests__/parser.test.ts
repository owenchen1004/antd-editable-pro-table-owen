import * as path from 'path';
import { parse } from '../src';
import * as fs from 'fs-extra';
import * as docgen from 'react-docgen-typescript';

const resolve = (...args: string[]) =>
  path.resolve(__dirname, 'react', 'data', ...args);
describe('parser', () => {
  fs.readdirSync(resolve()).forEach((vo) => {
    it(`parse ${vo}`, () => {
      const content = parse(resolve(vo));
      expect(content).toMatchSnapshot();
    });
  });

  it('isStateLessComponent', () => {
    const content = parse(resolve('StatelessComponent.tsx'));

    docgen.parse(resolve('StatelessComponent.tsx'));
    expect(content.map((vo) => vo.displayName)).toEqual([
      'SelectF',
      'Select',
      'SelectMemo',
      'SelectForwardRef',
      'Select2',
      'fnG',
      'fnH',
    ]);
  });

  it('react-docgen-typescript StatelessComponent', () => {
    const content = docgen.parse(resolve('StatelessComponent.tsx'));

    expect(content.map((vo) => vo.displayName)).toEqual([
      'SelectF',
      'Select',
      'SelectMemo',
      'SelectForwardRef',
      'Select2',
      'fnA',
      'fnB',
      'fnC',
      'fnD',
      'fnE',
      'fnF',
      'fnG',
      'fnH',
    ]);
  });

  it('should only export Component', () => {
    const content = parse(resolve('OtherExport.tsx'));

    expect(content.map((vo) => vo.displayName)).toEqual([
      'Select',
      'Class2.Select',
    ]);
  });

  it('react-docgen-typescript OtherExport', () => {
    const content = docgen.parse(resolve('OtherExport.tsx'));

    expect(content.map((vo) => vo.displayName)).toEqual([
      'Select',
      'a',
      'b',
      'c',
      'd',
      'Class1',
      'Class2',
      'Class2.Select',
    ]);
  });

  it('type level', () => {
    expect(parse(resolve('TypeLevel.tsx'), { typeLevel: 0 })).toMatchObject([
      {
        props: {
          union: {
            type: {
              name: 'union',
            },
          },
          s0: {
            type: {
              name: 'plain',
            },
          },
        },
      },
    ]);
    expect(parse(resolve('TypeLevel.tsx'), { typeLevel: 1 })).toMatchObject([
      {
        props: {
          s0: {
            type: {
              name: 'object',
              value: {
                s1: {
                  type: {
                    name: 'plain',
                  },
                },
              },
            },
          },
        },
      },
    ]);
    expect(parse(resolve('TypeLevel.tsx'), { typeLevel: 4 })).toMatchObject([
      {
        props: {
          s0: {
            type: {
              name: 'object',
              value: {
                s1: {
                  type: {
                    name: 'object',
                    value: {
                      s2: {
                        type: {
                          name: 'object',
                          value: {
                            s3: {
                              type: {
                                name: 'object',
                                value: {
                                  s4: {
                                    type: {
                                      name: 'plain',
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    ]);
  });
});
