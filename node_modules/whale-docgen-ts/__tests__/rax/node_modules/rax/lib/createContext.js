"use strict";

exports.__esModule = true;
exports.default = createContext;

var _invokeFunctionsWithContext = _interopRequireDefault(require("./invokeFunctionsWithContext"));

var _hooks = require("./hooks");

var _types = require("./types");

var _toArray = _interopRequireDefault(require("./toArray"));

var _getNearestParent = _interopRequireDefault(require("./vdom/getNearestParent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var id = 0;

function createContext(defaultValue) {
  var contextID = '_c' + id++; // Provider Component

  var Provider = /*#__PURE__*/function () {
    function Provider() {
      this.__contextID = contextID;
      this.__handlers = [];
    }

    var _proto = Provider.prototype;

    _proto.__on = function __on(handler) {
      this.__handlers.push(handler);
    };

    _proto.__off = function __off(handler) {
      this.__handlers = this.__handlers.filter(function (h) {
        return h !== handler;
      });
    } // Like getChildContext but called in SSR
    ;

    _proto._getChildContext = function _getChildContext() {
      var _ref;

      return _ref = {}, _ref[contextID] = this, _ref;
    } // `getValue()` called in rax-server-renderer
    ;

    _proto.getValue = function getValue() {
      return this.props.value !== undefined ? this.props.value : defaultValue;
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (this.props.value !== prevProps.value) {
        (0, _invokeFunctionsWithContext.default)(this.__handlers, null, this.getValue());
      }
    };

    _proto.render = function render() {
      return this.props.children;
    };

    return Provider;
  }();

  function getNearestParentProvider(instance) {
    return (0, _getNearestParent.default)(instance, function (parent) {
      return parent.__contextID === contextID;
    });
  } // Consumer Component


  function Consumer(props, context) {
    var _this = this;

    // Current `context[contextID]` only works in SSR
    var _useState = (0, _hooks.useState)(function () {
      return context[contextID] || getNearestParentProvider(_this);
    }),
        provider = _useState[0];

    var value = provider ? provider.getValue() : defaultValue;

    var _useState2 = (0, _hooks.useState)(value),
        prevValue = _useState2[0],
        setValue = _useState2[1];

    if (value !== prevValue) {
      setValue(value);
      return; // Interrupt execution of consumer.
    }

    (0, _hooks.useLayoutEffect)(function () {
      if (provider) {
        provider.__on(setValue);

        return function () {
          provider.__off(setValue);
        };
      }
    }, []); // Consumer requires a function as a child.
    // The function receives the current context value.

    var consumer = (0, _toArray.default)(props.children)[0];

    if ((0, _types.isFunction)(consumer)) {
      return consumer(value);
    }
  }

  return {
    Provider: Provider,
    Consumer: Consumer,
    // `_contextID` and `_defaultValue` accessed in rax-server-renderer
    _contextID: contextID,
    _defaultValue: defaultValue,
    __getNearestParentProvider: getNearestParentProvider
  };
}