"use strict";

exports.__esModule = true;
exports.default = createElement;

var _host = _interopRequireDefault(require("./vdom/host"));

var _element = _interopRequireDefault(require("./vdom/element"));

var _flattenChildren = _interopRequireDefault(require("./vdom/flattenChildren"));

var _error = require("./error");

var _types = require("./types");

var _validateChildKeys = _interopRequireDefault(require("./validateChildKeys"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RESERVED_PROPS = {
  key: true,
  ref: true
};

function createElement(type, config, children) {
  // Reserved names are extracted
  var props = {};
  var propName;
  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key; // Remaining properties are added to a new props object

    for (propName in config) {
      if (!RESERVED_PROPS[propName]) {
        props[propName] = config[propName];
      }
    }
  } // Children arguments can be more than one


  var childrenLength = arguments.length - 2;

  if (childrenLength > 0) {
    if (childrenLength === 1 && !(0, _types.isArray)(children)) {
      props.children = children;
    } else {
      var childArray = children;

      if (childrenLength > 1) {
        childArray = new Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
      }

      props.children = (0, _flattenChildren.default)(childArray);
    }
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  if (type == null) {
    if (process.env.NODE_ENV !== 'production') {
      (0, _error.throwError)("Invalid element type, expected a string or a class/function component but got \"" + type + "\".");
    } else {
      // A empty component replaced avoid break render in production
      type = _types.NOOP;
      (0, _error.throwMinifiedWarn)(0);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    if ((0, _types.isString)(ref) && !_host.default.owner) {
      (0, _error.warning)("Adding a string ref \"" + ref + "\" that was not created inside render method, or multiple copies of Rax are used.");
    }

    for (var _i = 2; _i < arguments.length; _i++) {
      (0, _validateChildKeys.default)(arguments[_i], type);
    }
  }

  return new _element.default(type, key, ref, props, _host.default.owner);
}