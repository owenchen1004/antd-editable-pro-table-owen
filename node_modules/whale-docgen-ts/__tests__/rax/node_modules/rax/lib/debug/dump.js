"use strict";

exports.__esModule = true;
exports.default = void 0;

var _host = _interopRequireDefault(require("../vdom/host"));

var _getComponentTree = _interopRequireDefault(require("./getComponentTree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var INDENTATION_SIZE = 2;
var MAX_DEPTH = 2;
var MAX_STRING_LENGTH = 50;
/**
 * Dump all Native root views and their content. This function tries
 * it best to get the content but ultimately relies on implementation details
 * of  and will fail in future versions.
 */

function dumpTree() {
  try {
    return getDumpTree();
  } catch (e) {
    return 'Failed to dump tree: ' + e;
  }
}

function getDumpTree() {
  var output = '';
  var rootIds = Object.getOwnPropertyNames(_host.default.rootComponents);

  for (var _iterator = _createForOfIteratorHelperLoose(rootIds), _step; !(_step = _iterator()).done;) {
    var rootId = _step.value;
    var inst = _host.default.rootInstances[rootId];
    output += "============ Root ID: " + rootId + " ============\n";
    output += dumpNode(inst.getRenderedComponent(), 0);
    output += "============ End root ID: " + rootId + " ============\n";
  }

  return output;
}

function dumpNode(node, identation) {
  var data = (0, _getComponentTree.default)(node);

  if (data.nodeType === 'Text') {
    return indent(identation) + data.text + '\n';
  } else if (data.nodeType === 'Empty') {
    return '';
  }

  var output = indent(identation) + ("<" + data.name);

  if (data.nodeType === 'Composite') {
    for (var _iterator2 = _createForOfIteratorHelperLoose(Object.getOwnPropertyNames(data.props || {})), _step2; !(_step2 = _iterator2()).done;) {
      var propName = _step2.value;

      if (isNormalProp(propName)) {
        try {
          var value = convertValue(data.props[propName]);

          if (value) {
            output += " " + propName + "=" + value;
          }
        } catch (e) {
          var message = "[Failed to get property: " + e + "]";
          output += " " + propName + "=" + message;
        }
      }
    }
  }

  var childOutput = '';

  for (var _iterator3 = _createForOfIteratorHelperLoose(data.children || []), _step3; !(_step3 = _iterator3()).done;) {
    var child = _step3.value;
    childOutput += dumpNode(child, identation + 1);
  }

  if (childOutput) {
    output += '>\n' + childOutput + indent(identation) + ("</" + data.name + ">\n");
  } else {
    output += ' />\n';
  }

  return output;
}

function isNormalProp(name) {
  switch (name) {
    case 'children':
    case 'key':
    case 'ref':
      return false;

    default:
      return true;
  }
}

function convertObject(object, depth) {
  if (depth >= MAX_DEPTH) {
    return '[...omitted]';
  }

  var output = '{';
  var first = true;

  for (var _iterator4 = _createForOfIteratorHelperLoose(Object.getOwnPropertyNames(object)), _step4; !(_step4 = _iterator4()).done;) {
    var key = _step4.value;

    if (!first) {
      output += ', ';
    } // $FlowFixMe(>=0.28.0)


    output += key + ": " + convertValue(object[key], depth + 1);
    first = false;
  }

  return output + '}';
}

function convertValue(value, depth) {
  if (depth === void 0) {
    depth = 0;
  }

  if (!value) {
    return null;
  }

  switch (typeof value) {
    case 'string':
      return JSON.stringify(possiblyEllipsis(value).replace('\n', '\\n'));

    case 'boolean':
    case 'number':
      return JSON.stringify(value);

    case 'function':
      return '[function]';

    case 'object':
      return convertObject(value, depth);

    default:
      return null;
  }
}

function possiblyEllipsis(value) {
  if (value.length > MAX_STRING_LENGTH) {
    return value.slice(0, MAX_STRING_LENGTH) + '...';
  } else {
    return value;
  }
}

function indent(size) {
  return ' '.repeat(size * INDENTATION_SIZE);
}

var _default = dumpTree;
exports.default = _default;