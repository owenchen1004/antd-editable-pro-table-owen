"use strict";

exports.__esModule = true;
exports.updateRef = updateRef;
exports.attachRef = attachRef;
exports.detachRef = detachRef;

var _types = require("../types");

var _constant = require("../constant");

var _error = require("../error");

/*
 * Ref manager
 */
function updateRef(prevElement, nextElement, component) {
  var prevRef = prevElement ? prevElement.ref : null;
  var nextRef = nextElement ? nextElement.ref : null; // Update refs in owner component

  if (prevRef !== nextRef) {
    // Detach prev RenderedElement's ref
    prevRef && detachRef(prevElement._owner, prevRef, component); // Attach next RenderedElement's ref

    nextRef && attachRef(nextElement._owner, nextRef, component);
  }
}

function attachRef(ownerComponent, ref, component) {
  if (!ownerComponent) {
    if (process.env.NODE_ENV !== 'production') {
      (0, _error.warning)('Ref can not attach because multiple copies of Rax are used.');
    } else {
      (0, _error.throwMinifiedWarn)(3);
    }

    return;
  }

  var instance = component.__getPublicInstance();

  if (process.env.NODE_ENV !== 'production') {
    if (instance == null) {
      (0, _error.warning)('Do not attach ref to function component because they donâ€™t have instances.');
    }
  }

  if ((0, _types.isFunction)(ref)) {
    ref(instance);
  } else if ((0, _types.isObject)(ref)) {
    ref.current = instance;
  } else {
    ownerComponent[_constant.INSTANCE].refs[ref] = instance;
  }
}

function detachRef(ownerComponent, ref, component) {
  if ((0, _types.isFunction)(ref)) {
    // When the referenced component is unmounted and whenever the ref changes, the old ref will be called with null as an argument.
    ref(null);
  } else {
    // Must match component and ref could detach the ref on owner when A's before ref is B's current ref
    var instance = component.__getPublicInstance();

    if ((0, _types.isObject)(ref) && ref.current === instance) {
      ref.current = null;
    } else if (ownerComponent[_constant.INSTANCE].refs[ref] === instance) {
      delete ownerComponent[_constant.INSTANCE].refs[ref];
    }
  }
}