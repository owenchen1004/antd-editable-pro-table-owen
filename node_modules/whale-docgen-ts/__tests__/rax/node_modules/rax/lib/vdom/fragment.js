"use strict";

exports.__esModule = true;
exports.default = void 0;

var _host = _interopRequireDefault(require("./host"));

var _native = _interopRequireDefault(require("./native"));

var _toArray = _interopRequireDefault(require("../toArray"));

var _constant = require("../constant");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * Fragment Component
 */
var FragmentComponent = /*#__PURE__*/function (_NativeComponent) {
  _inheritsLoose(FragmentComponent, _NativeComponent);

  function FragmentComponent() {
    return _NativeComponent.apply(this, arguments) || this;
  }

  var _proto = FragmentComponent.prototype;

  _proto.__mountComponent = function __mountComponent(parent, parentInstance, context, nativeNodeMounter) {
    this.__initComponent(parent, parentInstance, context);

    var instance = this[_constant.INSTANCE] = {};
    instance[_constant.INTERNAL] = this;
    var fragment = [];

    this.__mountChildrenImpl(this._parent, this.__currentElement, context, function (nativeNode) {
      nativeNode = (0, _toArray.default)(nativeNode);

      for (var i = 0; i < nativeNode.length; i++) {
        fragment.push(nativeNode[i]);
      }
    });

    if (nativeNodeMounter) {
      nativeNodeMounter(fragment, parent);
    } else {
      for (var i = 0; i < fragment.length; i++) {
        _host.default.driver.appendChild(fragment[i], parent);
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      this.__currentElement.type = FragmentComponent;

      _host.default.reconciler.mountComponent(this);
    }

    return instance;
  };

  _proto.unmountComponent = function unmountComponent(shouldNotRemoveChild) {
    if (!shouldNotRemoveChild) {
      var nativeNode = this.__getNativeNode();

      for (var i = 0, l = nativeNode.length; i < l; i++) {
        _host.default.driver.removeChild(nativeNode[i]);
      }
    } // Do not need remove child when their parent is removed


    this.__unmountChildren(true);

    this.__destoryComponent();
  };

  _proto.__updateComponent = function __updateComponent(prevElement, nextElement, prevContext, nextContext) {
    // Replace current element
    this.__currentElement = nextElement;

    this.__updateChildren(this.__currentElement, nextContext);

    if (process.env.NODE_ENV !== 'production') {
      this.__currentElement.type = FragmentComponent;

      _host.default.reconciler.receiveComponent(this);
    }
  };

  _proto.__getNativeNode = function __getNativeNode() {
    var renderedChildren = this.__renderedChildren || {};
    return [].concat.apply([], Object.keys(renderedChildren).map(function (key) {
      return renderedChildren[key].__getNativeNode();
    }));
  };

  return FragmentComponent;
}(_native.default);

if (process.env.NODE_ENV !== 'production') {
  FragmentComponent.displayName = 'Fragment';
}

var _default = FragmentComponent;
exports.default = _default;