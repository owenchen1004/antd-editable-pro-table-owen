"use strict";

exports.__esModule = true;
exports.default = void 0;

var _host = _interopRequireDefault(require("./host"));

var _createElement = _interopRequireDefault(require("../createElement"));

var _instantiateComponent = _interopRequireDefault(require("./instantiateComponent"));

var _root = _interopRequireDefault(require("./root"));

var _constant = require("../constant");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Instance manager
 * @NOTE Key should not be compressed, for that will be added to native node and cause DOM Exception.
 */
var KEY = '_r';
var _default = {
  set: function set(node, instance) {
    if (!node[KEY]) {
      node[KEY] = instance; // Record root instance to roots map

      if (instance.__rootID) {
        _host.default.rootInstances[instance.__rootID] = instance;
        _host.default.rootComponents[instance.__rootID] = instance[_constant.INTERNAL];
      }
    }
  },
  get: function get(node) {
    return node[KEY];
  },
  remove: function remove(node) {
    var instance = this.get(node);

    if (instance) {
      node[KEY] = null;

      if (instance.__rootID) {
        delete _host.default.rootComponents[instance.__rootID];
        delete _host.default.rootInstances[instance.__rootID];
      }
    }
  },
  mount: function mount(element, container, _ref) {
    var parent = _ref.parent,
        hydrate = _ref.hydrate;

    if (process.env.NODE_ENV !== 'production') {
      _host.default.measurer && _host.default.measurer.beforeRender();
    }

    var driver = _host.default.driver; // Real native root node is body

    if (container == null) {
      container = driver.createBody();
    }

    var renderOptions = {
      element: element,
      container: container,
      hydrate: hydrate
    }; // Before render callback

    driver.beforeRender && driver.beforeRender(renderOptions); // Get the context from the conceptual parent component.

    var parentContext;

    if (parent) {
      var parentInternal = parent[_constant.INTERNAL];
      parentContext = parentInternal.__processChildContext(parentInternal._context);
    } // Update root component


    var prevRootInstance = this.get(container);

    if (prevRootInstance && prevRootInstance.__rootID) {
      if (parentContext) {
        // Using __penddingContext to pass new context
        prevRootInstance[_constant.INTERNAL].__penddingContext = parentContext;
      }

      prevRootInstance.__update(element); // After render callback


      driver.afterRender && driver.afterRender(renderOptions);
      return prevRootInstance;
    } // Init root component with empty children


    var renderedComponent = (0, _instantiateComponent.default)((0, _createElement.default)(_root.default));
    var defaultContext = parentContext || {};

    var rootInstance = renderedComponent.__mountComponent(container, parent, defaultContext);

    this.set(container, rootInstance); // Mount new element through update queue avoid when there is in rendering phase

    rootInstance.__update(element); // After render callback


    driver.afterRender && driver.afterRender(renderOptions);

    if (process.env.NODE_ENV !== 'production') {
      // Devtool render new root hook
      _host.default.reconciler.renderNewRootComponent(rootInstance[_constant.INTERNAL][_constant.RENDERED_COMPONENT]);

      _host.default.measurer && _host.default.measurer.afterRender();
    }

    return rootInstance;
  }
};
exports.default = _default;