"use strict";

exports.__esModule = true;
exports.default = void 0;

var _host = _interopRequireDefault(require("./host"));

var _constant = require("../constant");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Base Component
 */
var BaseComponent = /*#__PURE__*/function () {
  function BaseComponent(element) {
    this.__currentElement = element;
  }

  var _proto = BaseComponent.prototype;

  _proto.__initComponent = function __initComponent(parent, parentInstance, context) {
    this._parent = parent;
    this.__parentInstance = parentInstance;
    this._context = context;
    this._mountID = _host.default.__mountID++;
  };

  _proto.__destoryComponent = function __destoryComponent() {
    if (process.env.NODE_ENV !== 'production') {
      _host.default.reconciler.unmountComponent(this);
    }

    this.__currentElement = this[_constant.NATIVE_NODE] = this._parent = this.__parentInstance = this._context = null;

    if (this[_constant.INSTANCE]) {
      this[_constant.INSTANCE] = this[_constant.INSTANCE][_constant.INTERNAL] = null;
    }
  };

  _proto.__mountComponent = function __mountComponent(parent, parentInstance, context, nativeNodeMounter) {
    this.__initComponent(parent, parentInstance, context);

    this.__mountNativeNode(nativeNodeMounter);

    if (process.env.NODE_ENV !== 'production') {
      _host.default.reconciler.mountComponent(this);
    }

    var instance = {};
    instance[_constant.INTERNAL] = this;
    return instance;
  };

  _proto.unmountComponent = function unmountComponent(shouldNotRemoveChild) {
    if (this[_constant.NATIVE_NODE] && !shouldNotRemoveChild) {
      _host.default.driver.removeChild(this[_constant.NATIVE_NODE], this._parent);
    }

    this.__destoryComponent();
  };

  _proto.__getName = function __getName() {
    var currentElement = this.__currentElement;
    var type = currentElement && currentElement.type;
    return type && type.displayName || type && type.name || type || // Native component's name is type
    currentElement;
  };

  _proto.__mountNativeNode = function __mountNativeNode(nativeNodeMounter) {
    var nativeNode = this.__getNativeNode();

    var parent = this._parent;

    if (nativeNodeMounter) {
      nativeNodeMounter(nativeNode, parent);
    } else {
      _host.default.driver.appendChild(nativeNode, parent);
    }
  };

  _proto.__getNativeNode = function __getNativeNode() {
    return this[_constant.NATIVE_NODE] == null ? this[_constant.NATIVE_NODE] = this.__createNativeNode() : this[_constant.NATIVE_NODE];
  };

  _proto.__getPublicInstance = function __getPublicInstance() {
    return this.__getNativeNode();
  };

  return BaseComponent;
}();

exports.default = BaseComponent;