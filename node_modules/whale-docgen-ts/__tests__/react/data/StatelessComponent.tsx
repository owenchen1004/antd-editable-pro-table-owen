import * as React from 'react';

interface Props {
  a: string;
}

interface SelectFC<A> extends React.FC<Props> {
  s?: string | A;
}
export const SelectF: SelectFC<number> = () => <div />;

export const Select: React.FC<Props> = () => <div />;
export const SelectMemo = React.memo(Select);
export const SelectForwardRef = React.forwardRef(() => <div />);
export class Select2 extends React.Component<Props> {
  static fooMethod() {}

  render() {
    return <div />;
  }
}

/** 不应该导出 */
export const fnA = () => {};

/** 不应该导出 */
export const fnB = (props: string) => {
  console.log(props);
};
/** 不应该导出 */
export const fnC = (props: Props) => {
  console.log(props.a);
};
/** 不应该导出 */
export const fnD = () => {
  return <div />;
};
/** 不应该导出 */
export const fnE = (props: string) => {
  console.log(props);
  return <div />;
};
/** 不应该导出 */
export const fnF = (props: string[]) => {
  console.log(props);
  return <div />;
};

export const fnG = (a: Props) => {
  console.log(a);
  return <div />;
};
export const fnH = (props: Props) => {
  console.log(props.a);
  return <div />;
};
