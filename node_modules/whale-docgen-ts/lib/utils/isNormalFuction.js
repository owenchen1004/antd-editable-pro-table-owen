"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNormalFuction = void 0;
const TypeParser_1 = require("../TypeParser");
const flags_1 = require("./flags");
/**
 * 判断是否是普通函数
 */
const isNormalFuction = (checker, symbol) => {
    const type = checker.getTypeOfSymbolAtLocation(symbol, TypeParser_1.getValueDeclaration(symbol));
    const callSignatures = type.getCallSignatures();
    // 不是函数
    if (callSignatures.length === 0) {
        return false;
    }
    // 所有的方法签名都不是组件
    return !callSignatures.some((sig) => {
        var _a;
        // 以下判断是否stateless Component
        // 返回值必须为ReactElement RaxElemet
        const returnSymbolName = (_a = sig.getReturnType().symbol) === null || _a === void 0 ? void 0 : _a.getName();
        if (!['Element', 'ReactElement', 'RaxElement'].includes(returnSymbolName)) {
            return false;
        }
        const params = sig.getParameters();
        // 没有参数
        if (params.length === 0) {
            return false;
        }
        const propsParam = params[0];
        // 第一个参数为名字为props 或只有一个参数
        if (propsParam.name === 'props' || params.length === 1) {
            const propsParamType = checker.getTypeOfSymbolAtLocation(propsParam, TypeParser_1.getValueDeclaration(propsParam));
            // 第一个参数必须为对象类型
            return (propsParamType.isClassOrInterface() ||
                propsParamType.isUnionOrIntersection() ||
                (flags_1.isObjectType(propsParamType) &&
                    propsParamType.getSymbol().name !== 'Array'));
        }
        return false;
    });
};
exports.isNormalFuction = isNormalFuction;
//# sourceMappingURL=isNormalFuction.js.map