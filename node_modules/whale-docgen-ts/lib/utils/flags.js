"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFunctionType = exports.isTupleType = exports.typeHasObjectFlag = exports.isObjectType = exports.typeHasFlag = exports.isOptionalSymbol = exports.symbolHasFlag = void 0;
const ts = require("typescript");
const symbolHasFlag = (symbol, flag) => 
// eslint-disable-next-line no-bitwise
(symbol.getFlags() & flag) === flag;
exports.symbolHasFlag = symbolHasFlag;
const isOptionalSymbol = (symbol) => exports.symbolHasFlag(symbol, ts.SymbolFlags.Optional);
exports.isOptionalSymbol = isOptionalSymbol;
const typeHasFlag = (type, flag) => 
// eslint-disable-next-line no-bitwise
(type.getFlags() & flag) === flag;
exports.typeHasFlag = typeHasFlag;
const isObjectType = (type) => exports.typeHasFlag(type, ts.TypeFlags.Object);
exports.isObjectType = isObjectType;
const typeHasObjectFlag = (type, flag) => 
// eslint-disable-next-line no-bitwise
exports.isObjectType(type) && (type.objectFlags & flag) === flag;
exports.typeHasObjectFlag = typeHasObjectFlag;
/**
 * Checks whether a type is a tuple type.
 */
function isTupleType(type) {
    if (exports.typeHasObjectFlag(type, ts.ObjectFlags.Tuple)) {
        return true;
    }
    if (exports.typeHasObjectFlag(type, ts.ObjectFlags.Reference)) {
        const symbol = type.getSymbol();
        return !symbol || symbol.escapedName === 'Array';
    }
    return false;
}
exports.isTupleType = isTupleType;
const isFunctionType = (type) => {
    const callSignatures = type.getCallSignatures();
    // 不是函数
    return callSignatures.length > 0;
};
exports.isFunctionType = isFunctionType;
//# sourceMappingURL=flags.js.map