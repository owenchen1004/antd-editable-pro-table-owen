"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFullJsDocComment = exports.findDocComment = exports.formatTagText = void 0;
const ts = require("typescript");
const formatTagText = (tag) => {
    if (typeof tag.text === 'string') {
        return tag.text;
    }
    return ts.displayPartsToString(tag.text);
};
exports.formatTagText = formatTagText;
const findDocComment = (checker, symbol) => {
    const comment = exports.getFullJsDocComment(checker, symbol);
    if (comment.fullComment || comment.tags.default) {
        return comment;
    }
    const rootSymbols = checker.getRootSymbols(symbol);
    const commentsOnRootSymbols = rootSymbols
        .filter((x) => x !== symbol)
        .map((x) => exports.getFullJsDocComment(checker, x))
        .filter((x) => !!x.fullComment || !!comment.tags.default);
    if (commentsOnRootSymbols.length) {
        return commentsOnRootSymbols[0];
    }
    return defaultJSDoc;
};
exports.findDocComment = findDocComment;
/**
 * Extracts a full JsDoc comment from a symbol, even
 * though TypeScript has broken down the JsDoc comment into plain
 * text and JsDoc tags.
 */
const getFullJsDocComment = (checker, symbol) => {
    // in some cases this can be undefined (Pick<Type, 'prop1'|'prop2'>)
    if (symbol.getDocumentationComment === undefined) {
        return defaultJSDoc;
    }
    let mainComment = ts.displayPartsToString(symbol.getDocumentationComment(checker));
    if (mainComment) {
        mainComment = mainComment.replace('\r\n', '\n');
    }
    const tags = symbol.getJsDocTags() || [];
    const tagComments = [];
    const tagMap = {};
    tags.forEach((tag) => {
        const trimmedText = exports.formatTagText(tag).trim();
        const currentValue = tagMap[tag.name];
        tagMap[tag.name] = currentValue
            ? `${currentValue}\n${trimmedText}`
            : trimmedText;
        if (['default', 'type'].indexOf(tag.name) < 0) {
            tagComments.push(formatTag(tag));
        }
    });
    return {
        description: mainComment,
        fullComment: `${mainComment}\n${tagComments.join('\n')}`.trim(),
        tags: tagMap,
    };
};
exports.getFullJsDocComment = getFullJsDocComment;
function formatTag(tag) {
    let result = `@${tag.name}`;
    if (tag.text) {
        result += ` ${exports.formatTagText(tag)}`;
    }
    return result;
}
const defaultJSDoc = {
    description: '',
    fullComment: '',
    tags: {},
};
//# sourceMappingURL=findDocComment.js.map