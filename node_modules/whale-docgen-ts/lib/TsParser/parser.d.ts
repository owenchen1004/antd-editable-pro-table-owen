import * as ts from 'typescript';
import { ParserOptions, ComponentDoc, ComponentNameResolver, Method, MethodParameter } from './types';
export declare class Parser {
    private checker;
    private propFilter;
    private savePropValueAsString;
    constructor(program: ts.Program, opts: ParserOptions);
    getPropsInfo(propsObj: ts.Symbol, defaultProps?: Record<string, string>): {};
    getComponentInfo(exp: ts.Symbol, source: ts.SourceFile, componentNameResolver?: ComponentNameResolver): ComponentDoc | null;
    extractPropsFromTypeIfStatelessComponent(type: ts.Type): ts.Symbol | null;
    extractPropsFromTypeIfStatefulComponent(type: ts.Type): ts.Symbol | null;
    extractMembersFromType(type: ts.Type): ts.Symbol[];
    getMethodsInfo(type: ts.Type): Method[];
    getModifiers(member: ts.Symbol): string[];
    getParameterInfo(callSignature: ts.Signature): MethodParameter[];
    getCallSignature(symbol: ts.Symbol): ts.Signature;
    isTaggedPublic(symbol: ts.Symbol): boolean;
    getReturnDescription(symbol: ts.Symbol): string | null;
    getFunctionStatement(statement: ts.Statement): ts.ArrowFunction | ts.FunctionExpression | ts.FunctionDeclaration;
    extractDefaultPropsFromComponent(symbol: ts.Symbol, source: ts.SourceFile): {};
    getLiteralValueFromPropertyAssignment(property: ts.PropertyAssignment | ts.BindingElement): string | boolean | number | null | undefined;
    getPropMap(properties: ts.NodeArray<ts.PropertyAssignment | ts.BindingElement>): Record<string, string | boolean | number | null>;
    private getComponentFromExpression;
}
export declare function getDefaultExportForFile(source: ts.SourceFile): string;
