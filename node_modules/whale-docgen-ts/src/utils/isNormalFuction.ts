import * as ts from 'typescript';
import { getValueDeclaration } from '../TypeParser';
import { isObjectType } from './flags';

/**
 * 判断是否是普通函数
 */
export const isNormalFuction = (checker: ts.TypeChecker, symbol: ts.Symbol) => {
  const type = checker.getTypeOfSymbolAtLocation(
    symbol,
    getValueDeclaration(symbol)
  );
  const callSignatures = type.getCallSignatures();
  // 不是函数
  if (callSignatures.length === 0) {
    return false;
  }
  // 所有的方法签名都不是组件
  return !callSignatures.some((sig) => {
    // 以下判断是否stateless Component
    // 返回值必须为ReactElement RaxElemet
    const returnSymbolName = sig.getReturnType().symbol?.getName();

    if (!['Element', 'ReactElement', 'RaxElement'].includes(returnSymbolName)) {
      return false;
    }
    const params = sig.getParameters();

    // 没有参数
    if (params.length === 0) {
      return false;
    }

    const propsParam = params[0];

    // 第一个参数为名字为props 或只有一个参数
    if (propsParam.name === 'props' || params.length === 1) {
      const propsParamType = checker.getTypeOfSymbolAtLocation(
        propsParam,
        getValueDeclaration(propsParam)
      );

      // 第一个参数必须为对象类型
      return (
        propsParamType.isClassOrInterface() ||
        propsParamType.isUnionOrIntersection() ||
        (isObjectType(propsParamType) &&
          propsParamType.getSymbol().name !== 'Array')
      );
    }
    return false;
  });
};
