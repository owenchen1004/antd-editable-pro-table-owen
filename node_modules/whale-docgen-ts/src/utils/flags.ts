import * as ts from 'typescript';

export const symbolHasFlag = (
  symbol: ts.Symbol,
  flag: ts.SymbolFlags
): boolean =>
  // eslint-disable-next-line no-bitwise
  (symbol.getFlags() & flag) === flag;

export const isOptionalSymbol = (symbol: ts.Symbol): boolean =>
  symbolHasFlag(symbol, ts.SymbolFlags.Optional);

export const typeHasFlag = (type: ts.Type, flag: ts.TypeFlags): boolean =>
  // eslint-disable-next-line no-bitwise
  (type.getFlags() & flag) === flag;

export const isObjectType = (type: ts.Type): type is ts.ObjectType =>
  typeHasFlag(type, ts.TypeFlags.Object);

export const typeHasObjectFlag = (
  type: ts.Type,
  flag: ts.ObjectFlags
): type is ts.ObjectType =>
  // eslint-disable-next-line no-bitwise
  isObjectType(type) && (type.objectFlags & flag) === flag;

/**
 * Checks whether a type is a tuple type.
 */
export function isTupleType(type: ts.Type): type is ts.TupleTypeReference {
  if (typeHasObjectFlag(type, ts.ObjectFlags.Tuple)) {
    return true;
  }
  if (typeHasObjectFlag(type, ts.ObjectFlags.Reference)) {
    const symbol = type.getSymbol();
    return !symbol || symbol.escapedName === 'Array';
  }
  return false;
}

export const isFunctionType = (type: ts.Type) => {
  const callSignatures = type.getCallSignatures();
  // 不是函数
  return callSignatures.length > 0;
};
