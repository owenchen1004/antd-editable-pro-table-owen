import * as ts from 'typescript';

interface JSDoc {
  description: string;
  fullComment: string;
  tags: Record<string, string>;
}

export const formatTagText = (tag: ts.JSDocTagInfo): string => {
  if (typeof tag.text === 'string') {
    return tag.text;
  }
  return ts.displayPartsToString(tag.text);
};

export const findDocComment = (
  checker: ts.TypeChecker,
  symbol: ts.Symbol
): JSDoc => {
  const comment = getFullJsDocComment(checker, symbol);
  if (comment.fullComment || comment.tags.default) {
    return comment;
  }

  const rootSymbols = checker.getRootSymbols(symbol);
  const commentsOnRootSymbols = rootSymbols
    .filter((x) => x !== symbol)
    .map((x) => getFullJsDocComment(checker, x))
    .filter((x) => !!x.fullComment || !!comment.tags.default);

  if (commentsOnRootSymbols.length) {
    return commentsOnRootSymbols[0];
  }

  return defaultJSDoc;
};

/**
 * Extracts a full JsDoc comment from a symbol, even
 * though TypeScript has broken down the JsDoc comment into plain
 * text and JsDoc tags.
 */
export const getFullJsDocComment = (
  checker: ts.TypeChecker,
  symbol: ts.Symbol
): JSDoc => {
  // in some cases this can be undefined (Pick<Type, 'prop1'|'prop2'>)
  if (symbol.getDocumentationComment === undefined) {
    return defaultJSDoc;
  }

  let mainComment = ts.displayPartsToString(
    symbol.getDocumentationComment(checker)
  );

  if (mainComment) {
    mainComment = mainComment.replace('\r\n', '\n');
  }

  const tags = symbol.getJsDocTags() || [];

  const tagComments: string[] = [];
  const tagMap: Record<string, string> = {};

  tags.forEach((tag) => {
    const trimmedText = formatTagText(tag).trim();
    const currentValue = tagMap[tag.name];
    tagMap[tag.name] = currentValue
      ? `${currentValue}\n${trimmedText}`
      : trimmedText;

    if (['default', 'type'].indexOf(tag.name) < 0) {
      tagComments.push(formatTag(tag));
    }
  });

  return {
    description: mainComment,
    fullComment: `${mainComment}\n${tagComments.join('\n')}`.trim(),
    tags: tagMap,
  };
};

function formatTag(tag: ts.JSDocTagInfo) {
  let result = `@${tag.name}`;
  if (tag.text) {
    result += ` ${formatTagText(tag)}`;
  }
  return result;
}

const defaultJSDoc: JSDoc = {
  description: '',
  fullComment: '',
  tags: {},
};
