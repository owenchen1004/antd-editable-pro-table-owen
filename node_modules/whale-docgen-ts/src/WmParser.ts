import * as ts from 'typescript';
import { Parser } from './TsParser/parser';
import { TypePaser } from './TypeParser';
import { WmProps, WmParserOptions, WmComponentDoc } from './types';
import { isNormalFuction } from './utils/isNormalFuction';

const isNumber = (n: unknown): n is number =>
  typeof n === 'number' && !Number.isNaN(n);
export class WmParser extends Parser {
  parserOptions: WmParserOptions;

  typePaser: TypePaser;

  constructor(program: ts.Program, opts: WmParserOptions) {
    super(program, opts);
    this.parserOptions = {
      ...opts,
      typeLevel: Math.max(0, isNumber(opts.typeLevel) ? opts.typeLevel : 2),
    };
    // @ts-ignore
    const { checker } = this;
    this.typePaser = new TypePaser(checker, opts);
  }

  isComponent(symbol: ts.Symbol) {
    if (!(symbol.valueDeclaration || symbol.declarations?.[0])) {
      return false;
    }

    // @ts-ignore
    const { checker } = this;
    // 判断是否是普通函数
    if (isNormalFuction(checker, symbol)) {
      return false;
    }
    // @ts-ignore
    const rootExp = this.getComponentFromExpression(symbol);
    const declaration = rootExp.valueDeclaration || rootExp.declarations![0];
    const type = checker.getTypeOfSymbolAtLocation(rootExp, declaration);
    // 获取代表props的type
    const propsType =
      this.extractPropsFromTypeIfStatelessComponent(type) ||
      this.extractPropsFromTypeIfStatefulComponent(type);
    return !!propsType;
  }

  getWmComponentDoc(
    symbol: ts.Symbol,
    source: ts.SourceFile
  ): WmComponentDoc | null {
    if (!this.isComponent(symbol)) {
      return null;
    }
    const doc = this.getComponentInfo(
      symbol,
      source,
      this.parserOptions.componentNameResolver
    ) as WmComponentDoc;
    if (!doc) {
      return null;
    }
    const { tags, ...others } = doc;
    return {
      ...others,
      meta: {
        exportName: symbol.getName(),
      },
    };
  }

  getSubWmComponentDoc(
    parentSymbol: ts.Symbol,
    symbol: ts.Symbol,
    source: ts.SourceFile
  ): WmComponentDoc | null {
    if (!this.isComponent(symbol)) {
      return null;
    }
    const doc = this.getComponentInfo(
      symbol,
      source,
      this.parserOptions.componentNameResolver
    ) as WmComponentDoc;
    if (!doc) {
      return null;
    }
    const { tags, ...others } = doc;
    return {
      ...others,
      displayName: `${parentSymbol.getName()}.${doc.displayName}`,
      meta: {
        exportName: parentSymbol.getName(),
        subName: symbol.getName(),
      },
    };
  }

  getPropsInfo(
    propsObj: ts.Symbol,
    defaultProps: Record<string, string> = {}
  ): WmProps {
    if (!propsObj.valueDeclaration) {
      return {};
    }

    // @ts-ignore
    const { checker } = this;

    const propsType = checker.getTypeOfSymbolAtLocation(
      propsObj,
      propsObj.valueDeclaration
    );
    const props = this.typePaser.getObjectDoc(
      propsType,
      this.parserOptions.typeLevel + 1
    );

    Object.keys(defaultProps)
      .filter((vo) => defaultProps[vo] !== undefined && vo in props)
      .forEach((vo) => {
        props[vo].required = false;
        props[vo].defaultValue = { value: defaultProps[vo] };
      });
    return props;
  }
}
