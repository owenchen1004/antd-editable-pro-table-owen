import { ComponentDoc, PropItem, ParserOptions } from './TsParser/types';

export interface WmBasePropItemType {
  name: string;
  raw: string;
}
export interface WmPlainPropItemType extends WmBasePropItemType {
  name: 'plain';
  raw: string;
}
export interface WmUnionPropItemType extends WmBasePropItemType {
  name: 'union';
  raw: string;
  value: WmPropItemType[];
}

export interface WmArrayPropItemType extends WmBasePropItemType {
  name: 'array';
  raw: string;
  value: WmPropItemType | WmPropItemType[];
  additionalItems?: WmPropItemType;
}
export interface WmIntersectionPropItemType extends WmBasePropItemType {
  name: 'intersection';
  raw: string;
  value: WmProps;
}
export interface WmObjectPropItemType extends WmBasePropItemType {
  name: 'object';
  raw: string;
  value: WmProps;
}
export interface WmFunctionPropItemType extends WmBasePropItemType {
  name: 'function';
  raw: string;
}

// interface WmEnumPropItemType extends WmBasicPropItemType {
//   name: 'enum';
//   raw: string;
//   value: Array<{
//     value: string;
//   }>;
// }
export type WmPropItemType =
  | WmPlainPropItemType
  | WmUnionPropItemType
  | WmIntersectionPropItemType
  | WmObjectPropItemType
  | WmArrayPropItemType
  | WmFunctionPropItemType;

export interface WmPropItem extends PropItem {
  type: WmPropItemType;
  defaultValue:
    | {
        value: string;
      }
    | undefined;
  parent?: WmParentType;
}
export type WmProps = Record<string, WmPropItem>;
export interface WmComponentDoc extends ComponentDoc {
  meta: {
    exportName: string;
    subName?: string;
  };
  props: WmProps;
}

export interface WmParserOptions extends ParserOptions {
  typeFilter?: (prop: WmPropItem) => boolean;
  /**
   * cwd
   */
  cwd?: string;
  /**
   * 下钻深度
   * @default 2
   */
  typeLevel?: number;
}

export interface WmParentType {
  line?: number;
  character?: number;
  pos?: number;

  name: string;
  fileName: string;
}
