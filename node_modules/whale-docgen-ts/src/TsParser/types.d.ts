import * as ts from 'typescript';
export declare type InterfaceOrTypeAliasDeclaration = ts.TypeAliasDeclaration | ts.InterfaceDeclaration;
export interface StringIndexedObject<T> {
    [key: string]: T;
}
export interface ComponentDoc {
    displayName: string;
    description: string;
    props: Props;
    methods: Method[];
    tags?: {};
}
export declare type Props = StringIndexedObject<PropItem>;
export interface PropItem {
    name: string;
    required: boolean;
    type: PropItemType;
    description: string;
    defaultValue: any;
    parent?: ParentType;
    declarations?: ParentType[];
}
export interface Method {
    name: string;
    docblock: string;
    modifiers: string[];
    params: MethodParameter[];
    returns?: {
        description?: string | null;
        type?: string;
    } | null;
    description: string;
}
export interface MethodParameter {
    name: string;
    description?: string | null;
    type: MethodParameterType;
}
export interface MethodParameterType {
    name: string;
}
export interface Component {
    name: string;
}
export interface PropItemType {
    name: string;
    value?: any;
    raw?: string;
}
export interface ParentType {
    name: string;
    fileName: string;
}
export declare type PropFilter = (props: PropItem, component: Component) => boolean;
export declare type ComponentNameResolver = (exp: ts.Symbol, source: ts.SourceFile) => string | undefined | null | false;
export interface ParserOptions {
    propFilter?: StaticPropFilter | PropFilter;
    componentNameResolver?: ComponentNameResolver;
    skipChildrenPropWithoutDoc?: boolean;
    savePropValueAsString?: boolean;
}
export interface StaticPropFilter {
    skipPropsWithName?: string[] | string;
    skipPropsWithoutDoc?: boolean;
}
export declare const defaultParserOpts: ParserOptions;
export interface FileParser {
    parse: (filePathOrPaths: string | string[]) => ComponentDoc[];
    parseWithProgramProvider: (filePathOrPaths: string | string[], programProvider?: () => ts.Program) => ComponentDoc[];
}
export declare const defaultOptions: ts.CompilerOptions;
