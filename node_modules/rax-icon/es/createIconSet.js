var _excluded = ["name", "className", "codePoint", "style"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { createElement, forwardRef } from 'rax';
export function createIconSet(Icon, glyphMap, fontFamily, fontFile) {
  if (glyphMap === void 0) {
    glyphMap = {};
  }

  var IconFont = forwardRef(function (_ref, ref) {
    var name = _ref.name,
        className = _ref.className,
        codePoint = _ref.codePoint,
        _ref$style = _ref.style,
        style = _ref$style === void 0 ? {} : _ref$style,
        rest = _objectWithoutPropertiesLoose(_ref, _excluded);

    return createElement(Icon, _extends({}, rest, {
      ref: ref,
      className: className,
      style: style,
      source: {
        uri: fontFile,
        codePoint: codePoint || glyphMap[name]
      },
      fontFamily: fontFamily
    }));
  });
  IconFont.displayName = 'IconFont';
  return IconFont;
}