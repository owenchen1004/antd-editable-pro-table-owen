"use strict";

var _fmtEvent = _interopRequireDefault(require("./fmtEvent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Component({
  data: {
    style: '',
    isImage: false,
    fontCache: {}
  },
  properties: {
    className: {
      type: String,
      value: ''
    },
    styleSheet: {
      type: String,
      value: ''
    },
    source: {
      type: Object,
      value: {
        uri: '',
        codePoint: ''
      }
    },
    fontFamily: {
      type: String,
      value: ''
    }
  },
  lifetimes: {
    attached: function attached() {
      this.initIcon();
    }
  },
  observers: {
    styleSheet: function styleSheet(newStyleSheet) {
      this.initIcon('styleSheet', newStyleSheet);
    },
    source: function source(newSource) {
      this.initIcon('source', newSource);
    }
  },
  options: {
    styleIsolation: 'apply-shared'
  },
  methods: {
    initIcon: function initIcon(type, newValue) {
      if (type === 'styleSheet') {
        this.setData({
          style: newValue
        });
      } else {
        var _ref = newValue || this.properties.source || {},
            uri = _ref.uri,
            codePoint = _ref.codePoint;

        var _this$properties = this.properties,
            fontFamily = _this$properties.fontFamily,
            _this$properties$styl = _this$properties.style,
            style = _this$properties$styl === void 0 ? '' : _this$properties$styl;

        if (uri && !codePoint && !fontFamily) {
          // use uri as image url
          this.setData({
            isImage: true,
            style: style
          });
          return;
        }

        if (!fontFamily) {
          // need't load font, just set style
          this.setData({
            style: style
          });
          return;
        } // load font and set style prop with new font-family


        var fontFile = this.data.fontCache[fontFamily];

        if (!fontFile) {
          this.data.fontCache[fontFamily] = uri;
          wx.loadFontFace({
            family: fontFamily,
            source: "url('" + uri + "')"
          });
        } else if (fontFile !== uri) {
          console.error("font-family " + fontFamily + " should be unique!");
        }

        this.setData({
          style: "font-family:" + fontFamily + ";" + style
        });
      }
    },
    onTap: function onTap(e) {
      var event = (0, _fmtEvent.default)(this.properties, e);
      this.triggerEvent('onClick', event.detail);
    }
  }
});