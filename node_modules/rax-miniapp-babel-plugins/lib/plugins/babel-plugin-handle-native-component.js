"use strict";

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _require = require('path'),
    resolve = _require.resolve,
    dirname = _require.dirname,
    join = _require.join;

var _require2 = require('fs-extra'),
    existsSync = _require2.existsSync,
    readJSONSync = _require2.readJSONSync;

var _require3 = require('miniapp-builder-shared'),
    _require3$pathHelper = _require3.pathHelper,
    absoluteModuleResolve = _require3$pathHelper.absoluteModuleResolve,
    removeExt = _require3$pathHelper.removeExt,
    platformMap = _require3.platformMap;

var extMap = require('../utils/extMap');

var _require4 = require('../utils/handleComponentAST'),
    collectComponentAttr = _require4.collectComponentAttr,
    collectUsings = _require4.collectUsings;

var MINIAPP_COMPILED_DIR = 'miniapp-compiled';
var RELATIVE_COMPONENTS_REG = /^\./;
var baseComponents = ['rax-view', 'rax-canvas', 'rax-icon', 'rax-image', 'rax-picture', 'rax-text', 'rax-link', 'rax-scrollview', 'rax-recyclerview', 'rax-slider', 'rax-textinput', 'rax-video', 'rax-embed'];
/**
 * Get native component npm path
 * @param {string} rootDir project root dir
 * @param {string} source module name
 * @param {string} target miniapp platform
 * @param {string[]} runtimeDependencies components that use runtime implementation
 *
 */

function getNpmSourcePath(rootDir, source, target, runtimeDependencies) {
  var modulePath = resolve(rootDir, 'node_modules', source);

  try {
    var pkgConfig = readJSONSync(join(modulePath, 'package.json'));
    var miniappConfig = pkgConfig.miniappConfig;

    if (!miniappConfig || baseComponents.includes(source) || isInRuntimeDependencies(source, runtimeDependencies)) {
      return source;
    }

    var miniappEntry = target === 'miniapp' ? miniappConfig.main : miniappConfig["main:" + platformMap[target].type]; // Ensure component has target platform rax complie result

    if (!miniappEntry) {
      return source;
    }

    return join(source, miniappEntry);
  } catch (err) {
    return source;
  }
}

;

function getTmplPath(source, rootDir, dirName, target, runtimeDependencies) {
  // If it's a npm module, keep source origin value, otherwise use absolute path
  var isNpm = !RELATIVE_COMPONENTS_REG.test(source);
  var filePath = isNpm ? getNpmSourcePath(rootDir, source, target, runtimeDependencies) : resolve(dirName, source);
  var absPath = isNpm ? resolve(rootDir, 'node_modules', filePath) : filePath;
  if (!existsSync(absPath + "." + extMap[target])) return false;

  if (target === 'wechat-miniprogram') {
    // In Wechat MiniProgram need remove miniprogram_dist
    filePath = filePath.replace('/miniprogram_dist', '');
  }

  return isNpm ? filePath : "." + filePath.replace(resolve(rootDir, 'src'), '');
}
/**
 * Get rax compiled component filepath
 * @param {string} dirName
 * @param {string} source
 */


function getCompiledComponentsPath(dirName, source) {
  if (!isMiniappCompiledFilePath(source)) {
    return false;
  }

  var filepath = removeExt(absoluteModuleResolve(dirName, source)); // The returned value will be written into comp.json in `usingComponents`, which is under the same directory as miniapp-compiled

  return "./" + filepath.substring(filepath.indexOf(MINIAPP_COMPILED_DIR));
}
/**
 * Judge if the file is rax miniapp compiled component
 * @param {string} filePath
 */


function isMiniappCompiledFilePath(filePath) {
  return filePath.indexOf(MINIAPP_COMPILED_DIR) !== -1;
}
/**
 * Judge if the str is regexp
 * @param {string} str
 */


function isRegExpStr(str) {
  return str[0] === '/' && str[str.length - 1] === '/';
}
/**
 *
 * @param {string} dependency
 * @param {string[]} runtimeDependencies
 */


function isInRuntimeDependencies(dependency, runtimeDependencies) {
  if (runtimeDependencies === void 0) {
    runtimeDependencies = [];
  }

  for (var _iterator = _createForOfIteratorHelperLoose(runtimeDependencies), _step; !(_step = _iterator()).done;) {
    var runtimeDependency = _step.value;

    if (isRegExpStr(runtimeDependency)) {
      var reg = new RegExp(runtimeDependency.slice(1, -1));
      if (reg.test(dependency)) return true;
    } else if (runtimeDependency === dependency) return true;
  }

  return false;
}

function hasDefaultSpecifier(specifiers, t) {
  for (var _iterator2 = _createForOfIteratorHelperLoose(specifiers), _step2; !(_step2 = _iterator2()).done;) {
    var specifier = _step2.value;
    if (t.isImportDefaultSpecifier(specifier)) return true;
  }

  return false;
}

module.exports = function visitor(_ref, _ref2) {
  var t = _ref.types;
  var usingComponents = _ref2.usingComponents,
      target = _ref2.target,
      rootDir = _ref2.rootDir,
      runtimeDependencies = _ref2.runtimeDependencies;
  // Collect imported dependencies
  var nativeComponents = {};
  var scanedPageMap = {};
  return {
    visitor: {
      Program: {
        exit: function exit(path, _ref3) {
          var filename = _ref3.filename;
          scanedPageMap[filename] = false;
          nativeComponents = {};
        }
      },
      ImportDeclaration: {
        enter: function enter(path, _ref4) {
          var filename = _ref4.filename;
          var _path$node = path.node,
              specifiers = _path$node.specifiers,
              source = _path$node.source; // Don't scan files in miniapp-compiled directory

          if (Array.isArray(specifiers) && t.isStringLiteral(source) && !isMiniappCompiledFilePath(filename)) {
            var dirName = dirname(filename);
            var filePath = getTmplPath(source.value, rootDir, dirName, target, runtimeDependencies) || getCompiledComponentsPath(dirName, source.value); // TODO:
            // Temporarily ignore import { a, b } from 'xxx';

            if (filePath && hasDefaultSpecifier(specifiers, t)) {
              if (!scanedPageMap[filename]) {
                scanedPageMap[filename] = true;
                path.parentPath.traverse({
                  JSXOpeningElement: collectComponentAttr(nativeComponents, t)
                });
              }

              collectUsings(path, nativeComponents, usingComponents, filePath, t);
            }
          }
        }
      }
    }
  };
};