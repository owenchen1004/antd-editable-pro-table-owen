"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = require('path'),
    resolve = _require.resolve,
    join = _require.join,
    dirname = _require.dirname;

var _require2 = require('fs-extra'),
    readJsonSync = _require2.readJsonSync,
    existsSync = _require2.existsSync;

var execa = require('execa');

var _require3 = require('ice-npm-utils'),
    checkAliInternal = _require3.checkAliInternal;

var isEqual = require('lodash.isequal');

var _require4 = require('./constants'),
    MINIAPP = _require4.MINIAPP;

var isCSSFile = require('./utils/isCSSFile');

var wrapChunks = require('./utils/wrapChunks');

var _require5 = require('./generators'),
    generateAppCSS = _require5.generateAppCSS,
    generateAppJS = _require5.generateAppJS,
    generateConfig = _require5.generateConfig,
    generatePageCSS = _require5.generatePageCSS,
    generatePageJS = _require5.generatePageJS,
    generatePageJSON = _require5.generatePageJSON,
    generatePageXML = _require5.generatePageXML,
    generateRootTmpl = _require5.generateRootTmpl,
    generateElementJS = _require5.generateElementJS,
    generateElementJSON = _require5.generateElementJSON,
    generateElementTemplate = _require5.generateElementTemplate,
    generateRender = _require5.generateRender,
    generatePkg = _require5.generatePkg;

var PluginName = 'MiniAppRuntimePlugin';

var MiniAppRuntimePlugin = /*#__PURE__*/function () {
  function MiniAppRuntimePlugin(options) {
    this.options = options;
    this.target = options.target || MINIAPP;
  }

  var _proto = MiniAppRuntimePlugin.prototype;

  _proto.apply = function apply(compiler) {
    var rootDir = __dirname;
    var options = this.options;
    var target = this.target;
    var nativeLifeCycleMap = options.nativeLifeCycleMap,
        _options$usingCompone = options.usingComponents,
        usingComponents = _options$usingCompone === void 0 ? {} : _options$usingCompone,
        _options$usingPlugins = options.usingPlugins,
        usingPlugins = _options$usingPlugins === void 0 ? {} : _options$usingPlugins,
        _options$routes = options.routes,
        routes = _options$routes === void 0 ? [] : _options$routes,
        command = options.command;
    var isFirstRender = true;
    var lastUsingComponents = {};
    var lastUsingPlugins = {};
    var needAutoInstallDependency = false;
    var isAliInternal;
    var npmRegistry; // Execute when compilation created

    compiler.hooks.compilation.tap(PluginName, function (compilation) {
      // Optimize chunk assets
      compilation.hooks.optimizeChunkAssets.tapAsync(PluginName, function (chunks, callback) {
        wrapChunks(compilation, chunks, rootDir, target);
        callback();
      });
    });
    compiler.hooks.emit.tapAsync(PluginName, function (compilation, callback) {
      var outputPath = compilation.outputOptions.path;
      var sourcePath = join(options.rootDir, 'src');
      var pages = [];
      var changedFiles = Object.keys(compiler.watchFileSystem.watcher.mtimes).map(function (filePath) {
        return filePath.replace(sourcePath, '');
      });
      var useNativeComponentCount = Object.keys(usingComponents).length;
      var useComponentChanged = false;

      if (!isFirstRender) {
        useComponentChanged = !isEqual(usingComponents, lastUsingComponents) || !isEqual(usingPlugins, lastUsingPlugins);
      }

      lastUsingComponents = Object.assign({}, usingComponents);
      lastUsingPlugins = Object.assign({}, usingPlugins);
      var useComponent = Object.keys(lastUsingPlugins).length + Object.keys(lastUsingComponents).length > 0; // Collect asset

      routes.forEach(function (_ref) {
        var entryName = _ref.entryName;
        pages.push(entryName);
        var pageConfig = {};
        var pageConfigPath = resolve(outputPath, entryName + '.json');

        if (existsSync(pageConfigPath)) {
          pageConfig = readJsonSync(pageConfigPath);
        }

        var pageRoute = join(sourcePath, entryName);
        var nativeLifeCycles = nativeLifeCycleMap[pageRoute] || {};
        var route = routes.find(function (_ref2) {
          var source = _ref2.source;
          return source === entryName;
        });

        if (route.window && route.window.pullRefresh) {
          nativeLifeCycles.onPullDownRefresh = true; // onPullIntercept only exits in wechat miniprogram

          if (target === MINIAPP) {
            nativeLifeCycles.onPullIntercept = true;
          }
        } // xml/css/json file need be written in first render or using native component state changes


        if (isFirstRender || useComponentChanged) {
          // Page xml
          generatePageXML(compilation, entryName, useComponent, {
            target: target,
            command: command,
            rootDir: rootDir,
            outputPath: outputPath
          }); // Page css

          generatePageCSS(compilation, entryName, {
            target: target,
            command: command
          }); // Page json

          generatePageJSON(compilation, pageConfig, useComponent, entryName, {
            target: target,
            command: command,
            rootDir: rootDir,
            outputPath: outputPath
          });
        } // Page js


        generatePageJS(compilation, entryName, nativeLifeCycles, {
          target: target,
          command: command,
          rootDir: rootDir,
          outputPath: outputPath
        });
      }); // These files need be written in first render

      if (isFirstRender) {
        // render.js
        generateRender(compilation, {
          target: target,
          command: command,
          rootDir: options.rootDir
        });
      } // Collect app.js


      if (isFirstRender) {
        var commonAppJSFilePaths = compilation.entrypoints.get('index').getFiles().filter(function (filePath) {
          return !isCSSFile(filePath);
        }); // App js

        generateAppJS(compilation, commonAppJSFilePaths, {
          target: target,
          command: command,
          rootDir: rootDir
        });
      }

      if (isFirstRender || changedFiles.some(function (filePath) {
        return isCSSFile(filePath);
      })) {
        generateAppCSS(compilation, {
          target: target,
          command: command,
          rootDir: rootDir
        });
      } // These files need be written in first render and using native component state changes


      if (isFirstRender || useComponentChanged) {
        // Config js
        generateConfig(compilation, {
          usingComponents: usingComponents,
          usingPlugins: usingPlugins,
          pages: pages,
          target: target,
          command: command,
          rootDir: rootDir
        }); // Only when developer may use native component, it will generate package.json in output

        if (useNativeComponentCount > 0 || existsSync(join(sourcePath, 'public'))) {
          generatePkg(compilation, {
            target: target,
            command: command,
            rootDir: rootDir
          });
          needAutoInstallDependency = true;
        }

        if (target !== MINIAPP || useComponent) {
          // Generate self loop element
          generateElementJS(compilation, {
            target: target,
            command: command,
            rootDir: rootDir
          });
          generateElementJSON(compilation, {
            usingComponents: usingComponents,
            usingPlugins: usingPlugins,
            target: target,
            command: command,
            rootDir: rootDir
          });
          generateElementTemplate(compilation, {
            usingPlugins: usingPlugins,
            usingComponents: usingComponents,
            target: target,
            command: command,
            rootDir: rootDir
          });
        } else {
          // Only when there isn't native component, it need generate root template file
          // Generate root template xml
          generateRootTmpl(compilation, {
            target: target,
            command: command,
            rootDir: rootDir,
            usingPlugins: usingPlugins,
            usingComponents: usingComponents
          });
        }
      }

      isFirstRender = false;
      callback();
    });
    compiler.hooks.done.tapAsync(PluginName, /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(stats, callback) {
        var distDir;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (needAutoInstallDependency) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", callback());

              case 2:
                if (!(isAliInternal === undefined)) {
                  _context.next = 7;
                  break;
                }

                _context.next = 5;
                return checkAliInternal();

              case 5:
                isAliInternal = _context.sent;
                npmRegistry = isAliInternal ? 'https://registry.npm.alibaba-inc.com' : 'https://registry.npm.taobao.org';

              case 7:
                distDir = stats.compilation.outputOptions.path;
                execa('npm', ['install', '--production', "--registry=" + npmRegistry], {
                  cwd: distDir
                }).then(function (_ref4) {
                  var exitCode = _ref4.exitCode;

                  if (!exitCode) {
                    callback();
                  } else {
                    console.log("\nInstall dependencies failed, please enter " + distDir + " and retry by yourself\n");
                    callback();
                  }
                }).catch(function () {
                  console.log("\nInstall dependencies failed, please enter " + distDir + " and retry by yourself\n");
                  callback();
                });

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  };

  return MiniAppRuntimePlugin;
}();

module.exports = MiniAppRuntimePlugin;