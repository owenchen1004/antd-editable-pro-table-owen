"use strict";

var postcss = require('postcss');

var colors = require('colors/safe');

var tagList = require('../webTagList');

var replaceRegexp = new RegExp("(\\W|\\b)(" + ['html'].concat(tagList).join('|') + ")(\\W|\\b)", 'ig');
var prefixRegexp = /[a-zA-Z0-9:.#_-]/;
var suffixRegexp = /[a-zA-Z0-9_-]/;
/**
 * Replace tag name
 */

var replaceTagNamePlugin = postcss.plugin('replaceTagName', function () {
  return function (root) {
    root.walk(function (child) {
      if (child.type === 'atrule') {
        // Handle @-prefix that css doesn't support
        if (child.name === '-moz-keyframes') {
          child.remove();
        }
      } else if (child.type === 'rule') {
        var selectors = [];
        child.selectors.forEach(function (selector) {
          // MiniApp doesn't support .xxx>:first-child
          selector = selector.replace(/>:/g, '>*:');
          var wavyLineIndex = selector.indexOf('~');

          if (wavyLineIndex !== -1 && selector[wavyLineIndex + 1] !== '=') {
            console.warn(colors.bold("\nselector " + colors.yellow(selector) + " is not supported in miniapp css, so it will be deleted\n"));
            return;
          } // Handle tag selector


          selector = selector.replace(replaceRegexp, function (all, $1, tagName, $2, offset, string) {
            // Non-tag selector, adjust \b
            var start = $1;
            var end = $2;
            if (!start) start = string[offset - 1] || '';
            if (!end) end = string[offset + all.length] || '';

            if (prefixRegexp.test(start) || suffixRegexp.test(end)) {
              // Non-tag selector
              return all;
            }

            tagName = tagName.toLowerCase();

            if (tagName === 'html') {
              // Handle page alone
              return $1 + "page" + $2;
            } else if (tagName) {
              // Use original tag name
              return $1 + ".h5-" + tagName + $2;
            } else {
              return all;
            }
          }); // Handle * selector

          selector = selector.replace(/(.*)\*(.*)/g, function (all, $1, $2) {
            if ($2[0] === '=') return all;
            tagList.forEach(function (tagName) {
              return selectors.push($1 + ".h5-" + tagName + $2);
            });
            selectors.push($1 + "page" + $2);
            return '';
          });
          if (selector.trim()) selectors.push(selector);
        });

        if (!selectors.length) {
          child.remove();
        } else {
          child.selectors = selectors;
        }
      }
    });
  };
});
/**
 * repalce :root -> page for wechat-miniprogram
 */

var replaceRootSelector = postcss.plugin('replaceRoot', function () {
  return function (root) {
    root.walkRules(function (rule) {
      if (rule.selector === ':root') {
        rule.selector = 'page';
      }
    });
  };
});

module.exports = function (code, replaceRoot) {
  var plugins = [replaceTagNamePlugin];

  if (replaceRoot) {
    plugins.push(replaceRootSelector);
  }

  code = postcss(plugins).process(code, {
    from: undefined,
    // Eliminate warning
    map: null
  });
  return code.css;
};