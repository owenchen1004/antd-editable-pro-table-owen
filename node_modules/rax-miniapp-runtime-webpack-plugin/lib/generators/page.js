"use strict";

var ejs = require('ejs');

var _require = require('path'),
    join = _require.join;

var adapter = require('../adapter');

var getAssetPath = require('../utils/getAssetPath');

var addFileToCompilation = require('../utils/addFileToCompilation');

var getTemplate = require('../utils/getTemplate');

var _require2 = require('../constants'),
    MINIAPP = _require2.MINIAPP;

function generatePageCSS(compilation, pageRoute, _ref) {
  var target = _ref.target,
      command = _ref.command;
  var pageCssContent = '/* required by usingComponents */';
  addFileToCompilation(compilation, {
    filename: pageRoute + "." + adapter[target].css,
    content: pageCssContent,
    target: target,
    command: command
  });
}

function generatePageJS(compilation, pageRoute, nativeLifeCycles, _ref2) {
  if (nativeLifeCycles === void 0) {
    nativeLifeCycles = {};
  }

  var target = _ref2.target,
      command = _ref2.command,
      rootDir = _ref2.rootDir,
      outputPath = _ref2.outputPath;
  var pageJsContent = ejs.render(getTemplate(rootDir, 'page.js'), {
    render_path: "" + getAssetPath(join(outputPath, 'render.js'), join(outputPath, pageRoute + ".js")),
    route: pageRoute,
    native_lifecycles: "[" + Object.keys(nativeLifeCycles).reduce(function (total, current, index) {
      return index === 0 ? total + "'" + current + "'" : total + ",'" + current + "'";
    }, '') + "]"
  });
  addFileToCompilation(compilation, {
    filename: pageRoute + ".js",
    content: pageJsContent,
    target: target,
    command: command
  });
}

function generatePageXML(compilation, pageRoute, useComponent, _ref3) {
  var target = _ref3.target,
      command = _ref3.command,
      outputPath = _ref3.outputPath;
  var pageXmlContent;

  if (target === MINIAPP && useComponent) {
    pageXmlContent = '<element r="{{root}}"  />';
  } else {
    var rootTmplFileName = 'root.' + adapter[target].xml;
    var pageTmplFilePath = pageRoute + "." + adapter[target].xml;
    pageXmlContent = "<import src=\"" + getAssetPath(join(outputPath, rootTmplFileName), join(outputPath, pageTmplFilePath)) + "\"/>\n    <template is=\"element\" data=\"{{r: root}}\"  />";
  }

  addFileToCompilation(compilation, {
    filename: pageRoute + "." + adapter[target].xml,
    content: pageXmlContent,
    target: target,
    command: command
  });
}

function generatePageJSON(compilation, pageConfig, useComponent, pageRoute, _ref4) {
  var target = _ref4.target,
      command = _ref4.command,
      outputPath = _ref4.outputPath;

  if (!pageConfig.usingComponents) {
    pageConfig.usingComponents = {};
  }

  var elementPath = getAssetPath(join(outputPath, 'comp'), join(outputPath, pageRoute + ".js"));

  if (useComponent || target !== MINIAPP) {
    pageConfig.usingComponents.element = elementPath;
  }

  addFileToCompilation(compilation, {
    filename: pageRoute + ".json",
    content: JSON.stringify(pageConfig, null, 2),
    target: target,
    command: command
  });
}

module.exports = {
  generatePageCSS: generatePageCSS,
  generatePageJS: generatePageJS,
  generatePageJSON: generatePageJSON,
  generatePageXML: generatePageXML
};