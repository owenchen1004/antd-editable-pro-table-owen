"use strict";

var ejs = require('ejs');

var _require = require('../constants'),
    MINIAPP = _require.MINIAPP;

var adapter = require('../adapter');

var addFileToCompilation = require('../utils/addFileToCompilation');

var getTemplate = require('../utils/getTemplate');

var _require2 = require('./root'),
    generateRootTmpl = _require2.generateRootTmpl;

function generateElementJS(compilation, _ref) {
  var target = _ref.target,
      command = _ref.command;
  addFileToCompilation(compilation, {
    filename: 'comp.js',
    content: "const render = require('./render');\n\n    Component(render.createElementConfig());",
    target: target,
    command: command
  });
}

function generateElementTemplate(compilation, _ref2) {
  var usingPlugins = _ref2.usingPlugins,
      usingComponents = _ref2.usingComponents,
      target = _ref2.target,
      command = _ref2.command,
      rootDir = _ref2.rootDir;
  var content = '<template is="{{r.nodeType || \'h-element\'}}" data="{{r: r}}" />';

  if (target !== MINIAPP) {
    generateRootTmpl(compilation, {
      usingPlugins: usingPlugins,
      usingComponents: usingComponents,
      target: target,
      command: command,
      rootDir: rootDir
    });
    content = "<import src=\"./root." + adapter[target].xml + "\"/>" + content;
  } else {
    var pluginTmpl = ejs.render(getTemplate(rootDir, 'plugin.xml', target), {
      usingPlugins: usingPlugins
    });
    var componentTmpl = ejs.render(getTemplate(rootDir, 'custom-component.xml', target), {
      usingComponents: usingComponents
    }); // In MiniApp, root.axml need be written into comp.axml

    content = ejs.render(getTemplate(rootDir, 'root.xml', target)) + pluginTmpl + componentTmpl + content;
  }

  addFileToCompilation(compilation, {
    filename: "comp." + adapter[target].xml,
    content: content,
    target: target,
    command: command
  });
  addFileToCompilation(compilation, {
    filename: "tool." + adapter[target].script,
    content: ejs.render(getTemplate(rootDir, "tool." + adapter[target].script, target)),
    target: target,
    command: command
  });
}

function generateElementJSON(compilation, _ref3) {
  var usingComponents = _ref3.usingComponents,
      usingPlugins = _ref3.usingPlugins,
      target = _ref3.target,
      command = _ref3.command,
      rootDir = _ref3.rootDir;
  var content = {
    component: true,
    usingComponents: {}
  };

  if (target !== MINIAPP) {
    content.usingComponents.element = './comp';
  }

  Object.keys(usingComponents).forEach(function (component) {
    content.usingComponents[component] = usingComponents[component].path;
  });
  Object.keys(usingPlugins).forEach(function (plugin) {
    content.usingComponents[plugin] = usingPlugins[plugin].path;
  });
  addFileToCompilation(compilation, {
    filename: 'comp.json',
    content: JSON.stringify(content, null, 2),
    target: target,
    command: command
  });
}

module.exports = {
  generateElementTemplate: generateElementTemplate,
  generateElementJS: generateElementJS,
  generateElementJSON: generateElementJSON
};