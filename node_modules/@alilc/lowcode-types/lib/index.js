"use strict";

exports.__esModule = true;
var _exportNames = {
  GlobalEvent: true
};
exports.GlobalEvent = void 0;
var _lowcodeDatasourceTypes = require("@alilc/lowcode-datasource-types");
Object.keys(_lowcodeDatasourceTypes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _lowcodeDatasourceTypes[key]) return;
  exports[key] = _lowcodeDatasourceTypes[key];
});
var _editor = require("./editor");
Object.keys(_editor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _editor[key]) return;
  exports[key] = _editor[key];
});
var _activity = require("./activity");
Object.keys(_activity).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _activity[key]) return;
  exports[key] = _activity[key];
});
var _codeIntermediate = require("./code-intermediate");
Object.keys(_codeIntermediate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _codeIntermediate[key]) return;
  exports[key] = _codeIntermediate[key];
});
var _codeResult = require("./code-result");
Object.keys(_codeResult).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _codeResult[key]) return;
  exports[key] = _codeResult[key];
});
var _assets = require("./assets");
Object.keys(_assets).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _assets[key]) return;
  exports[key] = _assets[key];
});
var _GlobalEvent = _interopRequireWildcard(require("./event"));
exports.GlobalEvent = _GlobalEvent;
var _shell = require("./shell");
Object.keys(_shell).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _shell[key]) return;
  exports[key] = _shell[key];
});
var _shellModelFactory = require("./shell-model-factory");
Object.keys(_shellModelFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _shellModelFactory[key]) return;
  exports[key] = _shellModelFactory[key];
});
var _deprecated = require("./deprecated");
Object.keys(_deprecated).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _deprecated[key]) return;
  exports[key] = _deprecated[key];
});
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }