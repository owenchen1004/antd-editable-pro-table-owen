import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import EventEmitter from 'events';
var instance = null;
EventEmitter.defaultMaxListeners = 100;
export var AppHelper = /*#__PURE__*/function (_EventEmitter) {
  _inheritsLoose(AppHelper, _EventEmitter);
  function AppHelper(config) {
    var _this;
    _this = _EventEmitter.call(this) || this;
    instance = _assertThisInitialized(_this);
    Object.assign(_assertThisInitialized(_this), config);
    return _this;
  }
  var _proto = AppHelper.prototype;
  _proto.get = function get(key) {
    return this[key];
  };
  _proto.set = function set(key, val) {
    var _this2 = this;
    if (typeof key === 'string') {
      this[key] = val;
    } else if (typeof key === 'object') {
      Object.keys(key).forEach(function (item) {
        _this2[item] = key[item];
      });
    }
  };
  _proto.batchOn = function batchOn(events, lisenter) {
    var _this3 = this;
    if (!Array.isArray(events)) return;
    events.forEach(function (event) {
      return _this3.on(event, lisenter);
    });
  };
  _proto.batchOnce = function batchOnce(events, lisenter) {
    var _this4 = this;
    if (!Array.isArray(events)) return;
    events.forEach(function (event) {
      return _this4.once(event, lisenter);
    });
  };
  _proto.batchOff = function batchOff(events, lisenter) {
    var _this5 = this;
    if (!Array.isArray(events)) return;
    events.forEach(function (event) {
      return _this5.off(event, lisenter);
    });
  };
  return AppHelper;
}(EventEmitter);
AppHelper.getInstance = function () {
  if (!instance) {
    instance = new AppHelper();
  }
  return instance;
};