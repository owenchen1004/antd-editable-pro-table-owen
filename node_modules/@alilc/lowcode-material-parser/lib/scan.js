"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const core_1 = require("./core");
const utils_1 = require("./utils");
const log = core_1.debug.extend('mat');
async function scan(options) {
    const model = {
        pkgName: '',
        pkgVersion: '',
        mainFileAbsolutePath: '',
        mainFilePath: '',
    };
    log('options', options);
    // 入口文件路径
    const entryFilePath = options.entry;
    const stats = fs_extra_1.lstatSync(entryFilePath);
    if ((options.accesser === 'local' ||
        (options.accesser === 'online' &&
            options.name &&
            options.entry)) &&
        stats.isFile()) {
        if (options.accesser === 'online') {
            model.useEntry = true;
        }
        if (path_1.isAbsolute(entryFilePath)) {
            model.mainFilePath = entryFilePath;
            model.mainFileAbsolutePath = entryFilePath;
        }
        else {
            model.mainFilePath = entryFilePath;
            model.mainFileAbsolutePath = path_1.resolve(entryFilePath);
        }
    }
    const pkgJsonPath = path_1.join(options.root, 'package.json');
    if (await fs_extra_1.pathExists(pkgJsonPath)) {
        const pkgJson = await utils_1.resolvePkgJson(pkgJsonPath);
        model.pkgName = pkgJson.name;
        model.pkgVersion = pkgJson.version;
        if (pkgJson.module) {
            const moduleFileAbsolutePath = path_1.join(options.root, pkgJson.module);
            if (await fs_extra_1.pathExists(moduleFileAbsolutePath)) {
                model.moduleFilePath = pkgJson.module;
                model.moduleFileAbsolutePath = moduleFileAbsolutePath;
            }
        }
        model.mainFilePath = model.mainFilePath || pkgJson.main || './index.js';
        model.mainFileAbsolutePath = model.mainFileAbsolutePath || path_1.join(entryFilePath, pkgJson.main);
        const typingsPathCandidates = [
            pkgJson.typings,
            pkgJson.types,
            './index.d.ts',
            './lib/index.d.ts',
        ];
        for (let i = 0; i < typingsPathCandidates.length; i++) {
            const typingsFilePath = typingsPathCandidates[i];
            if (!typingsFilePath)
                continue;
            const typingsFileAbsolutePath = path_1.join(options.root, typingsFilePath);
            if (await fs_extra_1.pathExists(typingsFileAbsolutePath)) {
                model.typingsFileAbsolutePath = typingsFileAbsolutePath;
                model.typingsFilePath = typingsFilePath;
                break;
            }
        }
    }
    log('model', model);
    return model;
}
exports.default = scan;
//# sourceMappingURL=scan.js.map