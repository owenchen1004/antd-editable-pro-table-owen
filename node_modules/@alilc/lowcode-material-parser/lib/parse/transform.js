"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformItem = exports.transformType = void 0;
const lodash_1 = require("lodash");
const utils_1 = require("../utils");
const core_1 = require("../core");
const log = core_1.debug.extend('parse:transform');
function transformType(itemType) {
    var _a, _b;
    if (typeof itemType === 'string')
        return itemType;
    const { name, elements, value = elements, computed, required, type, raw, params, returns, } = itemType;
    if (computed !== undefined && value) {
        return utils_1.safeEval(value);
    }
    const result = {
        type: name,
    };
    if (required) {
        result.isRequired = required;
    }
    switch (name) {
        case 'number':
        case 'string':
        case 'bool':
        case 'any':
        case 'symbol':
        case 'object':
        case 'null':
        case 'array':
        case 'element':
        case 'node':
        case 'void':
            break;
        case 'func':
            if (params) {
                result.params = params.map((x) => {
                    const res = {
                        name: x.name,
                        propType: transformType(x.type || x.propType),
                    };
                    if (x.description) {
                        res.description = x.description;
                    }
                    return res;
                });
            }
            if (returns) {
                result.returns = {
                    propType: transformType(returns.type || returns.propType),
                };
            }
            if (raw) {
                result.raw = raw;
            }
            break;
        case 'literal': {
            result.type = 'oneOf';
            try {
                const literalValue = utils_1.safeEval(value);
                result.value = [literalValue];
            }
            catch (e) {
                result.value = [raw];
            }
            break;
        }
        case 'enum':
        case 'oneOf':
            result.type = 'oneOf';
            result.value = value.map(transformType);
            break;
        case 'tuple':
            result.type = 'tuple';
            result.value = value.map(transformType);
            break;
        case 'union': {
            if (itemType.raw) {
                if (itemType.raw.match(/ReactNode$/)) {
                    result.type = 'node';
                    break;
                }
                else if (itemType.raw.match(/Element$/)) {
                    result.type = 'element';
                    break;
                }
            }
        }
        // eslint-disable-next-line no-fallthrough
        case 'oneOfType':
            result.type = 'oneOfType';
            result.value = value.map(transformType);
            break;
        case 'boolean':
            result.type = 'bool';
            break;
        case 'Function':
            result.type = 'func';
            break;
        case 'unknown':
            result.type = 'any';
            break;
        case 'Array':
        case 'arrayOf': {
            result.type = 'arrayOf';
            let _itemType = transformType(value[0]);
            if (typeof _itemType === 'object') {
                _itemType = lodash_1.omit(_itemType, ['isRequired']);
            }
            result.value = _itemType;
            break;
        }
        case 'signature': {
            if (typeof type === 'string') {
                result.type = type;
                break;
            }
            result.type = 'shape';
            const properties = ((_a = type === null || type === void 0 ? void 0 : type.signature) === null || _a === void 0 ? void 0 : _a.properties) || ((_b = itemType === null || itemType === void 0 ? void 0 : itemType.signature) === null || _b === void 0 ? void 0 : _b.properties) || [];
            if (properties.length === 0) {
                if (raw === null || raw === void 0 ? void 0 : raw.includes('=>')) {
                    result.type = 'func';
                    result.raw = raw;
                }
                else {
                    result.type = 'object';
                }
            }
            else if (properties.length === 1 && typeof properties[0].key === 'object') {
                const v = transformType(properties[0].value);
                if (v === 'any') {
                    result.type = 'object';
                }
                else if (typeof v === 'string') {
                    result.value = v;
                    result.type = 'objectOf';
                }
                else if (typeof (v === null || v === void 0 ? void 0 : v.type) === 'string') {
                    result.value = v.type;
                    result.type = 'objectOf';
                }
                else {
                    result.type = 'object';
                }
            }
            else if (properties.length === 1 && properties[0].key === '__call') {
                result.type = 'func';
            }
            else {
                result.value = properties
                    .filter((item) => typeof item.key !== 'object')
                    .map((prop) => {
                    const { key } = prop;
                    const typeItem = {
                        ...lodash_1.omit(prop.value, 'name'),
                        type: prop.value.type || {},
                    };
                    typeItem.type = {
                        ...typeItem.type,
                        ...lodash_1.pick(prop.value, ['name', 'value']),
                    };
                    return transformItem(key, typeItem);
                });
            }
            break;
        }
        case 'objectOf':
        case 'instanceOf':
            result.value = transformType(value);
            break;
        case 'exact':
        case 'shape':
            result.value = Object.keys(value).map((n) => {
                const { name: _name, ...others } = value[n];
                return transformItem(n, {
                    ...others,
                    type: {
                        name: _name,
                    },
                });
            });
            break;
        case (name.match(/ReactNode$/) || {}).input:
            result.type = 'node';
            break;
        case (name.match(/JSX\.Element$/) || {}).input:
            result.type = 'element';
            break;
        default:
            result.type = 'object';
            break;
    }
    if (Object.keys(result).length === 1) {
        return result.type;
    }
    if ((result === null || result === void 0 ? void 0 : result.type) === 'oneOfType') {
        return combineOneOfValues(result);
    }
    return result;
}
exports.transformType = transformType;
function combineOneOfValues(propType) {
    var _a, _b;
    if (propType.type !== 'oneOfType') {
        return propType;
    }
    const newValue = [];
    let oneOfItem = null;
    let firstBooleanIndex = -1;
    propType.value.forEach((item) => {
        if ((item === null || item === void 0 ? void 0 : item.type) === 'oneOf') {
            if (!oneOfItem) {
                oneOfItem = {
                    type: 'oneOf',
                    value: [],
                };
            }
            if (item.value.includes(true) || item.value.includes(false)) {
                if (firstBooleanIndex !== -1) {
                    oneOfItem.value.splice(firstBooleanIndex, 1);
                    newValue.push('bool');
                }
                else {
                    firstBooleanIndex = oneOfItem.value.length;
                    oneOfItem.value = oneOfItem.value.concat(item.value);
                }
            }
            else {
                oneOfItem.value = oneOfItem.value.concat(item.value);
            }
        }
        else {
            newValue.push(item);
        }
    });
    let result = propType;
    const oneOfItemLength = (_a = oneOfItem === null || oneOfItem === void 0 ? void 0 : oneOfItem.value) === null || _a === void 0 ? void 0 : _a.length;
    if (oneOfItemLength) {
        newValue.push(oneOfItem);
    }
    if (firstBooleanIndex !== -1 || oneOfItemLength) {
        result = {
            ...propType,
            value: newValue,
        };
    }
    if (result.value.length === 1 && ((_b = result.value[0]) === null || _b === void 0 ? void 0 : _b.type) === 'oneOf') {
        result = {
            ...result,
            type: 'oneOf',
            value: result.value[0].value,
        };
    }
    result.value = lodash_1.uniq(result.value);
    return result;
}
function transformItem(name, item) {
    const { description, flowType, tsType, type = tsType || flowType, optional, required = optional, defaultValue, ...others } = item;
    const result = {
        name,
    };
    if (type) {
        result.propType = transformType({
            ...type,
            ...lodash_1.omit(others, ['name']),
            required: !!required,
        });
    }
    if (description) {
        if (description.includes('\n')) {
            result.description = description.split('\n')[0];
        }
        else {
            result.description = description;
        }
    }
    if (!lodash_1.isNil(defaultValue) && typeof defaultValue === 'object' && utils_1.isEvaluable(defaultValue)) {
        if (defaultValue === null) {
            result.defaultValue = defaultValue;
        }
        else if ('computed' in defaultValue) {
            // parsed data from react-docgen
            try {
                if (utils_1.isEvaluable(defaultValue.value)) {
                    result.defaultValue = utils_1.safeEval(defaultValue.value);
                }
                else {
                    result.defaultValue = defaultValue.value;
                }
            }
            catch (e) {
                log(e);
            }
        }
        else {
            // parsed data from react-docgen-typescript
            result.defaultValue = defaultValue.value;
        }
    }
    if (result.propType === undefined) {
        delete result.propType;
    }
    return result;
}
exports.transformItem = transformItem;
//# sourceMappingURL=transform.js.map