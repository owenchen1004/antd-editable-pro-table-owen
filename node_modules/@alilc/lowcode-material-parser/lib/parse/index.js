"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTSLike = void 0;
const tslib_1 = require("tslib");
const dynamic_1 = tslib_1.__importDefault(require("./dynamic"));
const js_1 = tslib_1.__importDefault(require("./js"));
const ts_1 = tslib_1.__importDefault(require("./ts"));
const utils_1 = require("../utils");
const core_1 = require("../core");
const log = core_1.debug.extend('parse');
function isTSLike(str) {
    return str.endsWith('ts') || str.endsWith('tsx');
}
exports.isTSLike = isTSLike;
exports.default = async (args) => {
    const { typingsFileAbsolutePath, mainFileAbsolutePath, moduleFileAbsolutePath = mainFileAbsolutePath, useEntry = false, } = args;
    if (args.accesser === 'local') {
        if (isTSLike(mainFileAbsolutePath)) {
            await utils_1.install(args);
            // in case the developer forgets to install types
            await utils_1.installTypeDTS(args);
            return ts_1.default(mainFileAbsolutePath, args);
        }
        else if (typingsFileAbsolutePath) {
            await utils_1.installTypeDTS(args);
            return ts_1.default(typingsFileAbsolutePath, args);
        }
        else {
            try {
                return js_1.default(moduleFileAbsolutePath || mainFileAbsolutePath);
            }
            catch (e) {
                log(e);
                await utils_1.install(args);
                const info = dynamic_1.default(mainFileAbsolutePath);
                if (!info || !info.length) {
                    throw Error();
                }
                return info;
            }
        }
    }
    else if (args.accesser === 'online') {
        // ts
        const entryPath = useEntry ? mainFileAbsolutePath : typingsFileAbsolutePath;
        if (entryPath && isTSLike(entryPath)) {
            await utils_1.syncTypeModules(args);
            await utils_1.install(args);
            await utils_1.installTypeDTS(args);
            await utils_1.installPeerAndDevDeps(args);
            return ts_1.default(entryPath, args);
        }
        // js
        try {
            // try dynamic parsing first
            await utils_1.installPeerAndDevDeps(args);
            const info = dynamic_1.default(mainFileAbsolutePath);
            if (!info || !info.length) {
                throw Error();
            }
            return info;
        }
        catch (e) {
            log(e);
            // if error, use static js parsing instead
            return js_1.default(moduleFileAbsolutePath || mainFileAbsolutePath);
        }
    }
    return js_1.default(moduleFileAbsolutePath || mainFileAbsolutePath);
};
//# sourceMappingURL=index.js.map