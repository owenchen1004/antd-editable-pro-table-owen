"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ast_types_1 = require("ast-types");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const getRoot_1 = tslib_1.__importDefault(require("./getRoot"));
const findJSFilePath_1 = tslib_1.__importDefault(require("./findJSFilePath"));
const buildParser = require('react-docgen/dist/babelParser').default;
const expressionTo = require('react-docgen/dist/utils/expressionTo');
const { resolveToValue, isExportsOrModuleAssignment, } = require('react-docgen').utils;
function getComposedPropTypesPath(documentation, propName, p) {
    const composes = Array.from(documentation._composes);
    let _path = null;
    const root = getRoot_1.default(p).node;
    for (const compose of composes) {
        const composePath = findJSFilePath_1.default(path_1.default.resolve(path_1.default.dirname(root.__path), compose));
        if (!composePath)
            continue;
        const fileContent = fs_1.default.readFileSync(composePath, 'utf8');
        const parser = buildParser({ filename: composePath });
        const ast = parser.parse(fileContent);
        ast_types_1.visit(ast, {
            // eslint-disable-next-line no-loop-func
            visitAssignmentExpression(path) {
                // Ignore anything that is not `exports.X = ...;` or
                // `module.exports = ...;`
                if (!isExportsOrModuleAssignment(path)) {
                    return false;
                }
                const arr = expressionTo.Array(path.get('left'));
                if (!(arr[0] === 'exports' && arr[1] === propName))
                    return false;
                // Resolve the value of the right hand side. It should resolve to a call
                // expression, something like React.createClass
                path = resolveToValue(path.get('right'));
                _path = path;
                return false;
            },
        });
        if (_path) {
            break;
        }
    }
    return _path;
}
exports.default = getComposedPropTypesPath;
//# sourceMappingURL=getComposedPath.js.map