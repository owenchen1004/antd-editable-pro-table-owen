"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ast_types_1 = require("ast-types");
const makeProxy_1 = tslib_1.__importDefault(require("../utils/makeProxy"));
const getName_1 = tslib_1.__importDefault(require("../utils/getName"));
function resolveExportDeclaration(path) {
    const definitions = [];
    if (path.node.default || ast_types_1.namedTypes.ExportDefaultDeclaration.check(path.node)) {
        const def = path.get('declaration');
        const meta = {
            exportName: 'default',
            localName: getName_1.default(def),
        };
        definitions.push(makeProxy_1.default(def, { __meta: meta }));
    }
    else if (path.node.declaration) {
        if (ast_types_1.namedTypes.VariableDeclaration.check(path.node.declaration)) {
            path.get('declaration', 'declarations').each((declarator) => {
                definitions.push(makeProxy_1.default(declarator, {
                    __meta: {
                        exportName: declarator.get('id').node.name,
                    },
                }));
            });
        }
        else {
            const def = path.get('declaration');
            definitions.push(makeProxy_1.default(def, {
                __meta: {
                    exportName: 'default',
                },
            }));
        }
    }
    else if (path.node.specifiers) {
        path.get('specifiers').each((specifier) => {
            const def = specifier.node.id ? specifier.get('id') : specifier.get('local');
            const exportName = specifier.get('exported').node.name;
            const localName = def.get('local').node.name;
            definitions.push(makeProxy_1.default(def, {
                __meta: {
                    exportName,
                    localName,
                },
            }));
        });
    }
    return definitions;
}
exports.default = resolveExportDeclaration;
//# sourceMappingURL=resolveExportDeclaration.js.map