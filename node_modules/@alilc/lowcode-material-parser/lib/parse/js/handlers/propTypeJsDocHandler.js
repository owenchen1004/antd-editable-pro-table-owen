"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-param-reassign */
const lodash_1 = require("lodash");
const core_1 = require("../../../core");
const log = core_1.debug.extend('parse:js');
const parseJsDoc = require('react-docgen/dist/utils/parseJsDoc').default;
const { getMemberValuePath, resolveToValue } = require('react-docgen').utils;
function getType(type = 'void') {
    const typeOfType = typeof type;
    if (typeOfType === 'string') {
        return typeOfType;
    }
    else if (typeOfType === 'object') {
        return lodash_1.get(type, 'name', 'void');
    }
    return 'void';
}
function generateRaw(params = [], returns = { type: 'void' }) {
    const raw = `(${params.filter(x => !!x).map(x => `${x.name}: ${getType(x.type)}`).join(', ')}) => ${returns ? getType(returns.type) : 'void'}`;
    return raw;
}
function resolveDocumentation(documentation) {
    documentation._props.forEach(propDescriptor => {
        var _a;
        const { description } = propDescriptor;
        if (description.includes('@') && ((_a = propDescriptor === null || propDescriptor === void 0 ? void 0 : propDescriptor.type) === null || _a === void 0 ? void 0 : _a.name) === 'func') {
            const jsDoc = parseJsDoc(description);
            propDescriptor.description = jsDoc.description;
            if (jsDoc.params) {
                lodash_1.set(propDescriptor, ['type', 'params'], jsDoc.params);
            }
            if (jsDoc.returns) {
                lodash_1.set(propDescriptor, ['type', 'returns'], jsDoc.returns);
            }
            try {
                const raw = generateRaw(jsDoc.params, jsDoc.returns);
                if (raw) {
                    lodash_1.set(propDescriptor, ['type', 'raw'], raw);
                }
            }
            catch (e) {
                log(e);
            }
        }
    });
}
/**
 * Extract info from the propType jsdoc blocks. Must be run after
 * propDocBlockHandler.
 */
function propTypeJsDocHandler(documentation, path) {
    let propTypesPath = getMemberValuePath(path, 'propTypes');
    if (!propTypesPath) {
        return;
    }
    propTypesPath = resolveToValue(propTypesPath);
    if (!propTypesPath) {
        return;
    }
    resolveDocumentation(documentation);
}
exports.default = propTypeJsDocHandler;
//# sourceMappingURL=propTypeJsDocHandler.js.map