"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
require("ts-polyfill");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const scan_1 = tslib_1.__importDefault(require("./scan"));
const generate_1 = tslib_1.__importDefault(require("./generate"));
const parse_1 = tslib_1.__importDefault(require("./parse"));
const localize_1 = tslib_1.__importDefault(require("./localize"));
var validate_1 = require("./validate");
Object.defineProperty(exports, "validate", { enumerable: true, get: function () { return validate_1.default; } });
var schema_json_1 = require("./validate/schema.json");
Object.defineProperty(exports, "schema", { enumerable: true, get: function () { return schema_json_1.default; } });
tslib_1.__exportStar(require("./types"), exports);
async function default_1(options) {
    var _a;
    const { accesser = 'local', dslType } = options;
    let { entry = '' } = options;
    const internalOptions = {
        ...options,
        accesser,
        entry: options.entry || '',
        root: ((_a = options) === null || _a === void 0 ? void 0 : _a.root) || '',
    };
    if (accesser === 'local') {
        const { root } = options;
        internalOptions.root = root;
        if (!root) {
            const stats = fs_extra_1.lstatSync(entry);
            if (stats.isDirectory()) {
                internalOptions.root = entry;
            }
            else {
                internalOptions.root = process.cwd();
            }
        }
        else if (!path_1.isAbsolute(entry)) {
            internalOptions.entry = path_1.join(root, entry);
        }
    }
    let workDir = internalOptions.root || '';
    let moduleDir = '';
    if (accesser === 'online') {
        const result = await localize_1.default(internalOptions);
        workDir = result.workDir;
        moduleDir = result.moduleDir;
        internalOptions.entry = result.entry ? path_1.join(moduleDir, result.entry) : moduleDir;
        internalOptions.root = moduleDir;
    }
    const scanedModel = await scan_1.default(internalOptions);
    const parsedModel = await parse_1.default({
        ...scanedModel,
        dslType,
        accesser,
        npmClient: internalOptions.npmClient,
        workDir,
        moduleDir,
    });
    const result = await generate_1.default(scanedModel, parsedModel, internalOptions);
    if (workDir && accesser === 'online') {
        await fs_extra_1.remove(workDir);
    }
    return result;
}
exports.default = default_1;
//# sourceMappingURL=index.js.map